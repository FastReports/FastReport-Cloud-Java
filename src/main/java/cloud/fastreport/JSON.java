/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonElement;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;

import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.HashMap;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
    private static Gson gson;
    private static boolean isLenientOnJson = false;
    private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private static OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private static LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
    private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    @SuppressWarnings("unchecked")
    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
                .registerTypeSelector(cloud.fastreport.model.AuditActionVM.class, new TypeSelector<cloud.fastreport.model.AuditActionVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.AuditActionVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("AuditFilePropertyChangedVM", cloud.fastreport.model.AuditFilePropertyChangedVM.class);
                        classByDiscriminatorValue.put("AuditSubscriptionActionVM", cloud.fastreport.model.AuditSubscriptionActionVM.class);
                        classByDiscriminatorValue.put("AuditTaskActionVM", cloud.fastreport.model.AuditTaskActionVM.class);
                        classByDiscriminatorValue.put("AuditActionVM", cloud.fastreport.model.AuditActionVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.AuditFilePropertyChangedVM.class, new TypeSelector<cloud.fastreport.model.AuditFilePropertyChangedVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.AuditFilePropertyChangedVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("AuditFilePropertyChangedVM", cloud.fastreport.model.AuditFilePropertyChangedVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.AuditSubscriptionActionVM.class, new TypeSelector<cloud.fastreport.model.AuditSubscriptionActionVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.AuditSubscriptionActionVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("AuditSubscriptionActionVM", cloud.fastreport.model.AuditSubscriptionActionVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.AuditTaskActionVM.class, new TypeSelector<cloud.fastreport.model.AuditTaskActionVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.AuditTaskActionVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("AuditTaskActionVM", cloud.fastreport.model.AuditTaskActionVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.CreateEmailTaskVM.class, new TypeSelector<cloud.fastreport.model.CreateEmailTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.CreateEmailTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("CreateEmailTaskVM", cloud.fastreport.model.CreateEmailTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.CreateExportReportTaskVM.class, new TypeSelector<cloud.fastreport.model.CreateExportReportTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.CreateExportReportTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("CreateExportReportTaskVM", cloud.fastreport.model.CreateExportReportTaskVM.class);
                        classByDiscriminatorValue.put("CreateExportTemplateTaskVM", cloud.fastreport.model.CreateExportTemplateTaskVM.class);
                        classByDiscriminatorValue.put("CreateExportReportTaskVM", cloud.fastreport.model.CreateExportReportTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.CreateExportTemplateTaskVM.class, new TypeSelector<cloud.fastreport.model.CreateExportTemplateTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.CreateExportTemplateTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("CreateExportTemplateTaskVM", cloud.fastreport.model.CreateExportTemplateTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.CreateFTPUploadTaskVM.class, new TypeSelector<cloud.fastreport.model.CreateFTPUploadTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.CreateFTPUploadTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("CreateFTPUploadTaskVM", cloud.fastreport.model.CreateFTPUploadTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.CreateFetchTaskVM.class, new TypeSelector<cloud.fastreport.model.CreateFetchTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.CreateFetchTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("CreateFetchTaskVM", cloud.fastreport.model.CreateFetchTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.CreatePrepareTemplateTaskVM.class, new TypeSelector<cloud.fastreport.model.CreatePrepareTemplateTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.CreatePrepareTemplateTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("CreatePrepareTemplateTaskVM", cloud.fastreport.model.CreatePrepareTemplateTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.CreateTaskBaseVM.class, new TypeSelector<cloud.fastreport.model.CreateTaskBaseVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.CreateTaskBaseVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("CreateEmailTaskVM", cloud.fastreport.model.CreateEmailTaskVM.class);
                        classByDiscriminatorValue.put("CreateExportReportTaskVM", cloud.fastreport.model.CreateExportReportTaskVM.class);
                        classByDiscriminatorValue.put("CreateExportTemplateTaskVM", cloud.fastreport.model.CreateExportTemplateTaskVM.class);
                        classByDiscriminatorValue.put("CreateFTPUploadTaskVM", cloud.fastreport.model.CreateFTPUploadTaskVM.class);
                        classByDiscriminatorValue.put("CreateFetchTaskVM", cloud.fastreport.model.CreateFetchTaskVM.class);
                        classByDiscriminatorValue.put("CreatePrepareTemplateTaskVM", cloud.fastreport.model.CreatePrepareTemplateTaskVM.class);
                        classByDiscriminatorValue.put("CreateThumbnailReportTaskVM", cloud.fastreport.model.CreateThumbnailReportTaskVM.class);
                        classByDiscriminatorValue.put("CreateThumbnailTemplateTaskVM", cloud.fastreport.model.CreateThumbnailTemplateTaskVM.class);
                        classByDiscriminatorValue.put("CreateWebhookTaskVM", cloud.fastreport.model.CreateWebhookTaskVM.class);
                        classByDiscriminatorValue.put("CreateTransformTaskBaseVM", cloud.fastreport.model.CreateTransformTaskBaseVM.class);
                        classByDiscriminatorValue.put("CreateTransportTaskBaseVM", cloud.fastreport.model.CreateTransportTaskBaseVM.class);
                        classByDiscriminatorValue.put("CreateTaskBaseVM", cloud.fastreport.model.CreateTaskBaseVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.CreateThumbnailReportTaskVM.class, new TypeSelector<cloud.fastreport.model.CreateThumbnailReportTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.CreateThumbnailReportTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("CreateThumbnailReportTaskVM", cloud.fastreport.model.CreateThumbnailReportTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.CreateThumbnailTemplateTaskVM.class, new TypeSelector<cloud.fastreport.model.CreateThumbnailTemplateTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.CreateThumbnailTemplateTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("CreateThumbnailTemplateTaskVM", cloud.fastreport.model.CreateThumbnailTemplateTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.CreateTransformTaskBaseVM.class, new TypeSelector<cloud.fastreport.model.CreateTransformTaskBaseVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.CreateTransformTaskBaseVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("CreateExportReportTaskVM", cloud.fastreport.model.CreateExportReportTaskVM.class);
                        classByDiscriminatorValue.put("CreateExportTemplateTaskVM", cloud.fastreport.model.CreateExportTemplateTaskVM.class);
                        classByDiscriminatorValue.put("CreatePrepareTemplateTaskVM", cloud.fastreport.model.CreatePrepareTemplateTaskVM.class);
                        classByDiscriminatorValue.put("CreateTransformTaskBaseVM", cloud.fastreport.model.CreateTransformTaskBaseVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.CreateTransportTaskBaseVM.class, new TypeSelector<cloud.fastreport.model.CreateTransportTaskBaseVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.CreateTransportTaskBaseVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("CreateEmailTaskVM", cloud.fastreport.model.CreateEmailTaskVM.class);
                        classByDiscriminatorValue.put("CreateFTPUploadTaskVM", cloud.fastreport.model.CreateFTPUploadTaskVM.class);
                        classByDiscriminatorValue.put("CreateWebhookTaskVM", cloud.fastreport.model.CreateWebhookTaskVM.class);
                        classByDiscriminatorValue.put("CreateTransportTaskBaseVM", cloud.fastreport.model.CreateTransportTaskBaseVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.CreateWebhookTaskVM.class, new TypeSelector<cloud.fastreport.model.CreateWebhookTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.CreateWebhookTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("CreateWebhookTaskVM", cloud.fastreport.model.CreateWebhookTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.EmailTaskVM.class, new TypeSelector<cloud.fastreport.model.EmailTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.EmailTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EmailTaskVM", cloud.fastreport.model.EmailTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.EntityVM.class, new TypeSelector<cloud.fastreport.model.EntityVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.EntityVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ExportVM", cloud.fastreport.model.ExportVM.class);
                        classByDiscriminatorValue.put("FileVM", cloud.fastreport.model.FileVM.class);
                        classByDiscriminatorValue.put("ReportVM", cloud.fastreport.model.ReportVM.class);
                        classByDiscriminatorValue.put("TemplateVM", cloud.fastreport.model.TemplateVM.class);
                        classByDiscriminatorValue.put("EntityVM", cloud.fastreport.model.EntityVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.ExportReportTaskVM.class, new TypeSelector<cloud.fastreport.model.ExportReportTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.ExportReportTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ExportReportTaskVM", cloud.fastreport.model.ExportReportTaskVM.class);
                        classByDiscriminatorValue.put("ExportTemplateTaskVM", cloud.fastreport.model.ExportTemplateTaskVM.class);
                        classByDiscriminatorValue.put("ExportReportTaskVM", cloud.fastreport.model.ExportReportTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.ExportTemplateTaskVM.class, new TypeSelector<cloud.fastreport.model.ExportTemplateTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.ExportTemplateTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ExportTemplateTaskVM", cloud.fastreport.model.ExportTemplateTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.ExportVM.class, new TypeSelector<cloud.fastreport.model.ExportVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.ExportVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ExportVM", cloud.fastreport.model.ExportVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.FTPUploadTaskVM.class, new TypeSelector<cloud.fastreport.model.FTPUploadTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.FTPUploadTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("FTPUploadTaskVM", cloud.fastreport.model.FTPUploadTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.FetchTaskVM.class, new TypeSelector<cloud.fastreport.model.FetchTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.FetchTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("FetchTaskVM", cloud.fastreport.model.FetchTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.FileVM.class, new TypeSelector<cloud.fastreport.model.FileVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.FileVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ExportVM", cloud.fastreport.model.ExportVM.class);
                        classByDiscriminatorValue.put("FileVM", cloud.fastreport.model.FileVM.class);
                        classByDiscriminatorValue.put("ReportVM", cloud.fastreport.model.ReportVM.class);
                        classByDiscriminatorValue.put("TemplateVM", cloud.fastreport.model.TemplateVM.class);
                        classByDiscriminatorValue.put("FileVM", cloud.fastreport.model.FileVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.PrepareTemplateTaskVM.class, new TypeSelector<cloud.fastreport.model.PrepareTemplateTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.PrepareTemplateTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("PrepareTemplateTaskVM", cloud.fastreport.model.PrepareTemplateTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.ReportVM.class, new TypeSelector<cloud.fastreport.model.ReportVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.ReportVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ReportVM", cloud.fastreport.model.ReportVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.RunEmailTaskVM.class, new TypeSelector<cloud.fastreport.model.RunEmailTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.RunEmailTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("RunEmailTaskVM", cloud.fastreport.model.RunEmailTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.RunExportReportTaskVM.class, new TypeSelector<cloud.fastreport.model.RunExportReportTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.RunExportReportTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("RunExportReportTaskVM", cloud.fastreport.model.RunExportReportTaskVM.class);
                        classByDiscriminatorValue.put("RunExportTemplateTaskVM", cloud.fastreport.model.RunExportTemplateTaskVM.class);
                        classByDiscriminatorValue.put("RunExportReportTaskVM", cloud.fastreport.model.RunExportReportTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.RunExportTemplateTaskVM.class, new TypeSelector<cloud.fastreport.model.RunExportTemplateTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.RunExportTemplateTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("RunExportTemplateTaskVM", cloud.fastreport.model.RunExportTemplateTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.RunFTPUploadTaskVM.class, new TypeSelector<cloud.fastreport.model.RunFTPUploadTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.RunFTPUploadTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("RunFTPUploadTaskVM", cloud.fastreport.model.RunFTPUploadTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.RunFetchTaskVM.class, new TypeSelector<cloud.fastreport.model.RunFetchTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.RunFetchTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("RunFetchTaskVM", cloud.fastreport.model.RunFetchTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.RunPrepareTemplateTaskVM.class, new TypeSelector<cloud.fastreport.model.RunPrepareTemplateTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.RunPrepareTemplateTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("RunPrepareTemplateTaskVM", cloud.fastreport.model.RunPrepareTemplateTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.RunTaskBaseVM.class, new TypeSelector<cloud.fastreport.model.RunTaskBaseVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.RunTaskBaseVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("RunEmailTaskVM", cloud.fastreport.model.RunEmailTaskVM.class);
                        classByDiscriminatorValue.put("RunExportReportTaskVM", cloud.fastreport.model.RunExportReportTaskVM.class);
                        classByDiscriminatorValue.put("RunExportTemplateTaskVM", cloud.fastreport.model.RunExportTemplateTaskVM.class);
                        classByDiscriminatorValue.put("RunFTPUploadTaskVM", cloud.fastreport.model.RunFTPUploadTaskVM.class);
                        classByDiscriminatorValue.put("RunFetchTaskVM", cloud.fastreport.model.RunFetchTaskVM.class);
                        classByDiscriminatorValue.put("RunPrepareTemplateTaskVM", cloud.fastreport.model.RunPrepareTemplateTaskVM.class);
                        classByDiscriminatorValue.put("RunThumbnailReportTaskVM", cloud.fastreport.model.RunThumbnailReportTaskVM.class);
                        classByDiscriminatorValue.put("RunThumbnailTemplateTaskVM", cloud.fastreport.model.RunThumbnailTemplateTaskVM.class);
                        classByDiscriminatorValue.put("RunWebhookTaskVM", cloud.fastreport.model.RunWebhookTaskVM.class);
                        classByDiscriminatorValue.put("RunTransformTaskBaseVM", cloud.fastreport.model.RunTransformTaskBaseVM.class);
                        classByDiscriminatorValue.put("RunTransportTaskBaseVM", cloud.fastreport.model.RunTransportTaskBaseVM.class);
                        classByDiscriminatorValue.put("RunTaskBaseVM", cloud.fastreport.model.RunTaskBaseVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.RunThumbnailReportTaskVM.class, new TypeSelector<cloud.fastreport.model.RunThumbnailReportTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.RunThumbnailReportTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("RunThumbnailReportTaskVM", cloud.fastreport.model.RunThumbnailReportTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.RunThumbnailTemplateTaskVM.class, new TypeSelector<cloud.fastreport.model.RunThumbnailTemplateTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.RunThumbnailTemplateTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("RunThumbnailTemplateTaskVM", cloud.fastreport.model.RunThumbnailTemplateTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.RunTransformTaskBaseVM.class, new TypeSelector<cloud.fastreport.model.RunTransformTaskBaseVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.RunTransformTaskBaseVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("RunExportReportTaskVM", cloud.fastreport.model.RunExportReportTaskVM.class);
                        classByDiscriminatorValue.put("RunExportTemplateTaskVM", cloud.fastreport.model.RunExportTemplateTaskVM.class);
                        classByDiscriminatorValue.put("RunPrepareTemplateTaskVM", cloud.fastreport.model.RunPrepareTemplateTaskVM.class);
                        classByDiscriminatorValue.put("RunTransformTaskBaseVM", cloud.fastreport.model.RunTransformTaskBaseVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.RunTransportTaskBaseVM.class, new TypeSelector<cloud.fastreport.model.RunTransportTaskBaseVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.RunTransportTaskBaseVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("RunEmailTaskVM", cloud.fastreport.model.RunEmailTaskVM.class);
                        classByDiscriminatorValue.put("RunFTPUploadTaskVM", cloud.fastreport.model.RunFTPUploadTaskVM.class);
                        classByDiscriminatorValue.put("RunWebhookTaskVM", cloud.fastreport.model.RunWebhookTaskVM.class);
                        classByDiscriminatorValue.put("RunTransportTaskBaseVM", cloud.fastreport.model.RunTransportTaskBaseVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.RunWebhookTaskVM.class, new TypeSelector<cloud.fastreport.model.RunWebhookTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.RunWebhookTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("RunWebhookTaskVM", cloud.fastreport.model.RunWebhookTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.TaskBaseVM.class, new TypeSelector<cloud.fastreport.model.TaskBaseVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.TaskBaseVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EmailTaskVM", cloud.fastreport.model.EmailTaskVM.class);
                        classByDiscriminatorValue.put("ExportReportTaskVM", cloud.fastreport.model.ExportReportTaskVM.class);
                        classByDiscriminatorValue.put("ExportTemplateTaskVM", cloud.fastreport.model.ExportTemplateTaskVM.class);
                        classByDiscriminatorValue.put("FTPUploadTaskVM", cloud.fastreport.model.FTPUploadTaskVM.class);
                        classByDiscriminatorValue.put("FetchTaskVM", cloud.fastreport.model.FetchTaskVM.class);
                        classByDiscriminatorValue.put("PrepareTemplateTaskVM", cloud.fastreport.model.PrepareTemplateTaskVM.class);
                        classByDiscriminatorValue.put("ThumbnailReportTaskVM", cloud.fastreport.model.ThumbnailReportTaskVM.class);
                        classByDiscriminatorValue.put("ThumbnailTemplateTaskVM", cloud.fastreport.model.ThumbnailTemplateTaskVM.class);
                        classByDiscriminatorValue.put("WebhookTaskVM", cloud.fastreport.model.WebhookTaskVM.class);
                        classByDiscriminatorValue.put("TransformTaskBaseVM", cloud.fastreport.model.TransformTaskBaseVM.class);
                        classByDiscriminatorValue.put("TransportTaskBaseVM", cloud.fastreport.model.TransportTaskBaseVM.class);
                        classByDiscriminatorValue.put("TaskBaseVM", cloud.fastreport.model.TaskBaseVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.TemplateVM.class, new TypeSelector<cloud.fastreport.model.TemplateVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.TemplateVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("TemplateVM", cloud.fastreport.model.TemplateVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.ThumbnailReportTaskVM.class, new TypeSelector<cloud.fastreport.model.ThumbnailReportTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.ThumbnailReportTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ThumbnailReportTaskVM", cloud.fastreport.model.ThumbnailReportTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.ThumbnailTemplateTaskVM.class, new TypeSelector<cloud.fastreport.model.ThumbnailTemplateTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.ThumbnailTemplateTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ThumbnailTemplateTaskVM", cloud.fastreport.model.ThumbnailTemplateTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.TransformTaskBaseVM.class, new TypeSelector<cloud.fastreport.model.TransformTaskBaseVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.TransformTaskBaseVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ExportReportTaskVM", cloud.fastreport.model.ExportReportTaskVM.class);
                        classByDiscriminatorValue.put("ExportTemplateTaskVM", cloud.fastreport.model.ExportTemplateTaskVM.class);
                        classByDiscriminatorValue.put("PrepareTemplateTaskVM", cloud.fastreport.model.PrepareTemplateTaskVM.class);
                        classByDiscriminatorValue.put("TransformTaskBaseVM", cloud.fastreport.model.TransformTaskBaseVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.TransportTaskBaseVM.class, new TypeSelector<cloud.fastreport.model.TransportTaskBaseVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.TransportTaskBaseVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EmailTaskVM", cloud.fastreport.model.EmailTaskVM.class);
                        classByDiscriminatorValue.put("FTPUploadTaskVM", cloud.fastreport.model.FTPUploadTaskVM.class);
                        classByDiscriminatorValue.put("WebhookTaskVM", cloud.fastreport.model.WebhookTaskVM.class);
                        classByDiscriminatorValue.put("TransportTaskBaseVM", cloud.fastreport.model.TransportTaskBaseVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.UpdateEmailTaskVM.class, new TypeSelector<cloud.fastreport.model.UpdateEmailTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.UpdateEmailTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("UpdateEmailTaskVM", cloud.fastreport.model.UpdateEmailTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.UpdateExportReportTaskVM.class, new TypeSelector<cloud.fastreport.model.UpdateExportReportTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.UpdateExportReportTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("UpdateExportReportTaskVM", cloud.fastreport.model.UpdateExportReportTaskVM.class);
                        classByDiscriminatorValue.put("UpdateExportTemplateTaskVM", cloud.fastreport.model.UpdateExportTemplateTaskVM.class);
                        classByDiscriminatorValue.put("UpdateExportReportTaskVM", cloud.fastreport.model.UpdateExportReportTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.UpdateExportTemplateTaskVM.class, new TypeSelector<cloud.fastreport.model.UpdateExportTemplateTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.UpdateExportTemplateTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("UpdateExportTemplateTaskVM", cloud.fastreport.model.UpdateExportTemplateTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.UpdateFTPUploadTaskVM.class, new TypeSelector<cloud.fastreport.model.UpdateFTPUploadTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.UpdateFTPUploadTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("UpdateFTPUploadTaskVM", cloud.fastreport.model.UpdateFTPUploadTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.UpdateFetchTaskVM.class, new TypeSelector<cloud.fastreport.model.UpdateFetchTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.UpdateFetchTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("UpdateFetchTaskVM", cloud.fastreport.model.UpdateFetchTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.UpdatePrepareTemplateTaskVM.class, new TypeSelector<cloud.fastreport.model.UpdatePrepareTemplateTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.UpdatePrepareTemplateTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("UpdatePrepareTemplateTaskVM", cloud.fastreport.model.UpdatePrepareTemplateTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.UpdateTaskBaseVM.class, new TypeSelector<cloud.fastreport.model.UpdateTaskBaseVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.UpdateTaskBaseVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("UpdateEmailTaskVM", cloud.fastreport.model.UpdateEmailTaskVM.class);
                        classByDiscriminatorValue.put("UpdateExportReportTaskVM", cloud.fastreport.model.UpdateExportReportTaskVM.class);
                        classByDiscriminatorValue.put("UpdateExportTemplateTaskVM", cloud.fastreport.model.UpdateExportTemplateTaskVM.class);
                        classByDiscriminatorValue.put("UpdateFTPUploadTaskVM", cloud.fastreport.model.UpdateFTPUploadTaskVM.class);
                        classByDiscriminatorValue.put("UpdateFetchTaskVM", cloud.fastreport.model.UpdateFetchTaskVM.class);
                        classByDiscriminatorValue.put("UpdatePrepareTemplateTaskVM", cloud.fastreport.model.UpdatePrepareTemplateTaskVM.class);
                        classByDiscriminatorValue.put("UpdateTaskBaseVM", cloud.fastreport.model.UpdateTaskBaseVM.class);
                        classByDiscriminatorValue.put("UpdateThumbnailReportTaskVM", cloud.fastreport.model.UpdateThumbnailReportTaskVM.class);
                        classByDiscriminatorValue.put("UpdateThumbnailTemplateTaskVM", cloud.fastreport.model.UpdateThumbnailTemplateTaskVM.class);
                        classByDiscriminatorValue.put("UpdateWebhookTaskVM", cloud.fastreport.model.UpdateWebhookTaskVM.class);
                        classByDiscriminatorValue.put("UpdateTransformTaskBaseVM", cloud.fastreport.model.UpdateTransformTaskBaseVM.class);
                        classByDiscriminatorValue.put("UpdateTransportTaskBaseVM", cloud.fastreport.model.UpdateTransportTaskBaseVM.class);
                        classByDiscriminatorValue.put("UpdateTaskBaseVM", cloud.fastreport.model.UpdateTaskBaseVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.UpdateThumbnailReportTaskVM.class, new TypeSelector<cloud.fastreport.model.UpdateThumbnailReportTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.UpdateThumbnailReportTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("UpdateThumbnailReportTaskVM", cloud.fastreport.model.UpdateThumbnailReportTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.UpdateThumbnailTemplateTaskVM.class, new TypeSelector<cloud.fastreport.model.UpdateThumbnailTemplateTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.UpdateThumbnailTemplateTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("UpdateThumbnailTemplateTaskVM", cloud.fastreport.model.UpdateThumbnailTemplateTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.UpdateTransformTaskBaseVM.class, new TypeSelector<cloud.fastreport.model.UpdateTransformTaskBaseVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.UpdateTransformTaskBaseVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("UpdateExportReportTaskVM", cloud.fastreport.model.UpdateExportReportTaskVM.class);
                        classByDiscriminatorValue.put("UpdateExportTemplateTaskVM", cloud.fastreport.model.UpdateExportTemplateTaskVM.class);
                        classByDiscriminatorValue.put("UpdatePrepareTemplateTaskVM", cloud.fastreport.model.UpdatePrepareTemplateTaskVM.class);
                        classByDiscriminatorValue.put("UpdateTransformTaskBaseVM", cloud.fastreport.model.UpdateTransformTaskBaseVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.UpdateTransportTaskBaseVM.class, new TypeSelector<cloud.fastreport.model.UpdateTransportTaskBaseVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.UpdateTransportTaskBaseVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("UpdateEmailTaskVM", cloud.fastreport.model.UpdateEmailTaskVM.class);
                        classByDiscriminatorValue.put("UpdateFTPUploadTaskVM", cloud.fastreport.model.UpdateFTPUploadTaskVM.class);
                        classByDiscriminatorValue.put("UpdateWebhookTaskVM", cloud.fastreport.model.UpdateWebhookTaskVM.class);
                        classByDiscriminatorValue.put("UpdateTransportTaskBaseVM", cloud.fastreport.model.UpdateTransportTaskBaseVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.UpdateWebhookTaskVM.class, new TypeSelector<cloud.fastreport.model.UpdateWebhookTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.UpdateWebhookTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("UpdateWebhookTaskVM", cloud.fastreport.model.UpdateWebhookTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
                .registerTypeSelector(cloud.fastreport.model.WebhookTaskVM.class, new TypeSelector<cloud.fastreport.model.WebhookTaskVM>() {
                    @Override
                    public Class<? extends cloud.fastreport.model.WebhookTaskVM> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("WebhookTaskVM", cloud.fastreport.model.WebhookTaskVM.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "$t"));
                    }
          })
        ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if (null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    /**
     * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
     *
     * @param classByDiscriminatorValue The map of discriminator values to Java classes.
     * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
     * @return The Java class that implements the OpenAPI schema
     */
    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
        if (null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    {
        GsonBuilder gsonBuilder = createGson();
        gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
        gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter);
        gsonBuilder.registerTypeAdapter(LocalDate.class, localDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.AcceptAgreementsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.AdminExportFolderCreateVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.AdminFolderCreateVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.AdminReportFolderCreateVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.AdminSubscriptionVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.AdminTemplateFolderCreateVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ApiKeyVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ApiKeysVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.AppMixins.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.AuditActionsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.AuditFilePropertyChangedVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.AuditSubscriptionActionVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.AuditTaskActionVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.AuthConfigVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.BreadcrumbsModel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.BreadcrumbsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ClearNotificationsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ContactGroupVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ContactGroupsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ContactVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ContactsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.CountVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.CreateApiKeyVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.CreateContactGroupVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.CreateContactVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.CreateDataSourceAdminVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.CreateDataSourceVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.CreateEmailTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.CreateExportTemplateTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.CreateFTPUploadTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.CreateFetchTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.CreateGroupAdminVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.CreateGroupVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.CreatePrepareTemplateTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.CreateSubscriptionInviteVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.CreateThumbnailReportTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.CreateThumbnailTemplateTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.CreateWebhookTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.DataSourceCreateDataSourceGetDataSourceUpdateDataSourceDeleteDataSourceExecuteDataSourceAdministratePermission.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.DataSourcePermission.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.DataSourcePermissionDataSourceCreateDataSourceGetDataSourceUpdateDataSourceDeleteDataSourceExecuteDataSourceAdministratePermissions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.DataSourcePermissions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.DataSourcePermissionsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.DataSourceVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.DataSourcesVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.DefaultPermissionsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.DeleteApiKeyVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.EmailTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ExportCreateAdminVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ExportCreateVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ExportFolderCreateVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ExportReportVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ExportTemplateTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ExportTemplateVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ExportVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ExportVMFilesVMBase.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ExportsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.FTPUploadTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.FetchTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.FileCreateFileGetFileUpdateFileDeleteFileExecuteFileAdministratePermission.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.FileCreateVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.FileIconVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.FilePermission.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.FilePermissionFileCreateFileGetFileUpdateFileDeleteFileExecuteFileAdministratePermissions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.FilePermissions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.FilePermissionsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.FileRenameVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.FileTagsUpdateVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.FileVMFilesVMBase.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.FilesVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.FolderCreateVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.FolderIconVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.FolderRenameVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.FolderSizeVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.FolderTagsUpdateVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.FrontendApp.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.GroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermission.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.GroupPermission.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.GroupPermissionGroupCreateGroupGetGroupUpdateGroupDeleteGroupExecuteGroupAdministratePermissions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.GroupPermissions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.GroupPermissionsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.GroupUserVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.GroupUsersVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.GroupVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.GroupsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.HttpValidationProblemDetails.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.InputFileVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.InvitedUser.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.MyPermissionsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.OutputFileVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.PrepareTemplateTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.PrepareTemplateVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.PreviewReportVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.PreviewTemplateVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ProblemDetails.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.RenameDataSourceVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.RenameGroupVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.RenameSubscriptionVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ReportCreateAdminVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ReportCreateVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ReportFolderCreateVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ReportInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ReportVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ReportVMFilesVMBase.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ReportsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.RunEmailTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.RunExportTemplateTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.RunFTPUploadTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.RunFetchTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.RunInputFileVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.RunPrepareTemplateTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.RunThumbnailReportTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.RunThumbnailTemplateTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.RunWebhookTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.SelectedFilesVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ServerConfigurationVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.SubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermission.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.SubscriptionFolder.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.SubscriptionInviteVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.SubscriptionInvitesVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.SubscriptionPeriodVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.SubscriptionPermission.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.SubscriptionPermissionSubscriptionCreateSubscriptionGetSubscriptionUpdateSubscriptionDeleteSubscriptionExecuteSubscriptionAdministratePermissions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.SubscriptionPermissions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.SubscriptionPermissionsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.SubscriptionPlanVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.SubscriptionPlansVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.SubscriptionUserVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.SubscriptionUsersVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.SubscriptionVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.SubscriptionsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.TaskPermission.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.TaskPermissionTaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermissions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.TaskPermissions.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.TaskPermissionsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.TaskSettingsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.TasksVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.TemplateCreateAdminVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.TemplateCreateVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.TemplateFolderCreateVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.TemplateVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.TemplateVMFilesVMBase.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.TemplatesVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ThumbnailReportTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.ThumbnailTemplateTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateContactGroupVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateContactVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateDataSourceConnectionStringVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateDataSourcePermissionsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateDataSourceSubscriptionVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateDefaultPermissionsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateEmailTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateExportTemplateTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateFTPUploadTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateFetchTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateFileContentVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateFilePermissionsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateGroupPermissionsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdatePrepareTemplateTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateSubscriptionLocaleVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateSubscriptionPermissionsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateTaskPermissionsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateThumbnailReportTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateThumbnailTemplateTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateUserProfileVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateUserSettingsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UpdateWebhookTaskVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UserProfileVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.UserSettingsVM.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new cloud.fastreport.model.WebhookTaskVM.CustomTypeAdapterFactory());
        gson = gsonBuilder.create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public static Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     */
    public static void setGson(Gson gson) {
        JSON.gson = gson;
    }

    public static void setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public static String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public static <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class)) {
                return (T) body;
            } else {
                throw (e);
            }
        }
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public static class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public static void setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
    }

    public static void setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {}

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {}

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public static void setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
    }

    public static void setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
    }
}
