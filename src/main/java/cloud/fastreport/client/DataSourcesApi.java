/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.client;

import cloud.fastreport.ApiCallback;
import cloud.fastreport.ApiClient;
import cloud.fastreport.ApiException;
import cloud.fastreport.ApiResponse;
import cloud.fastreport.Configuration;
import cloud.fastreport.Pair;
import cloud.fastreport.ProgressRequestBody;
import cloud.fastreport.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloud.fastreport.model.CreateDataSourceVM;
import cloud.fastreport.model.DataSourcePermissionsVM;
import cloud.fastreport.model.DataSourceSorting;
import cloud.fastreport.model.DataSourceVM;
import cloud.fastreport.model.DataSourcesVM;
import cloud.fastreport.model.ProblemDetails;
import cloud.fastreport.model.RenameDataSourceVM;
import cloud.fastreport.model.UpdateDataSourceConnectionStringVM;
import cloud.fastreport.model.UpdateDataSourcePermissionsVM;
import cloud.fastreport.model.UpdateDataSourceSubscriptionVM;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataSourcesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataSourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataSourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dataSourcesCountDataSourcesAsync
     * @param subscriptionId subscripiton id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> there is no subscription with provided id found, or user don&#39;t even have a subscription </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesCountDataSourcesAsyncCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/data/v1/DataSources/{subscriptionId}/count"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSourcesCountDataSourcesAsyncValidateBeforeCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataSourcesCountDataSourcesAsync(Async)");
        }

        return dataSourcesCountDataSourcesAsyncCall(subscriptionId, _callback);

    }

    /**
     * Returns a number of data sources in subscription
     * 
     * @param subscriptionId subscripiton id (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> there is no subscription with provided id found, or user don&#39;t even have a subscription </td><td>  -  </td></tr>
     </table>
     */
    public Long dataSourcesCountDataSourcesAsync(String subscriptionId) throws ApiException {
        ApiResponse<Long> localVarResp = dataSourcesCountDataSourcesAsyncWithHttpInfo(subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Returns a number of data sources in subscription
     * 
     * @param subscriptionId subscripiton id (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> there is no subscription with provided id found, or user don&#39;t even have a subscription </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Long> dataSourcesCountDataSourcesAsyncWithHttpInfo(String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = dataSourcesCountDataSourcesAsyncValidateBeforeCall(subscriptionId, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a number of data sources in subscription (asynchronously)
     * 
     * @param subscriptionId subscripiton id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> there is no subscription with provided id found, or user don&#39;t even have a subscription </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesCountDataSourcesAsyncAsync(String subscriptionId, final ApiCallback<Long> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSourcesCountDataSourcesAsyncValidateBeforeCall(subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSourcesCreateDataSource
     * @param createDataSourceVM create viewmodel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to create data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no subscription with provided id found, or user don&#39;t even have a subscription </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesCreateDataSourceCall(CreateDataSourceVM createDataSourceVM, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDataSourceVM;

        // create path and map variables
        String localVarPath = "/api/data/v1/DataSources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSourcesCreateDataSourceValidateBeforeCall(CreateDataSourceVM createDataSourceVM, final ApiCallback _callback) throws ApiException {
        return dataSourcesCreateDataSourceCall(createDataSourceVM, _callback);

    }

    /**
     * Create new data source
     * 
     * @param createDataSourceVM create viewmodel (optional)
     * @return DataSourceVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to create data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no subscription with provided id found, or user don&#39;t even have a subscription </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public DataSourceVM dataSourcesCreateDataSource(CreateDataSourceVM createDataSourceVM) throws ApiException {
        ApiResponse<DataSourceVM> localVarResp = dataSourcesCreateDataSourceWithHttpInfo(createDataSourceVM);
        return localVarResp.getData();
    }

    /**
     * Create new data source
     * 
     * @param createDataSourceVM create viewmodel (optional)
     * @return ApiResponse&lt;DataSourceVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to create data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no subscription with provided id found, or user don&#39;t even have a subscription </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSourceVM> dataSourcesCreateDataSourceWithHttpInfo(CreateDataSourceVM createDataSourceVM) throws ApiException {
        okhttp3.Call localVarCall = dataSourcesCreateDataSourceValidateBeforeCall(createDataSourceVM, null);
        Type localVarReturnType = new TypeToken<DataSourceVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new data source (asynchronously)
     * 
     * @param createDataSourceVM create viewmodel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to create data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no subscription with provided id found, or user don&#39;t even have a subscription </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesCreateDataSourceAsync(CreateDataSourceVM createDataSourceVM, final ApiCallback<DataSourceVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSourcesCreateDataSourceValidateBeforeCall(createDataSourceVM, _callback);
        Type localVarReturnType = new TypeToken<DataSourceVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSourcesDeleteDataSource
     * @param id data source id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to delete data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesDeleteDataSourceCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/data/v1/DataSources/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSourcesDeleteDataSourceValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dataSourcesDeleteDataSource(Async)");
        }

        return dataSourcesDeleteDataSourceCall(id, _callback);

    }

    /**
     * Delete data source by id
     * 
     * @param id data source id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to delete data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public void dataSourcesDeleteDataSource(String id) throws ApiException {
        dataSourcesDeleteDataSourceWithHttpInfo(id);
    }

    /**
     * Delete data source by id
     * 
     * @param id data source id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to delete data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dataSourcesDeleteDataSourceWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = dataSourcesDeleteDataSourceValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete data source by id (asynchronously)
     * 
     * @param id data source id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to delete data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesDeleteDataSourceAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSourcesDeleteDataSourceValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSourcesFetchData
     * @param id datasource&#39;s id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to fetch data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesFetchDataCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/data/v1/DataSources/{id}/fetch"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSourcesFetchDataValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dataSourcesFetchData(Async)");
        }

        return dataSourcesFetchDataCall(id, _callback);

    }

    /**
     * This should connect to a database and set data structure
     * 
     * @param id datasource&#39;s id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to fetch data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public void dataSourcesFetchData(String id) throws ApiException {
        dataSourcesFetchDataWithHttpInfo(id);
    }

    /**
     * This should connect to a database and set data structure
     * 
     * @param id datasource&#39;s id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to fetch data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dataSourcesFetchDataWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = dataSourcesFetchDataValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * This should connect to a database and set data structure (asynchronously)
     * 
     * @param id datasource&#39;s id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to fetch data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesFetchDataAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSourcesFetchDataValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSourcesGetAvailableDataSources
     * @param subscriptionId id of subscription where the datasources are located (optional)
     * @param skip how many data sources will be skipped (optional, default to 0)
     * @param take how many data sources will be taken (optional, default to 10)
     * @param orderBy field to order by (optional)
     * @param desc descending sort (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of params is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no subscription with provided id found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesGetAvailableDataSourcesCall(String subscriptionId, Integer skip, Integer take, DataSourceSorting orderBy, Boolean desc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/data/v1/DataSources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscriptionId", subscriptionId));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (desc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("desc", desc));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSourcesGetAvailableDataSourcesValidateBeforeCall(String subscriptionId, Integer skip, Integer take, DataSourceSorting orderBy, Boolean desc, final ApiCallback _callback) throws ApiException {
        return dataSourcesGetAvailableDataSourcesCall(subscriptionId, skip, take, orderBy, desc, _callback);

    }

    /**
     * Returns all of the data sources, that current user have permission for in a subscription &lt;br /&gt;  The method will return minimal infomration about the datasources: &lt;br /&gt;  id, name, editedTime, status.
     * 
     * @param subscriptionId id of subscription where the datasources are located (optional)
     * @param skip how many data sources will be skipped (optional, default to 0)
     * @param take how many data sources will be taken (optional, default to 10)
     * @param orderBy field to order by (optional)
     * @param desc descending sort (optional, default to false)
     * @return DataSourcesVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of params is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no subscription with provided id found </td><td>  -  </td></tr>
     </table>
     */
    public DataSourcesVM dataSourcesGetAvailableDataSources(String subscriptionId, Integer skip, Integer take, DataSourceSorting orderBy, Boolean desc) throws ApiException {
        ApiResponse<DataSourcesVM> localVarResp = dataSourcesGetAvailableDataSourcesWithHttpInfo(subscriptionId, skip, take, orderBy, desc);
        return localVarResp.getData();
    }

    /**
     * Returns all of the data sources, that current user have permission for in a subscription &lt;br /&gt;  The method will return minimal infomration about the datasources: &lt;br /&gt;  id, name, editedTime, status.
     * 
     * @param subscriptionId id of subscription where the datasources are located (optional)
     * @param skip how many data sources will be skipped (optional, default to 0)
     * @param take how many data sources will be taken (optional, default to 10)
     * @param orderBy field to order by (optional)
     * @param desc descending sort (optional, default to false)
     * @return ApiResponse&lt;DataSourcesVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of params is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no subscription with provided id found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSourcesVM> dataSourcesGetAvailableDataSourcesWithHttpInfo(String subscriptionId, Integer skip, Integer take, DataSourceSorting orderBy, Boolean desc) throws ApiException {
        okhttp3.Call localVarCall = dataSourcesGetAvailableDataSourcesValidateBeforeCall(subscriptionId, skip, take, orderBy, desc, null);
        Type localVarReturnType = new TypeToken<DataSourcesVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all of the data sources, that current user have permission for in a subscription &lt;br /&gt;  The method will return minimal infomration about the datasources: &lt;br /&gt;  id, name, editedTime, status. (asynchronously)
     * 
     * @param subscriptionId id of subscription where the datasources are located (optional)
     * @param skip how many data sources will be skipped (optional, default to 0)
     * @param take how many data sources will be taken (optional, default to 10)
     * @param orderBy field to order by (optional)
     * @param desc descending sort (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One of params is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no subscription with provided id found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesGetAvailableDataSourcesAsync(String subscriptionId, Integer skip, Integer take, DataSourceSorting orderBy, Boolean desc, final ApiCallback<DataSourcesVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSourcesGetAvailableDataSourcesValidateBeforeCall(subscriptionId, skip, take, orderBy, desc, _callback);
        Type localVarReturnType = new TypeToken<DataSourcesVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSourcesGetDataSource
     * @param id data source id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesGetDataSourceCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/data/v1/DataSources/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSourcesGetDataSourceValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dataSourcesGetDataSource(Async)");
        }

        return dataSourcesGetDataSourceCall(id, _callback);

    }

    /**
     * Get data source by id
     * 
     * @param id data source id (required)
     * @return DataSourceVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public DataSourceVM dataSourcesGetDataSource(String id) throws ApiException {
        ApiResponse<DataSourceVM> localVarResp = dataSourcesGetDataSourceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get data source by id
     * 
     * @param id data source id (required)
     * @return ApiResponse&lt;DataSourceVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSourceVM> dataSourcesGetDataSourceWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = dataSourcesGetDataSourceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DataSourceVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get data source by id (asynchronously)
     * 
     * @param id data source id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesGetDataSourceAsync(String id, final ApiCallback<DataSourceVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSourcesGetDataSourceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DataSourceVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSourcesGetPermissions
     * @param id data source id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources&#39; permissions from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesGetPermissionsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/data/v1/DataSources/{id}/permissions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSourcesGetPermissionsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dataSourcesGetPermissions(Async)");
        }

        return dataSourcesGetPermissionsCall(id, _callback);

    }

    /**
     * Get all Data source permissions
     * 
     * @param id data source id (required)
     * @return DataSourcePermissionsVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources&#39; permissions from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public DataSourcePermissionsVM dataSourcesGetPermissions(String id) throws ApiException {
        ApiResponse<DataSourcePermissionsVM> localVarResp = dataSourcesGetPermissionsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get all Data source permissions
     * 
     * @param id data source id (required)
     * @return ApiResponse&lt;DataSourcePermissionsVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources&#39; permissions from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSourcePermissionsVM> dataSourcesGetPermissionsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = dataSourcesGetPermissionsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DataSourcePermissionsVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Data source permissions (asynchronously)
     * 
     * @param id data source id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources&#39; permissions from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesGetPermissionsAsync(String id, final ApiCallback<DataSourcePermissionsVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSourcesGetPermissionsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DataSourcePermissionsVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSourcesRenameDataSource
     * @param id data source id (required)
     * @param renameDataSourceVM rename viewmodel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 or VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to update data sources&#39; name from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesRenameDataSourceCall(String id, RenameDataSourceVM renameDataSourceVM, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = renameDataSourceVM;

        // create path and map variables
        String localVarPath = "/api/data/v1/DataSources/{id}/rename"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSourcesRenameDataSourceValidateBeforeCall(String id, RenameDataSourceVM renameDataSourceVM, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dataSourcesRenameDataSource(Async)");
        }

        return dataSourcesRenameDataSourceCall(id, renameDataSourceVM, _callback);

    }

    /**
     * Rename data source by id
     * 
     * @param id data source id (required)
     * @param renameDataSourceVM rename viewmodel (optional)
     * @return DataSourceVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 or VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to update data sources&#39; name from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public DataSourceVM dataSourcesRenameDataSource(String id, RenameDataSourceVM renameDataSourceVM) throws ApiException {
        ApiResponse<DataSourceVM> localVarResp = dataSourcesRenameDataSourceWithHttpInfo(id, renameDataSourceVM);
        return localVarResp.getData();
    }

    /**
     * Rename data source by id
     * 
     * @param id data source id (required)
     * @param renameDataSourceVM rename viewmodel (optional)
     * @return ApiResponse&lt;DataSourceVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 or VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to update data sources&#39; name from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSourceVM> dataSourcesRenameDataSourceWithHttpInfo(String id, RenameDataSourceVM renameDataSourceVM) throws ApiException {
        okhttp3.Call localVarCall = dataSourcesRenameDataSourceValidateBeforeCall(id, renameDataSourceVM, null);
        Type localVarReturnType = new TypeToken<DataSourceVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rename data source by id (asynchronously)
     * 
     * @param id data source id (required)
     * @param renameDataSourceVM rename viewmodel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 or VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to update data sources&#39; name from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesRenameDataSourceAsync(String id, RenameDataSourceVM renameDataSourceVM, final ApiCallback<DataSourceVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSourcesRenameDataSourceValidateBeforeCall(id, renameDataSourceVM, _callback);
        Type localVarReturnType = new TypeToken<DataSourceVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSourcesUpdateConnectionString
     * @param id data source id (required)
     * @param updateDataSourceConnectionStringVM update viewmodel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 or VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to update data sources&#39; connection string from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesUpdateConnectionStringCall(String id, UpdateDataSourceConnectionStringVM updateDataSourceConnectionStringVM, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDataSourceConnectionStringVM;

        // create path and map variables
        String localVarPath = "/api/data/v1/DataSources/{id}/ConnectionString"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSourcesUpdateConnectionStringValidateBeforeCall(String id, UpdateDataSourceConnectionStringVM updateDataSourceConnectionStringVM, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dataSourcesUpdateConnectionString(Async)");
        }

        return dataSourcesUpdateConnectionStringCall(id, updateDataSourceConnectionStringVM, _callback);

    }

    /**
     * Update data source&#39;s connection string by id
     * 
     * @param id data source id (required)
     * @param updateDataSourceConnectionStringVM update viewmodel (optional)
     * @return DataSourceVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 or VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to update data sources&#39; connection string from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public DataSourceVM dataSourcesUpdateConnectionString(String id, UpdateDataSourceConnectionStringVM updateDataSourceConnectionStringVM) throws ApiException {
        ApiResponse<DataSourceVM> localVarResp = dataSourcesUpdateConnectionStringWithHttpInfo(id, updateDataSourceConnectionStringVM);
        return localVarResp.getData();
    }

    /**
     * Update data source&#39;s connection string by id
     * 
     * @param id data source id (required)
     * @param updateDataSourceConnectionStringVM update viewmodel (optional)
     * @return ApiResponse&lt;DataSourceVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 or VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to update data sources&#39; connection string from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSourceVM> dataSourcesUpdateConnectionStringWithHttpInfo(String id, UpdateDataSourceConnectionStringVM updateDataSourceConnectionStringVM) throws ApiException {
        okhttp3.Call localVarCall = dataSourcesUpdateConnectionStringValidateBeforeCall(id, updateDataSourceConnectionStringVM, null);
        Type localVarReturnType = new TypeToken<DataSourceVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update data source&#39;s connection string by id (asynchronously)
     * 
     * @param id data source id (required)
     * @param updateDataSourceConnectionStringVM update viewmodel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 or VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to update data sources&#39; connection string from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesUpdateConnectionStringAsync(String id, UpdateDataSourceConnectionStringVM updateDataSourceConnectionStringVM, final ApiCallback<DataSourceVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSourcesUpdateConnectionStringValidateBeforeCall(id, updateDataSourceConnectionStringVM, _callback);
        Type localVarReturnType = new TypeToken<DataSourceVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSourcesUpdatePermissions
     * @param id  (required)
     * @param updateDataSourcePermissionsVM  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 or VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to update data sources&#39; permissions from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesUpdatePermissionsCall(String id, UpdateDataSourcePermissionsVM updateDataSourcePermissionsVM, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDataSourcePermissionsVM;

        // create path and map variables
        String localVarPath = "/api/data/v1/DataSources/{id}/permissions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSourcesUpdatePermissionsValidateBeforeCall(String id, UpdateDataSourcePermissionsVM updateDataSourcePermissionsVM, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dataSourcesUpdatePermissions(Async)");
        }

        return dataSourcesUpdatePermissionsCall(id, updateDataSourcePermissionsVM, _callback);

    }

    /**
     * Update permissions
     * 
     * @param id  (required)
     * @param updateDataSourcePermissionsVM  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 or VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to update data sources&#39; permissions from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public void dataSourcesUpdatePermissions(String id, UpdateDataSourcePermissionsVM updateDataSourcePermissionsVM) throws ApiException {
        dataSourcesUpdatePermissionsWithHttpInfo(id, updateDataSourcePermissionsVM);
    }

    /**
     * Update permissions
     * 
     * @param id  (required)
     * @param updateDataSourcePermissionsVM  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 or VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to update data sources&#39; permissions from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dataSourcesUpdatePermissionsWithHttpInfo(String id, UpdateDataSourcePermissionsVM updateDataSourcePermissionsVM) throws ApiException {
        okhttp3.Call localVarCall = dataSourcesUpdatePermissionsValidateBeforeCall(id, updateDataSourcePermissionsVM, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update permissions (asynchronously)
     * 
     * @param id  (required)
     * @param updateDataSourcePermissionsVM  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 or VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to update data sources&#39; permissions from this subscription (or in your default (1st) subscription) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesUpdatePermissionsAsync(String id, UpdateDataSourcePermissionsVM updateDataSourcePermissionsVM, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSourcesUpdatePermissionsValidateBeforeCall(id, updateDataSourcePermissionsVM, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSourcesUpdateSubscriptionDataSource
     * @param id data source id (required)
     * @param updateDataSourceSubscriptionVM update subscription viewmodel (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 or VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources or create them in new subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesUpdateSubscriptionDataSourceCall(String id, UpdateDataSourceSubscriptionVM updateDataSourceSubscriptionVM, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDataSourceSubscriptionVM;

        // create path and map variables
        String localVarPath = "/api/data/v1/DataSources/{id}/updateSubscription"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSourcesUpdateSubscriptionDataSourceValidateBeforeCall(String id, UpdateDataSourceSubscriptionVM updateDataSourceSubscriptionVM, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling dataSourcesUpdateSubscriptionDataSource(Async)");
        }

        return dataSourcesUpdateSubscriptionDataSourceCall(id, updateDataSourceSubscriptionVM, _callback);

    }

    /**
     * Update data source&#39;s subscription
     * 
     * @param id data source id (required)
     * @param updateDataSourceSubscriptionVM update subscription viewmodel (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 or VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources or create them in new subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public void dataSourcesUpdateSubscriptionDataSource(String id, UpdateDataSourceSubscriptionVM updateDataSourceSubscriptionVM) throws ApiException {
        dataSourcesUpdateSubscriptionDataSourceWithHttpInfo(id, updateDataSourceSubscriptionVM);
    }

    /**
     * Update data source&#39;s subscription
     * 
     * @param id data source id (required)
     * @param updateDataSourceSubscriptionVM update subscription viewmodel (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 or VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources or create them in new subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dataSourcesUpdateSubscriptionDataSourceWithHttpInfo(String id, UpdateDataSourceSubscriptionVM updateDataSourceSubscriptionVM) throws ApiException {
        okhttp3.Call localVarCall = dataSourcesUpdateSubscriptionDataSourceValidateBeforeCall(id, updateDataSourceSubscriptionVM, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update data source&#39;s subscription (asynchronously)
     * 
     * @param id data source id (required)
     * @param updateDataSourceSubscriptionVM update subscription viewmodel (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Everything is all right </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> id is not hex24 or VM is not valid </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated or have not enough limits </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have permisison to get data sources or create them in new subscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There is no data source or subscription with provided id found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSourcesUpdateSubscriptionDataSourceAsync(String id, UpdateDataSourceSubscriptionVM updateDataSourceSubscriptionVM, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSourcesUpdateSubscriptionDataSourceValidateBeforeCall(id, updateDataSourceSubscriptionVM, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
