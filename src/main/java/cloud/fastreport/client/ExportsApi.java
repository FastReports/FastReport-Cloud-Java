/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.fastreport.client;

import cloud.fastreport.ApiClient;
import cloud.fastreport.ApiException;
import cloud.fastreport.ApiResponse;
import cloud.fastreport.Pair;

import cloud.fastreport.model.AuditActionsVM;
import cloud.fastreport.model.BreadcrumbsVM;
import cloud.fastreport.model.CountVM;
import cloud.fastreport.model.ExportFolderCreateVM;
import cloud.fastreport.model.ExportVM;
import cloud.fastreport.model.ExportsVM;
import cloud.fastreport.model.FileIconVM;
import cloud.fastreport.model.FilePermissionsVM;
import cloud.fastreport.model.FileRenameVM;
import cloud.fastreport.model.FileSorting;
import cloud.fastreport.model.FileTagsUpdateVM;
import cloud.fastreport.model.FileVM;
import cloud.fastreport.model.FilesVM;
import cloud.fastreport.model.FolderCreateVM;
import cloud.fastreport.model.FolderIconVM;
import cloud.fastreport.model.FolderRenameVM;
import cloud.fastreport.model.FolderSizeVM;
import cloud.fastreport.model.FolderTagsUpdateVM;
import cloud.fastreport.model.ProblemDetails;
import cloud.fastreport.model.SelectedFilesVM;
import cloud.fastreport.model.UpdateFilePermissionsVM;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ExportsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ExportsApi() {
    this(new ApiClient());
  }

  public ExportsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Delete all folders and files from recycle bin
   * User with a Delete RecycleBin permission can access this method.
   * @param subscriptionId subscription id (required)
   * @throws ApiException if fails to make API call
   */
  public void exportFolderAndFileClearRecycleBin(String subscriptionId) throws ApiException {
    exportFolderAndFileClearRecycleBinWithHttpInfo(subscriptionId);
  }

  /**
   * Delete all folders and files from recycle bin
   * User with a Delete RecycleBin permission can access this method.
   * @param subscriptionId subscription id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> exportFolderAndFileClearRecycleBinWithHttpInfo(String subscriptionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFolderAndFileClearRecycleBinRequestBuilder(subscriptionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFolderAndFileClearRecycleBin", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFolderAndFileClearRecycleBinRequestBuilder(String subscriptionId) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling exportFolderAndFileClearRecycleBin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/{subscriptionId}/ClearRecycleBin"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Copy folders and files to a specified folder
   * User with a Get permission for a files and Create permission for a destination folder can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @throws ApiException if fails to make API call
   */
  public void exportFolderAndFileCopyFiles(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    exportFolderAndFileCopyFilesWithHttpInfo(subscriptionId, selectedFilesVM);
  }

  /**
   * Copy folders and files to a specified folder
   * User with a Get permission for a files and Create permission for a destination folder can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> exportFolderAndFileCopyFilesWithHttpInfo(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFolderAndFileCopyFilesRequestBuilder(subscriptionId, selectedFilesVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFolderAndFileCopyFiles", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFolderAndFileCopyFilesRequestBuilder(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling exportFolderAndFileCopyFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/{subscriptionId}/CopyFiles"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(selectedFilesVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete folders and files
   * User with a Delete permission can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @throws ApiException if fails to make API call
   */
  public void exportFolderAndFileDeleteFiles(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    exportFolderAndFileDeleteFilesWithHttpInfo(subscriptionId, selectedFilesVM);
  }

  /**
   * Delete folders and files
   * User with a Delete permission can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> exportFolderAndFileDeleteFilesWithHttpInfo(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFolderAndFileDeleteFilesRequestBuilder(subscriptionId, selectedFilesVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFolderAndFileDeleteFiles", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFolderAndFileDeleteFilesRequestBuilder(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling exportFolderAndFileDeleteFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/{subscriptionId}/DeleteFiles"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(selectedFilesVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get count of files and folders what contains in a specified folder
   * User with a Get Count permission can access this method.
   * @param id folder id (required)
   * @param searchPattern string, that must be incuded in file or folder name to be counted &lt;br /&gt;              (leave undefined to count all files and folders) (optional)
   * @param useRegex set this to true if you want to use regular expression to search (optional, default to false)
   * @return CountVM
   * @throws ApiException if fails to make API call
   */
  public CountVM exportFolderAndFileGetCount(String id, String searchPattern, Boolean useRegex) throws ApiException {
    ApiResponse<CountVM> localVarResponse = exportFolderAndFileGetCountWithHttpInfo(id, searchPattern, useRegex);
    return localVarResponse.getData();
  }

  /**
   * Get count of files and folders what contains in a specified folder
   * User with a Get Count permission can access this method.
   * @param id folder id (required)
   * @param searchPattern string, that must be incuded in file or folder name to be counted &lt;br /&gt;              (leave undefined to count all files and folders) (optional)
   * @param useRegex set this to true if you want to use regular expression to search (optional, default to false)
   * @return ApiResponse&lt;CountVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CountVM> exportFolderAndFileGetCountWithHttpInfo(String id, String searchPattern, Boolean useRegex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFolderAndFileGetCountRequestBuilder(id, searchPattern, useRegex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFolderAndFileGetCount", localVarResponse);
        }
        return new ApiResponse<CountVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CountVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFolderAndFileGetCountRequestBuilder(String id, String searchPattern, Boolean useRegex) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportFolderAndFileGetCount");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/{id}/CountFolderAndFiles"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "searchPattern";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchPattern", searchPattern));
    localVarQueryParameterBaseName = "useRegex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("useRegex", useRegex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all folders and files from specified folder
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @param skip number of folder and files, that have to be skipped (optional, default to 0)
   * @param take number of folder and files, that have to be returned (optional, default to 10)
   * @param orderBy indicates a field to sort by (optional)
   * @param desc indicates if sorting is descending (optional, default to false)
   * @param searchPattern  (optional, default to )
   * @param useRegex  (optional, default to false)
   * @return FilesVM
   * @throws ApiException if fails to make API call
   */
  public FilesVM exportFolderAndFileGetFoldersAndFiles(String id, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    ApiResponse<FilesVM> localVarResponse = exportFolderAndFileGetFoldersAndFilesWithHttpInfo(id, skip, take, orderBy, desc, searchPattern, useRegex);
    return localVarResponse.getData();
  }

  /**
   * Get all folders and files from specified folder
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @param skip number of folder and files, that have to be skipped (optional, default to 0)
   * @param take number of folder and files, that have to be returned (optional, default to 10)
   * @param orderBy indicates a field to sort by (optional)
   * @param desc indicates if sorting is descending (optional, default to false)
   * @param searchPattern  (optional, default to )
   * @param useRegex  (optional, default to false)
   * @return ApiResponse&lt;FilesVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FilesVM> exportFolderAndFileGetFoldersAndFilesWithHttpInfo(String id, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFolderAndFileGetFoldersAndFilesRequestBuilder(id, skip, take, orderBy, desc, searchPattern, useRegex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFolderAndFileGetFoldersAndFiles", localVarResponse);
        }
        return new ApiResponse<FilesVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FilesVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFolderAndFileGetFoldersAndFilesRequestBuilder(String id, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportFolderAndFileGetFoldersAndFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/{id}/ListFolderAndFiles"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));
    localVarQueryParameterBaseName = "orderBy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));
    localVarQueryParameterBaseName = "desc";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("desc", desc));
    localVarQueryParameterBaseName = "searchPattern";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchPattern", searchPattern));
    localVarQueryParameterBaseName = "useRegex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("useRegex", useRegex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all folders and files from recycle bin
   * User with a Get DeletedFiles permission can access this method.
   * @param subscriptionId subscription id (required)
   * @param skip number of folder and files, that have to be skipped (optional, default to 0)
   * @param take number of folder and files, that have to be returned (optional, default to 10)
   * @param orderBy indicates a field to sort by (optional)
   * @param desc indicates if sorting is descending (optional, default to false)
   * @param searchPattern  (optional, default to )
   * @param useRegex  (optional, default to false)
   * @return FilesVM
   * @throws ApiException if fails to make API call
   */
  public FilesVM exportFolderAndFileGetRecycleBinFoldersAndFiles(String subscriptionId, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    ApiResponse<FilesVM> localVarResponse = exportFolderAndFileGetRecycleBinFoldersAndFilesWithHttpInfo(subscriptionId, skip, take, orderBy, desc, searchPattern, useRegex);
    return localVarResponse.getData();
  }

  /**
   * Get all folders and files from recycle bin
   * User with a Get DeletedFiles permission can access this method.
   * @param subscriptionId subscription id (required)
   * @param skip number of folder and files, that have to be skipped (optional, default to 0)
   * @param take number of folder and files, that have to be returned (optional, default to 10)
   * @param orderBy indicates a field to sort by (optional)
   * @param desc indicates if sorting is descending (optional, default to false)
   * @param searchPattern  (optional, default to )
   * @param useRegex  (optional, default to false)
   * @return ApiResponse&lt;FilesVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FilesVM> exportFolderAndFileGetRecycleBinFoldersAndFilesWithHttpInfo(String subscriptionId, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFolderAndFileGetRecycleBinFoldersAndFilesRequestBuilder(subscriptionId, skip, take, orderBy, desc, searchPattern, useRegex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFolderAndFileGetRecycleBinFoldersAndFiles", localVarResponse);
        }
        return new ApiResponse<FilesVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FilesVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFolderAndFileGetRecycleBinFoldersAndFilesRequestBuilder(String subscriptionId, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling exportFolderAndFileGetRecycleBinFoldersAndFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/{subscriptionId}/ListRecycleBinFolderAndFiles"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));
    localVarQueryParameterBaseName = "orderBy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));
    localVarQueryParameterBaseName = "desc";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("desc", desc));
    localVarQueryParameterBaseName = "searchPattern";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchPattern", searchPattern));
    localVarQueryParameterBaseName = "useRegex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("useRegex", useRegex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move folders and files to a specified folder
   * User with a Update Place permission for a files and Create permission for a destination folder can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @throws ApiException if fails to make API call
   */
  public void exportFolderAndFileMoveFiles(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    exportFolderAndFileMoveFilesWithHttpInfo(subscriptionId, selectedFilesVM);
  }

  /**
   * Move folders and files to a specified folder
   * User with a Update Place permission for a files and Create permission for a destination folder can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> exportFolderAndFileMoveFilesWithHttpInfo(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFolderAndFileMoveFilesRequestBuilder(subscriptionId, selectedFilesVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFolderAndFileMoveFiles", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFolderAndFileMoveFilesRequestBuilder(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling exportFolderAndFileMoveFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/{subscriptionId}/MoveFiles"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(selectedFilesVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move folders and files to bin
   * User with a Delete permission can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @throws ApiException if fails to make API call
   */
  public void exportFolderAndFileMoveFilesToBin(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    exportFolderAndFileMoveFilesToBinWithHttpInfo(subscriptionId, selectedFilesVM);
  }

  /**
   * Move folders and files to bin
   * User with a Delete permission can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> exportFolderAndFileMoveFilesToBinWithHttpInfo(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFolderAndFileMoveFilesToBinRequestBuilder(subscriptionId, selectedFilesVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFolderAndFileMoveFilesToBin", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFolderAndFileMoveFilesToBinRequestBuilder(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling exportFolderAndFileMoveFilesToBin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/{subscriptionId}/ToBin"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(selectedFilesVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Recover all folders and files from recycle bin
   * User with a Create RecycleBin permission can access this method.
   * @param subscriptionId subscription id (required)
   * @throws ApiException if fails to make API call
   */
  public void exportFolderAndFileRecoverAllFromRecycleBin(String subscriptionId) throws ApiException {
    exportFolderAndFileRecoverAllFromRecycleBinWithHttpInfo(subscriptionId);
  }

  /**
   * Recover all folders and files from recycle bin
   * User with a Create RecycleBin permission can access this method.
   * @param subscriptionId subscription id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> exportFolderAndFileRecoverAllFromRecycleBinWithHttpInfo(String subscriptionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFolderAndFileRecoverAllFromRecycleBinRequestBuilder(subscriptionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFolderAndFileRecoverAllFromRecycleBin", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFolderAndFileRecoverAllFromRecycleBinRequestBuilder(String subscriptionId) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling exportFolderAndFileRecoverAllFromRecycleBin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/{subscriptionId}/RecoverRecycleBin"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Recover folders and files from bin
   * User with a SubscriptionCreate permission can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @throws ApiException if fails to make API call
   */
  public void exportFolderAndFileRecoverFiles(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    exportFolderAndFileRecoverFilesWithHttpInfo(subscriptionId, selectedFilesVM);
  }

  /**
   * Recover folders and files from bin
   * User with a SubscriptionCreate permission can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> exportFolderAndFileRecoverFilesWithHttpInfo(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFolderAndFileRecoverFilesRequestBuilder(subscriptionId, selectedFilesVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFolderAndFileRecoverFiles", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFolderAndFileRecoverFilesRequestBuilder(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling exportFolderAndFileRecoverFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/{subscriptionId}/RecoverFiles"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(selectedFilesVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get specified folder, calculate it&#39;s size
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @return FolderSizeVM
   * @throws ApiException if fails to make API call
   */
  public FolderSizeVM exportFoldersCalculateFolderSize(String id) throws ApiException {
    ApiResponse<FolderSizeVM> localVarResponse = exportFoldersCalculateFolderSizeWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get specified folder, calculate it&#39;s size
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;FolderSizeVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FolderSizeVM> exportFoldersCalculateFolderSizeWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFoldersCalculateFolderSizeRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFoldersCalculateFolderSize", localVarResponse);
        }
        return new ApiResponse<FolderSizeVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FolderSizeVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFoldersCalculateFolderSizeRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportFoldersCalculateFolderSize");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/{id}/size"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move folder to a specified folder
   * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
   * @param id moving folder id (required)
   * @param folderId destination folder id (required)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM exportFoldersCopyFolder(String id, String folderId) throws ApiException {
    ApiResponse<FileVM> localVarResponse = exportFoldersCopyFolderWithHttpInfo(id, folderId);
    return localVarResponse.getData();
  }

  /**
   * Move folder to a specified folder
   * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
   * @param id moving folder id (required)
   * @param folderId destination folder id (required)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> exportFoldersCopyFolderWithHttpInfo(String id, String folderId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFoldersCopyFolderRequestBuilder(id, folderId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFoldersCopyFolder", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFoldersCopyFolderRequestBuilder(String id, String folderId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportFoldersCopyFolder");
    }
    // verify the required parameter 'folderId' is set
    if (folderId == null) {
      throw new ApiException(400, "Missing the required parameter 'folderId' when calling exportFoldersCopyFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/{id}/Copy/{folderId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{folderId}", ApiClient.urlEncode(folderId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete specified folder
   * User with a Delete Entity permission can access this method.
   * @param id folder id (required)
   * @throws ApiException if fails to make API call
   */
  public void exportFoldersDeleteFolder(String id) throws ApiException {
    exportFoldersDeleteFolderWithHttpInfo(id);
  }

  /**
   * Delete specified folder
   * User with a Delete Entity permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> exportFoldersDeleteFolderWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFoldersDeleteFolderRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFoldersDeleteFolder", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFoldersDeleteFolderRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportFoldersDeleteFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get specified folder breadcrumbs
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @return BreadcrumbsVM
   * @throws ApiException if fails to make API call
   */
  public BreadcrumbsVM exportFoldersGetBreadcrumbs(String id) throws ApiException {
    ApiResponse<BreadcrumbsVM> localVarResponse = exportFoldersGetBreadcrumbsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get specified folder breadcrumbs
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;BreadcrumbsVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BreadcrumbsVM> exportFoldersGetBreadcrumbsWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFoldersGetBreadcrumbsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFoldersGetBreadcrumbs", localVarResponse);
        }
        return new ApiResponse<BreadcrumbsVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BreadcrumbsVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFoldersGetBreadcrumbsRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportFoldersGetBreadcrumbs");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/{id}/Breadcrumbs"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get specified folder
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM exportFoldersGetFolder(String id) throws ApiException {
    ApiResponse<FileVM> localVarResponse = exportFoldersGetFolderWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get specified folder
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> exportFoldersGetFolderWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFoldersGetFolderRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFoldersGetFolder", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFoldersGetFolderRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportFoldersGetFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all folders from specified folder
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @param skip number of files, that have to be skipped (optional, default to 0)
   * @param take number of files, that have to be returned (optional, default to 10)
   * @param orderBy  (optional)
   * @param desc  (optional, default to false)
   * @param searchPattern  (optional, default to )
   * @param useRegex  (optional, default to false)
   * @return FilesVM
   * @throws ApiException if fails to make API call
   */
  public FilesVM exportFoldersGetFolders(String id, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    ApiResponse<FilesVM> localVarResponse = exportFoldersGetFoldersWithHttpInfo(id, skip, take, orderBy, desc, searchPattern, useRegex);
    return localVarResponse.getData();
  }

  /**
   * Get all folders from specified folder
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @param skip number of files, that have to be skipped (optional, default to 0)
   * @param take number of files, that have to be returned (optional, default to 10)
   * @param orderBy  (optional)
   * @param desc  (optional, default to false)
   * @param searchPattern  (optional, default to )
   * @param useRegex  (optional, default to false)
   * @return ApiResponse&lt;FilesVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FilesVM> exportFoldersGetFoldersWithHttpInfo(String id, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFoldersGetFoldersRequestBuilder(id, skip, take, orderBy, desc, searchPattern, useRegex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFoldersGetFolders", localVarResponse);
        }
        return new ApiResponse<FilesVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FilesVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFoldersGetFoldersRequestBuilder(String id, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportFoldersGetFolders");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/{id}/ListFolders"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));
    localVarQueryParameterBaseName = "orderBy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));
    localVarQueryParameterBaseName = "desc";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("desc", desc));
    localVarQueryParameterBaseName = "searchPattern";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchPattern", searchPattern));
    localVarQueryParameterBaseName = "useRegex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("useRegex", useRegex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get count of folders what contains in a specified folder
   * User with a Get Count permission can access this method.
   * @param id folder id (required)
   * @return CountVM
   * @throws ApiException if fails to make API call
   */
  public CountVM exportFoldersGetFoldersCount(String id) throws ApiException {
    ApiResponse<CountVM> localVarResponse = exportFoldersGetFoldersCountWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get count of folders what contains in a specified folder
   * User with a Get Count permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;CountVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CountVM> exportFoldersGetFoldersCountWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFoldersGetFoldersCountRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFoldersGetFoldersCount", localVarResponse);
        }
        return new ApiResponse<CountVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CountVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFoldersGetFoldersCountRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportFoldersGetFoldersCount");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/{id}/CountFolders"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get specified folder
   * User with a Get Entity permission can access this method.
   * @param name folder name (optional)
   * @param subscriptionId subscriptionId (optional)
   * @param parentId parent folder id (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM exportFoldersGetOrCreate(String name, String subscriptionId, String parentId) throws ApiException {
    ApiResponse<FileVM> localVarResponse = exportFoldersGetOrCreateWithHttpInfo(name, subscriptionId, parentId);
    return localVarResponse.getData();
  }

  /**
   * Get specified folder
   * User with a Get Entity permission can access this method.
   * @param name folder name (optional)
   * @param subscriptionId subscriptionId (optional)
   * @param parentId parent folder id (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> exportFoldersGetOrCreateWithHttpInfo(String name, String subscriptionId, String parentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFoldersGetOrCreateRequestBuilder(name, subscriptionId, parentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFoldersGetOrCreate", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFoldersGetOrCreateRequestBuilder(String name, String subscriptionId, String parentId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/getOrCreate";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParameterBaseName = "subscriptionId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subscriptionId", subscriptionId));
    localVarQueryParameterBaseName = "parentId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parentId", parentId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all folder permissions
   * 
   * @param id  (required)
   * @return FilePermissionsVM
   * @throws ApiException if fails to make API call
   */
  public FilePermissionsVM exportFoldersGetPermissions(String id) throws ApiException {
    ApiResponse<FilePermissionsVM> localVarResponse = exportFoldersGetPermissionsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get all folder permissions
   * 
   * @param id  (required)
   * @return ApiResponse&lt;FilePermissionsVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FilePermissionsVM> exportFoldersGetPermissionsWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFoldersGetPermissionsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFoldersGetPermissions", localVarResponse);
        }
        return new ApiResponse<FilePermissionsVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FilePermissionsVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFoldersGetPermissionsRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportFoldersGetPermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/{id}/permissions"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get user&#39;s root folder (without parents)
   * &gt; Breakchange. Now user model doesn&#39;t contain a root folders.  This method can return error 400 and 404 when subscription is not found.
   * @param subscriptionId  (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM exportFoldersGetRootFolder(String subscriptionId) throws ApiException {
    ApiResponse<FileVM> localVarResponse = exportFoldersGetRootFolderWithHttpInfo(subscriptionId);
    return localVarResponse.getData();
  }

  /**
   * Get user&#39;s root folder (without parents)
   * &gt; Breakchange. Now user model doesn&#39;t contain a root folders.  This method can return error 400 and 404 when subscription is not found.
   * @param subscriptionId  (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> exportFoldersGetRootFolderWithHttpInfo(String subscriptionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFoldersGetRootFolderRequestBuilder(subscriptionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFoldersGetRootFolder", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFoldersGetRootFolderRequestBuilder(String subscriptionId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Root";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "subscriptionId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subscriptionId", subscriptionId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move folder to a specified folder
   * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
   * @param id moving folder id (required)
   * @param folderId destination folder id (required)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM exportFoldersMoveFolder(String id, String folderId) throws ApiException {
    ApiResponse<FileVM> localVarResponse = exportFoldersMoveFolderWithHttpInfo(id, folderId);
    return localVarResponse.getData();
  }

  /**
   * Move folder to a specified folder
   * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
   * @param id moving folder id (required)
   * @param folderId destination folder id (required)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> exportFoldersMoveFolderWithHttpInfo(String id, String folderId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFoldersMoveFolderRequestBuilder(id, folderId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFoldersMoveFolder", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFoldersMoveFolderRequestBuilder(String id, String folderId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportFoldersMoveFolder");
    }
    // verify the required parameter 'folderId' is set
    if (folderId == null) {
      throw new ApiException(400, "Missing the required parameter 'folderId' when calling exportFoldersMoveFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/{id}/Move/{folderId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{folderId}", ApiClient.urlEncode(folderId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move specified folder to recycle bin
   * User with a Delete Entity permission can access this method.
   * @param id folder id (required)
   * @throws ApiException if fails to make API call
   */
  public void exportFoldersMoveFolderToBin(String id) throws ApiException {
    exportFoldersMoveFolderToBinWithHttpInfo(id);
  }

  /**
   * Move specified folder to recycle bin
   * User with a Delete Entity permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> exportFoldersMoveFolderToBinWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFoldersMoveFolderToBinRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFoldersMoveFolderToBin", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFoldersMoveFolderToBinRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportFoldersMoveFolderToBin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/{id}/ToBin"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create folder
   * User with a Create Entity permisison can access this method.
   * @param id Identifier of parent folder id (required)
   * @param exportFolderCreateVM create VM (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM exportFoldersPostFolder(String id, ExportFolderCreateVM exportFolderCreateVM) throws ApiException {
    ApiResponse<FileVM> localVarResponse = exportFoldersPostFolderWithHttpInfo(id, exportFolderCreateVM);
    return localVarResponse.getData();
  }

  /**
   * Create folder
   * User with a Create Entity permisison can access this method.
   * @param id Identifier of parent folder id (required)
   * @param exportFolderCreateVM create VM (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> exportFoldersPostFolderWithHttpInfo(String id, ExportFolderCreateVM exportFolderCreateVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFoldersPostFolderRequestBuilder(id, exportFolderCreateVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFoldersPostFolder", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFoldersPostFolderRequestBuilder(String id, ExportFolderCreateVM exportFolderCreateVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportFoldersPostFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/{id}/Folder"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(exportFolderCreateVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Recover specified folder
   * User with a Delete Entity permission can access this method.
   * @param id folder id (required)
   * @param recoveryPath  (optional)
   * @throws ApiException if fails to make API call
   */
  public void exportFoldersRecoverFolder(String id, String recoveryPath) throws ApiException {
    exportFoldersRecoverFolderWithHttpInfo(id, recoveryPath);
  }

  /**
   * Recover specified folder
   * User with a Delete Entity permission can access this method.
   * @param id folder id (required)
   * @param recoveryPath  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> exportFoldersRecoverFolderWithHttpInfo(String id, String recoveryPath) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFoldersRecoverFolderRequestBuilder(id, recoveryPath);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFoldersRecoverFolder", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFoldersRecoverFolderRequestBuilder(String id, String recoveryPath) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportFoldersRecoverFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/{id}/Recover"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "recoveryPath";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("recoveryPath", recoveryPath));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Rename a folder
   * User with a Update Name permision can access this method.
   * @param id  (required)
   * @param folderRenameVM  (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM exportFoldersRenameFolder(String id, FolderRenameVM folderRenameVM) throws ApiException {
    ApiResponse<FileVM> localVarResponse = exportFoldersRenameFolderWithHttpInfo(id, folderRenameVM);
    return localVarResponse.getData();
  }

  /**
   * Rename a folder
   * User with a Update Name permision can access this method.
   * @param id  (required)
   * @param folderRenameVM  (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> exportFoldersRenameFolderWithHttpInfo(String id, FolderRenameVM folderRenameVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFoldersRenameFolderRequestBuilder(id, folderRenameVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFoldersRenameFolder", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFoldersRenameFolderRequestBuilder(String id, FolderRenameVM folderRenameVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportFoldersRenameFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/{id}/Rename"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(folderRenameVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a folder&#39;s icon
   * User with a Update Icon permission can access this method.
   * @param id Identifier of folder (required)
   * @param folderIconVM Update icon model (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM exportFoldersUpdateIcon(String id, FolderIconVM folderIconVM) throws ApiException {
    ApiResponse<FileVM> localVarResponse = exportFoldersUpdateIconWithHttpInfo(id, folderIconVM);
    return localVarResponse.getData();
  }

  /**
   * Update a folder&#39;s icon
   * User with a Update Icon permission can access this method.
   * @param id Identifier of folder (required)
   * @param folderIconVM Update icon model (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> exportFoldersUpdateIconWithHttpInfo(String id, FolderIconVM folderIconVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFoldersUpdateIconRequestBuilder(id, folderIconVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFoldersUpdateIcon", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFoldersUpdateIconRequestBuilder(String id, FolderIconVM folderIconVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportFoldersUpdateIcon");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/{id}/Icon"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(folderIconVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update permissions
   * 
   * @param id  (required)
   * @param updateFilePermissionsVM  (optional)
   * @throws ApiException if fails to make API call
   */
  public void exportFoldersUpdatePermissions(String id, UpdateFilePermissionsVM updateFilePermissionsVM) throws ApiException {
    exportFoldersUpdatePermissionsWithHttpInfo(id, updateFilePermissionsVM);
  }

  /**
   * Update permissions
   * 
   * @param id  (required)
   * @param updateFilePermissionsVM  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> exportFoldersUpdatePermissionsWithHttpInfo(String id, UpdateFilePermissionsVM updateFilePermissionsVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFoldersUpdatePermissionsRequestBuilder(id, updateFilePermissionsVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFoldersUpdatePermissions", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFoldersUpdatePermissionsRequestBuilder(String id, UpdateFilePermissionsVM updateFilePermissionsVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportFoldersUpdatePermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/{id}/permissions"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateFilePermissionsVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update tags
   * User with a Update Tags permission can access this method.
   * @param id  (required)
   * @param folderTagsUpdateVM  (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM exportFoldersUpdateTags(String id, FolderTagsUpdateVM folderTagsUpdateVM) throws ApiException {
    ApiResponse<FileVM> localVarResponse = exportFoldersUpdateTagsWithHttpInfo(id, folderTagsUpdateVM);
    return localVarResponse.getData();
  }

  /**
   * Update tags
   * User with a Update Tags permission can access this method.
   * @param id  (required)
   * @param folderTagsUpdateVM  (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> exportFoldersUpdateTagsWithHttpInfo(String id, FolderTagsUpdateVM folderTagsUpdateVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportFoldersUpdateTagsRequestBuilder(id, folderTagsUpdateVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportFoldersUpdateTags", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportFoldersUpdateTagsRequestBuilder(String id, FolderTagsUpdateVM folderTagsUpdateVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportFoldersUpdateTags");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/{id}/UpdateTags"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(folderTagsUpdateVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Copy file to a specified folder
   * 
   * @param id file id (required)
   * @param folderId folder id (required)
   * @return ExportVM
   * @throws ApiException if fails to make API call
   */
  public ExportVM exportsCopyFile(String id, String folderId) throws ApiException {
    ApiResponse<ExportVM> localVarResponse = exportsCopyFileWithHttpInfo(id, folderId);
    return localVarResponse.getData();
  }

  /**
   * Copy file to a specified folder
   * 
   * @param id file id (required)
   * @param folderId folder id (required)
   * @return ApiResponse&lt;ExportVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExportVM> exportsCopyFileWithHttpInfo(String id, String folderId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportsCopyFileRequestBuilder(id, folderId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportsCopyFile", localVarResponse);
        }
        return new ApiResponse<ExportVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExportVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportsCopyFileRequestBuilder(String id, String folderId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportsCopyFile");
    }
    // verify the required parameter 'folderId' is set
    if (folderId == null) {
      throw new ApiException(400, "Missing the required parameter 'folderId' when calling exportsCopyFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/File/{id}/Copy/{folderId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{folderId}", ApiClient.urlEncode(folderId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete specified file
   * User with Delete permission can access the method.
   * @param id file id (required)
   * @throws ApiException if fails to make API call
   */
  public void exportsDeleteFile(String id) throws ApiException {
    exportsDeleteFileWithHttpInfo(id);
  }

  /**
   * Delete specified file
   * User with Delete permission can access the method.
   * @param id file id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> exportsDeleteFileWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportsDeleteFileRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportsDeleteFile", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportsDeleteFileRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportsDeleteFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/File/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * 
   * @param id  (required)
   * @return ExportVM
   * @throws ApiException if fails to make API call
   */
  public ExportVM exportsGetFile(String id) throws ApiException {
    ApiResponse<ExportVM> localVarResponse = exportsGetFileWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * 
   * 
   * @param id  (required)
   * @return ApiResponse&lt;ExportVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExportVM> exportsGetFileWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportsGetFileRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportsGetFile", localVarResponse);
        }
        return new ApiResponse<ExportVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExportVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportsGetFileRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportsGetFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/File/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns list of actions, performed on this file
   * 
   * @param id  (required)
   * @param skip  (optional, default to 0)
   * @param take  (optional, default to 10)
   * @return AuditActionsVM
   * @throws ApiException if fails to make API call
   */
  public AuditActionsVM exportsGetFileHistory(String id, Integer skip, Integer take) throws ApiException {
    ApiResponse<AuditActionsVM> localVarResponse = exportsGetFileHistoryWithHttpInfo(id, skip, take);
    return localVarResponse.getData();
  }

  /**
   * Returns list of actions, performed on this file
   * 
   * @param id  (required)
   * @param skip  (optional, default to 0)
   * @param take  (optional, default to 10)
   * @return ApiResponse&lt;AuditActionsVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AuditActionsVM> exportsGetFileHistoryWithHttpInfo(String id, Integer skip, Integer take) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportsGetFileHistoryRequestBuilder(id, skip, take);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportsGetFileHistory", localVarResponse);
        }
        return new ApiResponse<AuditActionsVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AuditActionsVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportsGetFileHistoryRequestBuilder(String id, Integer skip, Integer take) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportsGetFileHistory");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/File/{id}/History"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get count of files what contains in a specified folder
   * User with Get Count permission can access this method.
   * @param id folder id (required)
   * @return CountVM
   * @throws ApiException if fails to make API call
   */
  public CountVM exportsGetFilesCount(String id) throws ApiException {
    ApiResponse<CountVM> localVarResponse = exportsGetFilesCountWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get count of files what contains in a specified folder
   * User with Get Count permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;CountVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CountVM> exportsGetFilesCountWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportsGetFilesCountRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportsGetFilesCount", localVarResponse);
        }
        return new ApiResponse<CountVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CountVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportsGetFilesCountRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportsGetFilesCount");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/{id}/CountFiles"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all files from specified folder. &lt;br /&gt;  User with Get Entity permission can access this method. &lt;br /&gt;  The method will returns minimal infomration about the file: &lt;br /&gt;  id, name, size, editedTime, createdTime, tags, status, statusReason.
   * 
   * @param id folder id (required)
   * @param skip number of files, that have to be skipped (optional, default to 0)
   * @param take number of files, that have to be returned (optional, default to 10)
   * @param searchPattern  (optional)
   * @param orderBy  (optional)
   * @param desc  (optional, default to false)
   * @param useRegex  (optional, default to false)
   * @return ExportsVM
   * @throws ApiException if fails to make API call
   */
  public ExportsVM exportsGetFilesList(String id, Integer skip, Integer take, String searchPattern, FileSorting orderBy, Boolean desc, Boolean useRegex) throws ApiException {
    ApiResponse<ExportsVM> localVarResponse = exportsGetFilesListWithHttpInfo(id, skip, take, searchPattern, orderBy, desc, useRegex);
    return localVarResponse.getData();
  }

  /**
   * Get all files from specified folder. &lt;br /&gt;  User with Get Entity permission can access this method. &lt;br /&gt;  The method will returns minimal infomration about the file: &lt;br /&gt;  id, name, size, editedTime, createdTime, tags, status, statusReason.
   * 
   * @param id folder id (required)
   * @param skip number of files, that have to be skipped (optional, default to 0)
   * @param take number of files, that have to be returned (optional, default to 10)
   * @param searchPattern  (optional)
   * @param orderBy  (optional)
   * @param desc  (optional, default to false)
   * @param useRegex  (optional, default to false)
   * @return ApiResponse&lt;ExportsVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExportsVM> exportsGetFilesListWithHttpInfo(String id, Integer skip, Integer take, String searchPattern, FileSorting orderBy, Boolean desc, Boolean useRegex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportsGetFilesListRequestBuilder(id, skip, take, searchPattern, orderBy, desc, useRegex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportsGetFilesList", localVarResponse);
        }
        return new ApiResponse<ExportsVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExportsVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportsGetFilesListRequestBuilder(String id, Integer skip, Integer take, String searchPattern, FileSorting orderBy, Boolean desc, Boolean useRegex) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportsGetFilesList");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/Folder/{id}/ListFiles"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));
    localVarQueryParameterBaseName = "searchPattern";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchPattern", searchPattern));
    localVarQueryParameterBaseName = "orderBy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));
    localVarQueryParameterBaseName = "desc";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("desc", desc));
    localVarQueryParameterBaseName = "useRegex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("useRegex", useRegex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all file permissions
   * 
   * @param id  (required)
   * @return FilePermissionsVM
   * @throws ApiException if fails to make API call
   */
  public FilePermissionsVM exportsGetPermissions(String id) throws ApiException {
    ApiResponse<FilePermissionsVM> localVarResponse = exportsGetPermissionsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get all file permissions
   * 
   * @param id  (required)
   * @return ApiResponse&lt;FilePermissionsVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FilePermissionsVM> exportsGetPermissionsWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportsGetPermissionsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportsGetPermissions", localVarResponse);
        }
        return new ApiResponse<FilePermissionsVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FilePermissionsVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportsGetPermissionsRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportsGetPermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/File/{id}/permissions"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move file to a specified folder
   * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
   * @param id file id (required)
   * @param folderId folder id (required)
   * @return ExportVM
   * @throws ApiException if fails to make API call
   */
  public ExportVM exportsMoveFile(String id, String folderId) throws ApiException {
    ApiResponse<ExportVM> localVarResponse = exportsMoveFileWithHttpInfo(id, folderId);
    return localVarResponse.getData();
  }

  /**
   * Move file to a specified folder
   * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
   * @param id file id (required)
   * @param folderId folder id (required)
   * @return ApiResponse&lt;ExportVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExportVM> exportsMoveFileWithHttpInfo(String id, String folderId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportsMoveFileRequestBuilder(id, folderId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportsMoveFile", localVarResponse);
        }
        return new ApiResponse<ExportVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExportVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportsMoveFileRequestBuilder(String id, String folderId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportsMoveFile");
    }
    // verify the required parameter 'folderId' is set
    if (folderId == null) {
      throw new ApiException(400, "Missing the required parameter 'folderId' when calling exportsMoveFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/File/{id}/Move/{folderId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{folderId}", ApiClient.urlEncode(folderId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move specified file to recycle bin
   * User with Delete permission can access the method.
   * @param id file id (required)
   * @throws ApiException if fails to make API call
   */
  public void exportsMoveFileToBin(String id) throws ApiException {
    exportsMoveFileToBinWithHttpInfo(id);
  }

  /**
   * Move specified file to recycle bin
   * User with Delete permission can access the method.
   * @param id file id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> exportsMoveFileToBinWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportsMoveFileToBinRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportsMoveFileToBin", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportsMoveFileToBinRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportsMoveFileToBin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/File/{id}/ToBin"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Recover specified file from bin
   * User with Delete permission can access the method.
   * @param id file id (required)
   * @param recoveryPath  (optional)
   * @throws ApiException if fails to make API call
   */
  public void exportsRecoverFile(String id, String recoveryPath) throws ApiException {
    exportsRecoverFileWithHttpInfo(id, recoveryPath);
  }

  /**
   * Recover specified file from bin
   * User with Delete permission can access the method.
   * @param id file id (required)
   * @param recoveryPath  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> exportsRecoverFileWithHttpInfo(String id, String recoveryPath) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportsRecoverFileRequestBuilder(id, recoveryPath);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportsRecoverFile", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportsRecoverFileRequestBuilder(String id, String recoveryPath) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportsRecoverFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/File/{id}/Recover"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "recoveryPath";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("recoveryPath", recoveryPath));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Rename a file
   * User with Update Name permission can access this method.
   * @param id  (required)
   * @param fileRenameVM  (optional)
   * @return ExportVM
   * @throws ApiException if fails to make API call
   */
  public ExportVM exportsRenameFile(String id, FileRenameVM fileRenameVM) throws ApiException {
    ApiResponse<ExportVM> localVarResponse = exportsRenameFileWithHttpInfo(id, fileRenameVM);
    return localVarResponse.getData();
  }

  /**
   * Rename a file
   * User with Update Name permission can access this method.
   * @param id  (required)
   * @param fileRenameVM  (optional)
   * @return ApiResponse&lt;ExportVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExportVM> exportsRenameFileWithHttpInfo(String id, FileRenameVM fileRenameVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportsRenameFileRequestBuilder(id, fileRenameVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportsRenameFile", localVarResponse);
        }
        return new ApiResponse<ExportVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExportVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportsRenameFileRequestBuilder(String id, FileRenameVM fileRenameVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportsRenameFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/File/{id}/Rename"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(fileRenameVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a files&#39;s icon
   * User with Update Icon permission can access this method.
   * @param id  (required)
   * @param fileIconVM  (optional)
   * @return ExportVM
   * @throws ApiException if fails to make API call
   */
  public ExportVM exportsUpdateIcon(String id, FileIconVM fileIconVM) throws ApiException {
    ApiResponse<ExportVM> localVarResponse = exportsUpdateIconWithHttpInfo(id, fileIconVM);
    return localVarResponse.getData();
  }

  /**
   * Update a files&#39;s icon
   * User with Update Icon permission can access this method.
   * @param id  (required)
   * @param fileIconVM  (optional)
   * @return ApiResponse&lt;ExportVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExportVM> exportsUpdateIconWithHttpInfo(String id, FileIconVM fileIconVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportsUpdateIconRequestBuilder(id, fileIconVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportsUpdateIcon", localVarResponse);
        }
        return new ApiResponse<ExportVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExportVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportsUpdateIconRequestBuilder(String id, FileIconVM fileIconVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportsUpdateIcon");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/File/{id}/Icon"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(fileIconVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update permissions
   * 
   * @param id  (required)
   * @param updateFilePermissionsVM  (optional)
   * @throws ApiException if fails to make API call
   */
  public void exportsUpdatePermissions(String id, UpdateFilePermissionsVM updateFilePermissionsVM) throws ApiException {
    exportsUpdatePermissionsWithHttpInfo(id, updateFilePermissionsVM);
  }

  /**
   * Update permissions
   * 
   * @param id  (required)
   * @param updateFilePermissionsVM  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> exportsUpdatePermissionsWithHttpInfo(String id, UpdateFilePermissionsVM updateFilePermissionsVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportsUpdatePermissionsRequestBuilder(id, updateFilePermissionsVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportsUpdatePermissions", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportsUpdatePermissionsRequestBuilder(String id, UpdateFilePermissionsVM updateFilePermissionsVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportsUpdatePermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/File/{id}/permissions"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateFilePermissionsVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update tags
   * User with Update Tags permission can access this method.
   * @param id  (required)
   * @param fileTagsUpdateVM  (optional)
   * @return ExportVM
   * @throws ApiException if fails to make API call
   */
  public ExportVM exportsUpdateTags(String id, FileTagsUpdateVM fileTagsUpdateVM) throws ApiException {
    ApiResponse<ExportVM> localVarResponse = exportsUpdateTagsWithHttpInfo(id, fileTagsUpdateVM);
    return localVarResponse.getData();
  }

  /**
   * Update tags
   * User with Update Tags permission can access this method.
   * @param id  (required)
   * @param fileTagsUpdateVM  (optional)
   * @return ApiResponse&lt;ExportVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExportVM> exportsUpdateTagsWithHttpInfo(String id, FileTagsUpdateVM fileTagsUpdateVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = exportsUpdateTagsRequestBuilder(id, fileTagsUpdateVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("exportsUpdateTags", localVarResponse);
        }
        return new ApiResponse<ExportVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExportVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder exportsUpdateTagsRequestBuilder(String id, FileTagsUpdateVM fileTagsUpdateVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling exportsUpdateTags");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Exports/File/{id}/UpdateTags"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(fileTagsUpdateVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
