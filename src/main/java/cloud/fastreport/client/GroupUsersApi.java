/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.client;

import cloud.fastreport.ApiCallback;
import cloud.fastreport.ApiClient;
import cloud.fastreport.ApiException;
import cloud.fastreport.ApiResponse;
import cloud.fastreport.Configuration;
import cloud.fastreport.Pair;
import cloud.fastreport.ProgressRequestBody;
import cloud.fastreport.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloud.fastreport.model.GroupUsersVM;
import cloud.fastreport.model.ProblemDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupUsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupUsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupUsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for groupUsersAddUserToGroup
     * @param id Identifier of group (required)
     * @param userId Identifier of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupUsersAddUserToGroupCall(String id, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/manage/v1/Groups/{id}/Users/{userId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupUsersAddUserToGroupValidateBeforeCall(String id, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupUsersAddUserToGroup(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling groupUsersAddUserToGroup(Async)");
        }

        return groupUsersAddUserToGroupCall(id, userId, _callback);

    }

    /**
     * Add user to the group by identifier
     * 
     * @param id Identifier of group (required)
     * @param userId Identifier of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public void groupUsersAddUserToGroup(String id, String userId) throws ApiException {
        groupUsersAddUserToGroupWithHttpInfo(id, userId);
    }

    /**
     * Add user to the group by identifier
     * 
     * @param id Identifier of group (required)
     * @param userId Identifier of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> groupUsersAddUserToGroupWithHttpInfo(String id, String userId) throws ApiException {
        okhttp3.Call localVarCall = groupUsersAddUserToGroupValidateBeforeCall(id, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add user to the group by identifier (asynchronously)
     * 
     * @param id Identifier of group (required)
     * @param userId Identifier of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupUsersAddUserToGroupAsync(String id, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupUsersAddUserToGroupValidateBeforeCall(id, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupUsersGetUsersInGroup
     * @param id Identifier of group (required)
     * @param skip how many to skip (optional, default to 0)
     * @param take how many to take (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupUsersGetUsersInGroupCall(String id, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/manage/v1/Groups/{id}/Users"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupUsersGetUsersInGroupValidateBeforeCall(String id, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupUsersGetUsersInGroup(Async)");
        }

        return groupUsersGetUsersInGroupCall(id, skip, take, _callback);

    }

    /**
     * Returns users in the group by identifier
     * 
     * @param id Identifier of group (required)
     * @param skip how many to skip (optional, default to 0)
     * @param take how many to take (optional, default to 10)
     * @return GroupUsersVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public GroupUsersVM groupUsersGetUsersInGroup(String id, Integer skip, Integer take) throws ApiException {
        ApiResponse<GroupUsersVM> localVarResp = groupUsersGetUsersInGroupWithHttpInfo(id, skip, take);
        return localVarResp.getData();
    }

    /**
     * Returns users in the group by identifier
     * 
     * @param id Identifier of group (required)
     * @param skip how many to skip (optional, default to 0)
     * @param take how many to take (optional, default to 10)
     * @return ApiResponse&lt;GroupUsersVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupUsersVM> groupUsersGetUsersInGroupWithHttpInfo(String id, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = groupUsersGetUsersInGroupValidateBeforeCall(id, skip, take, null);
        Type localVarReturnType = new TypeToken<GroupUsersVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns users in the group by identifier (asynchronously)
     * 
     * @param id Identifier of group (required)
     * @param skip how many to skip (optional, default to 0)
     * @param take how many to take (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupUsersGetUsersInGroupAsync(String id, Integer skip, Integer take, final ApiCallback<GroupUsersVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupUsersGetUsersInGroupValidateBeforeCall(id, skip, take, _callback);
        Type localVarReturnType = new TypeToken<GroupUsersVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupUsersLeaveFromGroup
     * @param id Identifier of group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Succesfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupUsersLeaveFromGroupCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/manage/v1/Groups/{id}/leave"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupUsersLeaveFromGroupValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupUsersLeaveFromGroup(Async)");
        }

        return groupUsersLeaveFromGroupCall(id, _callback);

    }

    /**
     * Leave from the group
     * 
     * @param id Identifier of group (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Succesfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public void groupUsersLeaveFromGroup(String id) throws ApiException {
        groupUsersLeaveFromGroupWithHttpInfo(id);
    }

    /**
     * Leave from the group
     * 
     * @param id Identifier of group (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Succesfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> groupUsersLeaveFromGroupWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = groupUsersLeaveFromGroupValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Leave from the group (asynchronously)
     * 
     * @param id Identifier of group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Succesfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupUsersLeaveFromGroupAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupUsersLeaveFromGroupValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupUsersRemoveFromGroup
     * @param id Identifier of group (required)
     * @param userId Identifier of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Succesfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupUsersRemoveFromGroupCall(String id, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/manage/v1/Groups/{id}/Users/{userId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupUsersRemoveFromGroupValidateBeforeCall(String id, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupUsersRemoveFromGroup(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling groupUsersRemoveFromGroup(Async)");
        }

        return groupUsersRemoveFromGroupCall(id, userId, _callback);

    }

    /**
     * Remove user from the group by identifier
     * 
     * @param id Identifier of group (required)
     * @param userId Identifier of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Succesfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public void groupUsersRemoveFromGroup(String id, String userId) throws ApiException {
        groupUsersRemoveFromGroupWithHttpInfo(id, userId);
    }

    /**
     * Remove user from the group by identifier
     * 
     * @param id Identifier of group (required)
     * @param userId Identifier of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Succesfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> groupUsersRemoveFromGroupWithHttpInfo(String id, String userId) throws ApiException {
        okhttp3.Call localVarCall = groupUsersRemoveFromGroupValidateBeforeCall(id, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove user from the group by identifier (asynchronously)
     * 
     * @param id Identifier of group (required)
     * @param userId Identifier of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Succesfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupUsersRemoveFromGroupAsync(String id, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupUsersRemoveFromGroupValidateBeforeCall(id, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
