/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.client;

import cloud.fastreport.ApiCallback;
import cloud.fastreport.ApiClient;
import cloud.fastreport.ApiException;
import cloud.fastreport.ApiResponse;
import cloud.fastreport.Configuration;
import cloud.fastreport.Pair;
import cloud.fastreport.ProgressRequestBody;
import cloud.fastreport.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloud.fastreport.model.CreateGroupVM;
import cloud.fastreport.model.GroupPermissionsVM;
import cloud.fastreport.model.GroupVM;
import cloud.fastreport.model.GroupsVM;
import cloud.fastreport.model.ProblemDetails;
import cloud.fastreport.model.RenameGroupVM;
import cloud.fastreport.model.UpdateGroupPermissionsVM;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for groupsCreateGroup
     * @param createGroupVM Model for creating (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Information from view model is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsCreateGroupCall(CreateGroupVM createGroupVM, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGroupVM;

        // create path and map variables
        String localVarPath = "/api/manage/v1/Groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsCreateGroupValidateBeforeCall(CreateGroupVM createGroupVM, final ApiCallback _callback) throws ApiException {
        return groupsCreateGroupCall(createGroupVM, _callback);

    }

    /**
     * Create a new user group
     * 
     * @param createGroupVM Model for creating (optional)
     * @return GroupVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Information from view model is not found </td><td>  -  </td></tr>
     </table>
     */
    public GroupVM groupsCreateGroup(CreateGroupVM createGroupVM) throws ApiException {
        ApiResponse<GroupVM> localVarResp = groupsCreateGroupWithHttpInfo(createGroupVM);
        return localVarResp.getData();
    }

    /**
     * Create a new user group
     * 
     * @param createGroupVM Model for creating (optional)
     * @return ApiResponse&lt;GroupVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Information from view model is not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupVM> groupsCreateGroupWithHttpInfo(CreateGroupVM createGroupVM) throws ApiException {
        okhttp3.Call localVarCall = groupsCreateGroupValidateBeforeCall(createGroupVM, null);
        Type localVarReturnType = new TypeToken<GroupVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new user group (asynchronously)
     * 
     * @param createGroupVM Model for creating (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Information from view model is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsCreateGroupAsync(CreateGroupVM createGroupVM, final ApiCallback<GroupVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsCreateGroupValidateBeforeCall(createGroupVM, _callback);
        Type localVarReturnType = new TypeToken<GroupVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsDeleteGroup
     * @param id Identifier of group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Succesfully delete </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscripiton is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsDeleteGroupCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/manage/v1/Groups/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsDeleteGroupValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupsDeleteGroup(Async)");
        }

        return groupsDeleteGroupCall(id, _callback);

    }

    /**
     * Delete group by identifier
     * 
     * @param id Identifier of group (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Succesfully delete </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscripiton is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public void groupsDeleteGroup(String id) throws ApiException {
        groupsDeleteGroupWithHttpInfo(id);
    }

    /**
     * Delete group by identifier
     * 
     * @param id Identifier of group (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Succesfully delete </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscripiton is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> groupsDeleteGroupWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = groupsDeleteGroupValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete group by identifier (asynchronously)
     * 
     * @param id Identifier of group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Succesfully delete </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscripiton is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsDeleteGroupAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsDeleteGroupValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGetGroup
     * @param id Identifier of group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetGroupCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/manage/v1/Groups/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGetGroupValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupsGetGroup(Async)");
        }

        return groupsGetGroupCall(id, _callback);

    }

    /**
     * Gets group by identifier
     * 
     * @param id Identifier of group (required)
     * @return GroupVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public GroupVM groupsGetGroup(String id) throws ApiException {
        ApiResponse<GroupVM> localVarResp = groupsGetGroupWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Gets group by identifier
     * 
     * @param id Identifier of group (required)
     * @return ApiResponse&lt;GroupVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupVM> groupsGetGroupWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = groupsGetGroupValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GroupVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets group by identifier (asynchronously)
     * 
     * @param id Identifier of group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetGroupAsync(String id, final ApiCallback<GroupVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGetGroupValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GroupVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGetGroupList
     * @param skip How many groups need to skip (optional, default to 0)
     * @param take How many groups need to take (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Current user is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetGroupListCall(Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/manage/v1/Groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGetGroupListValidateBeforeCall(Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        return groupsGetGroupListCall(skip, take, _callback);

    }

    /**
     * Returns a list of current user&#39;s groups&lt;br /&gt;  This method will return following data about groups : &lt;br /&gt;  Id, Name, Created time (UTC), Edited time (UTC), creator id, &lt;br /&gt;  editor id, subscription id
     * 
     * @param skip How many groups need to skip (optional, default to 0)
     * @param take How many groups need to take (optional, default to 10)
     * @return GroupsVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Current user is not found </td><td>  -  </td></tr>
     </table>
     */
    public GroupsVM groupsGetGroupList(Integer skip, Integer take) throws ApiException {
        ApiResponse<GroupsVM> localVarResp = groupsGetGroupListWithHttpInfo(skip, take);
        return localVarResp.getData();
    }

    /**
     * Returns a list of current user&#39;s groups&lt;br /&gt;  This method will return following data about groups : &lt;br /&gt;  Id, Name, Created time (UTC), Edited time (UTC), creator id, &lt;br /&gt;  editor id, subscription id
     * 
     * @param skip How many groups need to skip (optional, default to 0)
     * @param take How many groups need to take (optional, default to 10)
     * @return ApiResponse&lt;GroupsVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Current user is not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupsVM> groupsGetGroupListWithHttpInfo(Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = groupsGetGroupListValidateBeforeCall(skip, take, null);
        Type localVarReturnType = new TypeToken<GroupsVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of current user&#39;s groups&lt;br /&gt;  This method will return following data about groups : &lt;br /&gt;  Id, Name, Created time (UTC), Edited time (UTC), creator id, &lt;br /&gt;  editor id, subscription id (asynchronously)
     * 
     * @param skip How many groups need to skip (optional, default to 0)
     * @param take How many groups need to take (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Current user is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetGroupListAsync(Integer skip, Integer take, final ApiCallback<GroupsVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGetGroupListValidateBeforeCall(skip, take, _callback);
        Type localVarReturnType = new TypeToken<GroupsVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGetPermissions
     * @param id Identifier of group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetPermissionsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/manage/v1/Groups/{id}/permissions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGetPermissionsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupsGetPermissions(Async)");
        }

        return groupsGetPermissionsCall(id, _callback);

    }

    /**
     * Gets group permissions by identifier
     * 
     * @param id Identifier of group (required)
     * @return GroupPermissionsVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
     </table>
     */
    public GroupPermissionsVM groupsGetPermissions(String id) throws ApiException {
        ApiResponse<GroupPermissionsVM> localVarResp = groupsGetPermissionsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Gets group permissions by identifier
     * 
     * @param id Identifier of group (required)
     * @return ApiResponse&lt;GroupPermissionsVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupPermissionsVM> groupsGetPermissionsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = groupsGetPermissionsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GroupPermissionsVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets group permissions by identifier (asynchronously)
     * 
     * @param id Identifier of group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully retured </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetPermissionsAsync(String id, final ApiCallback<GroupPermissionsVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGetPermissionsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GroupPermissionsVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsRenameGroup
     * @param id Identifier of group (required)
     * @param renameGroupVM Model for renaming (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully renamed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsRenameGroupCall(String id, RenameGroupVM renameGroupVM, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = renameGroupVM;

        // create path and map variables
        String localVarPath = "/api/manage/v1/Groups/{id}/rename"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsRenameGroupValidateBeforeCall(String id, RenameGroupVM renameGroupVM, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupsRenameGroup(Async)");
        }

        // verify the required parameter 'renameGroupVM' is set
        if (renameGroupVM == null) {
            throw new ApiException("Missing the required parameter 'renameGroupVM' when calling groupsRenameGroup(Async)");
        }

        return groupsRenameGroupCall(id, renameGroupVM, _callback);

    }

    /**
     * Rename group by identifier
     * 
     * @param id Identifier of group (required)
     * @param renameGroupVM Model for renaming (required)
     * @return GroupVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully renamed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public GroupVM groupsRenameGroup(String id, RenameGroupVM renameGroupVM) throws ApiException {
        ApiResponse<GroupVM> localVarResp = groupsRenameGroupWithHttpInfo(id, renameGroupVM);
        return localVarResp.getData();
    }

    /**
     * Rename group by identifier
     * 
     * @param id Identifier of group (required)
     * @param renameGroupVM Model for renaming (required)
     * @return ApiResponse&lt;GroupVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully renamed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupVM> groupsRenameGroupWithHttpInfo(String id, RenameGroupVM renameGroupVM) throws ApiException {
        okhttp3.Call localVarCall = groupsRenameGroupValidateBeforeCall(id, renameGroupVM, null);
        Type localVarReturnType = new TypeToken<GroupVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rename group by identifier (asynchronously)
     * 
     * @param id Identifier of group (required)
     * @param renameGroupVM Model for renaming (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully renamed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Group with this identifier is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsRenameGroupAsync(String id, RenameGroupVM renameGroupVM, final ApiCallback<GroupVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsRenameGroupValidateBeforeCall(id, renameGroupVM, _callback);
        Type localVarReturnType = new TypeToken<GroupVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsUpdatePermissions
     * @param id  (required)
     * @param updateGroupPermissionsVM  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsUpdatePermissionsCall(String id, UpdateGroupPermissionsVM updateGroupPermissionsVM, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGroupPermissionsVM;

        // create path and map variables
        String localVarPath = "/api/manage/v1/Groups/{id}/permissions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsUpdatePermissionsValidateBeforeCall(String id, UpdateGroupPermissionsVM updateGroupPermissionsVM, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling groupsUpdatePermissions(Async)");
        }

        return groupsUpdatePermissionsCall(id, updateGroupPermissionsVM, _callback);

    }

    /**
     * Update permissions
     * 
     * @param id  (required)
     * @param updateGroupPermissionsVM  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void groupsUpdatePermissions(String id, UpdateGroupPermissionsVM updateGroupPermissionsVM) throws ApiException {
        groupsUpdatePermissionsWithHttpInfo(id, updateGroupPermissionsVM);
    }

    /**
     * Update permissions
     * 
     * @param id  (required)
     * @param updateGroupPermissionsVM  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> groupsUpdatePermissionsWithHttpInfo(String id, UpdateGroupPermissionsVM updateGroupPermissionsVM) throws ApiException {
        okhttp3.Call localVarCall = groupsUpdatePermissionsValidateBeforeCall(id, updateGroupPermissionsVM, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update permissions (asynchronously)
     * 
     * @param id  (required)
     * @param updateGroupPermissionsVM  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Client Error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsUpdatePermissionsAsync(String id, UpdateGroupPermissionsVM updateGroupPermissionsVM, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsUpdatePermissionsValidateBeforeCall(id, updateGroupPermissionsVM, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
