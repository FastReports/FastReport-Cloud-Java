/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.fastreport.client;

import cloud.fastreport.ApiClient;
import cloud.fastreport.ApiException;
import cloud.fastreport.ApiResponse;
import cloud.fastreport.Pair;

import cloud.fastreport.model.AuditActionsVM;
import cloud.fastreport.model.BreadcrumbsVM;
import cloud.fastreport.model.CountVM;
import cloud.fastreport.model.ExportReportVM;
import cloud.fastreport.model.ExportVM;
import java.io.File;
import cloud.fastreport.model.FileIconVM;
import cloud.fastreport.model.FilePermissionsVM;
import cloud.fastreport.model.FileRenameVM;
import cloud.fastreport.model.FileSorting;
import cloud.fastreport.model.FileTagsUpdateVM;
import cloud.fastreport.model.FileVM;
import cloud.fastreport.model.FilesVM;
import cloud.fastreport.model.FolderCreateVM;
import cloud.fastreport.model.FolderIconVM;
import cloud.fastreport.model.FolderRenameVM;
import cloud.fastreport.model.FolderSizeVM;
import cloud.fastreport.model.FolderTagsUpdateVM;
import cloud.fastreport.model.PreviewReportVM;
import cloud.fastreport.model.ProblemDetails;
import cloud.fastreport.model.ReportCreateVM;
import cloud.fastreport.model.ReportFolderCreateVM;
import cloud.fastreport.model.ReportVM;
import cloud.fastreport.model.ReportsVM;
import cloud.fastreport.model.SelectedFilesVM;
import cloud.fastreport.model.UpdateFilePermissionsVM;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReportsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ReportsApi() {
    this(new ApiClient());
  }

  public ReportsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Delete all folders and files from recycle bin
   * User with a Delete RecycleBin permission can access this method.
   * @param subscriptionId subscription id (required)
   * @throws ApiException if fails to make API call
   */
  public void reportFolderAndFileClearRecycleBin(String subscriptionId) throws ApiException {
    reportFolderAndFileClearRecycleBinWithHttpInfo(subscriptionId);
  }

  /**
   * Delete all folders and files from recycle bin
   * User with a Delete RecycleBin permission can access this method.
   * @param subscriptionId subscription id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> reportFolderAndFileClearRecycleBinWithHttpInfo(String subscriptionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFolderAndFileClearRecycleBinRequestBuilder(subscriptionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFolderAndFileClearRecycleBin", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFolderAndFileClearRecycleBinRequestBuilder(String subscriptionId) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling reportFolderAndFileClearRecycleBin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/{subscriptionId}/ClearRecycleBin"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Copy folders and files to a specified folder
   * User with a Get permission for a files and Create permission for a destination folder can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @throws ApiException if fails to make API call
   */
  public void reportFolderAndFileCopyFiles(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    reportFolderAndFileCopyFilesWithHttpInfo(subscriptionId, selectedFilesVM);
  }

  /**
   * Copy folders and files to a specified folder
   * User with a Get permission for a files and Create permission for a destination folder can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> reportFolderAndFileCopyFilesWithHttpInfo(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFolderAndFileCopyFilesRequestBuilder(subscriptionId, selectedFilesVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFolderAndFileCopyFiles", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFolderAndFileCopyFilesRequestBuilder(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling reportFolderAndFileCopyFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/{subscriptionId}/CopyFiles"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(selectedFilesVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete folders and files
   * User with a Delete permission can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @throws ApiException if fails to make API call
   */
  public void reportFolderAndFileDeleteFiles(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    reportFolderAndFileDeleteFilesWithHttpInfo(subscriptionId, selectedFilesVM);
  }

  /**
   * Delete folders and files
   * User with a Delete permission can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> reportFolderAndFileDeleteFilesWithHttpInfo(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFolderAndFileDeleteFilesRequestBuilder(subscriptionId, selectedFilesVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFolderAndFileDeleteFiles", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFolderAndFileDeleteFilesRequestBuilder(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling reportFolderAndFileDeleteFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/{subscriptionId}/DeleteFiles"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(selectedFilesVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get count of files and folders what contains in a specified folder
   * User with a Get Count permission can access this method.
   * @param id folder id (required)
   * @param searchPattern string, that must be incuded in file or folder name to be counted &lt;br /&gt;              (leave undefined to count all files and folders) (optional)
   * @param useRegex set this to true if you want to use regular expression to search (optional, default to false)
   * @return CountVM
   * @throws ApiException if fails to make API call
   */
  public CountVM reportFolderAndFileGetCount(String id, String searchPattern, Boolean useRegex) throws ApiException {
    ApiResponse<CountVM> localVarResponse = reportFolderAndFileGetCountWithHttpInfo(id, searchPattern, useRegex);
    return localVarResponse.getData();
  }

  /**
   * Get count of files and folders what contains in a specified folder
   * User with a Get Count permission can access this method.
   * @param id folder id (required)
   * @param searchPattern string, that must be incuded in file or folder name to be counted &lt;br /&gt;              (leave undefined to count all files and folders) (optional)
   * @param useRegex set this to true if you want to use regular expression to search (optional, default to false)
   * @return ApiResponse&lt;CountVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CountVM> reportFolderAndFileGetCountWithHttpInfo(String id, String searchPattern, Boolean useRegex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFolderAndFileGetCountRequestBuilder(id, searchPattern, useRegex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFolderAndFileGetCount", localVarResponse);
        }
        return new ApiResponse<CountVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CountVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFolderAndFileGetCountRequestBuilder(String id, String searchPattern, Boolean useRegex) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportFolderAndFileGetCount");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}/CountFolderAndFiles"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "searchPattern";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchPattern", searchPattern));
    localVarQueryParameterBaseName = "useRegex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("useRegex", useRegex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all folders and files from specified folder
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @param skip number of folder and files, that have to be skipped (optional, default to 0)
   * @param take number of folder and files, that have to be returned (optional, default to 10)
   * @param orderBy indicates a field to sort by (optional)
   * @param desc indicates if sorting is descending (optional, default to false)
   * @param searchPattern  (optional, default to )
   * @param useRegex  (optional, default to false)
   * @return FilesVM
   * @throws ApiException if fails to make API call
   */
  public FilesVM reportFolderAndFileGetFoldersAndFiles(String id, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    ApiResponse<FilesVM> localVarResponse = reportFolderAndFileGetFoldersAndFilesWithHttpInfo(id, skip, take, orderBy, desc, searchPattern, useRegex);
    return localVarResponse.getData();
  }

  /**
   * Get all folders and files from specified folder
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @param skip number of folder and files, that have to be skipped (optional, default to 0)
   * @param take number of folder and files, that have to be returned (optional, default to 10)
   * @param orderBy indicates a field to sort by (optional)
   * @param desc indicates if sorting is descending (optional, default to false)
   * @param searchPattern  (optional, default to )
   * @param useRegex  (optional, default to false)
   * @return ApiResponse&lt;FilesVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FilesVM> reportFolderAndFileGetFoldersAndFilesWithHttpInfo(String id, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFolderAndFileGetFoldersAndFilesRequestBuilder(id, skip, take, orderBy, desc, searchPattern, useRegex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFolderAndFileGetFoldersAndFiles", localVarResponse);
        }
        return new ApiResponse<FilesVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FilesVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFolderAndFileGetFoldersAndFilesRequestBuilder(String id, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportFolderAndFileGetFoldersAndFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}/ListFolderAndFiles"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));
    localVarQueryParameterBaseName = "orderBy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));
    localVarQueryParameterBaseName = "desc";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("desc", desc));
    localVarQueryParameterBaseName = "searchPattern";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchPattern", searchPattern));
    localVarQueryParameterBaseName = "useRegex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("useRegex", useRegex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all folders and files from recycle bin
   * User with a Get DeletedFiles permission can access this method.
   * @param subscriptionId subscription id (required)
   * @param skip number of folder and files, that have to be skipped (optional, default to 0)
   * @param take number of folder and files, that have to be returned (optional, default to 10)
   * @param orderBy indicates a field to sort by (optional)
   * @param desc indicates if sorting is descending (optional, default to false)
   * @param searchPattern  (optional, default to )
   * @param useRegex  (optional, default to false)
   * @return FilesVM
   * @throws ApiException if fails to make API call
   */
  public FilesVM reportFolderAndFileGetRecycleBinFoldersAndFiles(String subscriptionId, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    ApiResponse<FilesVM> localVarResponse = reportFolderAndFileGetRecycleBinFoldersAndFilesWithHttpInfo(subscriptionId, skip, take, orderBy, desc, searchPattern, useRegex);
    return localVarResponse.getData();
  }

  /**
   * Get all folders and files from recycle bin
   * User with a Get DeletedFiles permission can access this method.
   * @param subscriptionId subscription id (required)
   * @param skip number of folder and files, that have to be skipped (optional, default to 0)
   * @param take number of folder and files, that have to be returned (optional, default to 10)
   * @param orderBy indicates a field to sort by (optional)
   * @param desc indicates if sorting is descending (optional, default to false)
   * @param searchPattern  (optional, default to )
   * @param useRegex  (optional, default to false)
   * @return ApiResponse&lt;FilesVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FilesVM> reportFolderAndFileGetRecycleBinFoldersAndFilesWithHttpInfo(String subscriptionId, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFolderAndFileGetRecycleBinFoldersAndFilesRequestBuilder(subscriptionId, skip, take, orderBy, desc, searchPattern, useRegex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFolderAndFileGetRecycleBinFoldersAndFiles", localVarResponse);
        }
        return new ApiResponse<FilesVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FilesVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFolderAndFileGetRecycleBinFoldersAndFilesRequestBuilder(String subscriptionId, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling reportFolderAndFileGetRecycleBinFoldersAndFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/{subscriptionId}/ListRecycleBinFolderAndFiles"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));
    localVarQueryParameterBaseName = "orderBy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));
    localVarQueryParameterBaseName = "desc";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("desc", desc));
    localVarQueryParameterBaseName = "searchPattern";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchPattern", searchPattern));
    localVarQueryParameterBaseName = "useRegex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("useRegex", useRegex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move folders and files to a specified folder
   * User with a Update Place permission for a files and Create permission for a destination folder can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @throws ApiException if fails to make API call
   */
  public void reportFolderAndFileMoveFiles(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    reportFolderAndFileMoveFilesWithHttpInfo(subscriptionId, selectedFilesVM);
  }

  /**
   * Move folders and files to a specified folder
   * User with a Update Place permission for a files and Create permission for a destination folder can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> reportFolderAndFileMoveFilesWithHttpInfo(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFolderAndFileMoveFilesRequestBuilder(subscriptionId, selectedFilesVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFolderAndFileMoveFiles", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFolderAndFileMoveFilesRequestBuilder(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling reportFolderAndFileMoveFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/{subscriptionId}/MoveFiles"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(selectedFilesVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move folders and files to bin
   * User with a Delete permission can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @throws ApiException if fails to make API call
   */
  public void reportFolderAndFileMoveFilesToBin(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    reportFolderAndFileMoveFilesToBinWithHttpInfo(subscriptionId, selectedFilesVM);
  }

  /**
   * Move folders and files to bin
   * User with a Delete permission can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> reportFolderAndFileMoveFilesToBinWithHttpInfo(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFolderAndFileMoveFilesToBinRequestBuilder(subscriptionId, selectedFilesVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFolderAndFileMoveFilesToBin", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFolderAndFileMoveFilesToBinRequestBuilder(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling reportFolderAndFileMoveFilesToBin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/{subscriptionId}/ToBin"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(selectedFilesVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Recover all folders and files from recycle bin
   * User with a Create RecycleBin permission can access this method.
   * @param subscriptionId subscription id (required)
   * @throws ApiException if fails to make API call
   */
  public void reportFolderAndFileRecoverAllFromRecycleBin(String subscriptionId) throws ApiException {
    reportFolderAndFileRecoverAllFromRecycleBinWithHttpInfo(subscriptionId);
  }

  /**
   * Recover all folders and files from recycle bin
   * User with a Create RecycleBin permission can access this method.
   * @param subscriptionId subscription id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> reportFolderAndFileRecoverAllFromRecycleBinWithHttpInfo(String subscriptionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFolderAndFileRecoverAllFromRecycleBinRequestBuilder(subscriptionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFolderAndFileRecoverAllFromRecycleBin", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFolderAndFileRecoverAllFromRecycleBinRequestBuilder(String subscriptionId) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling reportFolderAndFileRecoverAllFromRecycleBin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/{subscriptionId}/RecoverRecycleBin"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Recover folders and files from bin
   * User with a SubscriptionCreate permission can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @throws ApiException if fails to make API call
   */
  public void reportFolderAndFileRecoverFiles(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    reportFolderAndFileRecoverFilesWithHttpInfo(subscriptionId, selectedFilesVM);
  }

  /**
   * Recover folders and files from bin
   * User with a SubscriptionCreate permission can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> reportFolderAndFileRecoverFilesWithHttpInfo(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFolderAndFileRecoverFilesRequestBuilder(subscriptionId, selectedFilesVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFolderAndFileRecoverFiles", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFolderAndFileRecoverFilesRequestBuilder(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling reportFolderAndFileRecoverFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/{subscriptionId}/RecoverFiles"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(selectedFilesVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get specified folder, calculate it&#39;s size
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @return FolderSizeVM
   * @throws ApiException if fails to make API call
   */
  public FolderSizeVM reportFoldersCalculateFolderSize(String id) throws ApiException {
    ApiResponse<FolderSizeVM> localVarResponse = reportFoldersCalculateFolderSizeWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get specified folder, calculate it&#39;s size
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;FolderSizeVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FolderSizeVM> reportFoldersCalculateFolderSizeWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFoldersCalculateFolderSizeRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFoldersCalculateFolderSize", localVarResponse);
        }
        return new ApiResponse<FolderSizeVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FolderSizeVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFoldersCalculateFolderSizeRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportFoldersCalculateFolderSize");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}/size"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move folder to a specified folder
   * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
   * @param id moving folder id (required)
   * @param folderId destination folder id (required)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM reportFoldersCopyFolder(String id, String folderId) throws ApiException {
    ApiResponse<FileVM> localVarResponse = reportFoldersCopyFolderWithHttpInfo(id, folderId);
    return localVarResponse.getData();
  }

  /**
   * Move folder to a specified folder
   * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
   * @param id moving folder id (required)
   * @param folderId destination folder id (required)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> reportFoldersCopyFolderWithHttpInfo(String id, String folderId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFoldersCopyFolderRequestBuilder(id, folderId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFoldersCopyFolder", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFoldersCopyFolderRequestBuilder(String id, String folderId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportFoldersCopyFolder");
    }
    // verify the required parameter 'folderId' is set
    if (folderId == null) {
      throw new ApiException(400, "Missing the required parameter 'folderId' when calling reportFoldersCopyFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}/Copy/{folderId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{folderId}", ApiClient.urlEncode(folderId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete specified folder
   * User with a Delete Entity permission can access this method.
   * @param id folder id (required)
   * @throws ApiException if fails to make API call
   */
  public void reportFoldersDeleteFolder(String id) throws ApiException {
    reportFoldersDeleteFolderWithHttpInfo(id);
  }

  /**
   * Delete specified folder
   * User with a Delete Entity permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> reportFoldersDeleteFolderWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFoldersDeleteFolderRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFoldersDeleteFolder", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFoldersDeleteFolderRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportFoldersDeleteFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Export specified report folder to a specified format
   * User with Execute Export permission on report folder and  Create Entity on an export folder can access this method.
   * @param id report folder id (required)
   * @param exportReportVM export parameters (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM reportFoldersExport(String id, ExportReportVM exportReportVM) throws ApiException {
    ApiResponse<FileVM> localVarResponse = reportFoldersExportWithHttpInfo(id, exportReportVM);
    return localVarResponse.getData();
  }

  /**
   * Export specified report folder to a specified format
   * User with Execute Export permission on report folder and  Create Entity on an export folder can access this method.
   * @param id report folder id (required)
   * @param exportReportVM export parameters (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> reportFoldersExportWithHttpInfo(String id, ExportReportVM exportReportVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFoldersExportRequestBuilder(id, exportReportVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFoldersExport", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFoldersExportRequestBuilder(String id, ExportReportVM exportReportVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportFoldersExport");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}/Export"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(exportReportVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get specified folder breadcrumbs
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @return BreadcrumbsVM
   * @throws ApiException if fails to make API call
   */
  public BreadcrumbsVM reportFoldersGetBreadcrumbs(String id) throws ApiException {
    ApiResponse<BreadcrumbsVM> localVarResponse = reportFoldersGetBreadcrumbsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get specified folder breadcrumbs
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;BreadcrumbsVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BreadcrumbsVM> reportFoldersGetBreadcrumbsWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFoldersGetBreadcrumbsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFoldersGetBreadcrumbs", localVarResponse);
        }
        return new ApiResponse<BreadcrumbsVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BreadcrumbsVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFoldersGetBreadcrumbsRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportFoldersGetBreadcrumbs");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}/Breadcrumbs"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get specified folder
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM reportFoldersGetFolder(String id) throws ApiException {
    ApiResponse<FileVM> localVarResponse = reportFoldersGetFolderWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get specified folder
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> reportFoldersGetFolderWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFoldersGetFolderRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFoldersGetFolder", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFoldersGetFolderRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportFoldersGetFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all folders from specified folder
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @param skip number of files, that have to be skipped (optional, default to 0)
   * @param take number of files, that have to be returned (optional, default to 10)
   * @param orderBy  (optional)
   * @param desc  (optional, default to false)
   * @param searchPattern  (optional, default to )
   * @param useRegex  (optional, default to false)
   * @return FilesVM
   * @throws ApiException if fails to make API call
   */
  public FilesVM reportFoldersGetFolders(String id, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    ApiResponse<FilesVM> localVarResponse = reportFoldersGetFoldersWithHttpInfo(id, skip, take, orderBy, desc, searchPattern, useRegex);
    return localVarResponse.getData();
  }

  /**
   * Get all folders from specified folder
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @param skip number of files, that have to be skipped (optional, default to 0)
   * @param take number of files, that have to be returned (optional, default to 10)
   * @param orderBy  (optional)
   * @param desc  (optional, default to false)
   * @param searchPattern  (optional, default to )
   * @param useRegex  (optional, default to false)
   * @return ApiResponse&lt;FilesVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FilesVM> reportFoldersGetFoldersWithHttpInfo(String id, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFoldersGetFoldersRequestBuilder(id, skip, take, orderBy, desc, searchPattern, useRegex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFoldersGetFolders", localVarResponse);
        }
        return new ApiResponse<FilesVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FilesVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFoldersGetFoldersRequestBuilder(String id, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportFoldersGetFolders");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}/ListFolders"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));
    localVarQueryParameterBaseName = "orderBy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));
    localVarQueryParameterBaseName = "desc";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("desc", desc));
    localVarQueryParameterBaseName = "searchPattern";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchPattern", searchPattern));
    localVarQueryParameterBaseName = "useRegex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("useRegex", useRegex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get count of folders what contains in a specified folder
   * User with a Get Count permission can access this method.
   * @param id folder id (required)
   * @return CountVM
   * @throws ApiException if fails to make API call
   */
  public CountVM reportFoldersGetFoldersCount(String id) throws ApiException {
    ApiResponse<CountVM> localVarResponse = reportFoldersGetFoldersCountWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get count of folders what contains in a specified folder
   * User with a Get Count permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;CountVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CountVM> reportFoldersGetFoldersCountWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFoldersGetFoldersCountRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFoldersGetFoldersCount", localVarResponse);
        }
        return new ApiResponse<CountVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CountVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFoldersGetFoldersCountRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportFoldersGetFoldersCount");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}/CountFolders"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get specified folder
   * User with a Get Entity permission can access this method.
   * @param name folder name (optional)
   * @param subscriptionId subscriptionId (optional)
   * @param parentId parent folder id (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM reportFoldersGetOrCreate(String name, String subscriptionId, String parentId) throws ApiException {
    ApiResponse<FileVM> localVarResponse = reportFoldersGetOrCreateWithHttpInfo(name, subscriptionId, parentId);
    return localVarResponse.getData();
  }

  /**
   * Get specified folder
   * User with a Get Entity permission can access this method.
   * @param name folder name (optional)
   * @param subscriptionId subscriptionId (optional)
   * @param parentId parent folder id (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> reportFoldersGetOrCreateWithHttpInfo(String name, String subscriptionId, String parentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFoldersGetOrCreateRequestBuilder(name, subscriptionId, parentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFoldersGetOrCreate", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFoldersGetOrCreateRequestBuilder(String name, String subscriptionId, String parentId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/getOrCreate";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParameterBaseName = "subscriptionId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subscriptionId", subscriptionId));
    localVarQueryParameterBaseName = "parentId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parentId", parentId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all folder permissions
   * 
   * @param id  (required)
   * @return FilePermissionsVM
   * @throws ApiException if fails to make API call
   */
  public FilePermissionsVM reportFoldersGetPermissions(String id) throws ApiException {
    ApiResponse<FilePermissionsVM> localVarResponse = reportFoldersGetPermissionsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get all folder permissions
   * 
   * @param id  (required)
   * @return ApiResponse&lt;FilePermissionsVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FilePermissionsVM> reportFoldersGetPermissionsWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFoldersGetPermissionsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFoldersGetPermissions", localVarResponse);
        }
        return new ApiResponse<FilePermissionsVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FilePermissionsVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFoldersGetPermissionsRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportFoldersGetPermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}/permissions"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get user&#39;s root folder (without parents)
   * &gt; Breakchange. Now user model doesn&#39;t contain a root folders.  This method can return error 400 and 404 when subscription is not found.
   * @param subscriptionId  (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM reportFoldersGetRootFolder(String subscriptionId) throws ApiException {
    ApiResponse<FileVM> localVarResponse = reportFoldersGetRootFolderWithHttpInfo(subscriptionId);
    return localVarResponse.getData();
  }

  /**
   * Get user&#39;s root folder (without parents)
   * &gt; Breakchange. Now user model doesn&#39;t contain a root folders.  This method can return error 400 and 404 when subscription is not found.
   * @param subscriptionId  (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> reportFoldersGetRootFolderWithHttpInfo(String subscriptionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFoldersGetRootFolderRequestBuilder(subscriptionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFoldersGetRootFolder", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFoldersGetRootFolderRequestBuilder(String subscriptionId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Root";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "subscriptionId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subscriptionId", subscriptionId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move folder to a specified folder
   * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
   * @param id moving folder id (required)
   * @param folderId destination folder id (required)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM reportFoldersMoveFolder(String id, String folderId) throws ApiException {
    ApiResponse<FileVM> localVarResponse = reportFoldersMoveFolderWithHttpInfo(id, folderId);
    return localVarResponse.getData();
  }

  /**
   * Move folder to a specified folder
   * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
   * @param id moving folder id (required)
   * @param folderId destination folder id (required)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> reportFoldersMoveFolderWithHttpInfo(String id, String folderId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFoldersMoveFolderRequestBuilder(id, folderId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFoldersMoveFolder", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFoldersMoveFolderRequestBuilder(String id, String folderId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportFoldersMoveFolder");
    }
    // verify the required parameter 'folderId' is set
    if (folderId == null) {
      throw new ApiException(400, "Missing the required parameter 'folderId' when calling reportFoldersMoveFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}/Move/{folderId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{folderId}", ApiClient.urlEncode(folderId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move specified folder to recycle bin
   * User with a Delete Entity permission can access this method.
   * @param id folder id (required)
   * @throws ApiException if fails to make API call
   */
  public void reportFoldersMoveFolderToBin(String id) throws ApiException {
    reportFoldersMoveFolderToBinWithHttpInfo(id);
  }

  /**
   * Move specified folder to recycle bin
   * User with a Delete Entity permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> reportFoldersMoveFolderToBinWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFoldersMoveFolderToBinRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFoldersMoveFolderToBin", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFoldersMoveFolderToBinRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportFoldersMoveFolderToBin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}/ToBin"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create folder
   * User with a Create Entity permisison can access this method.
   * @param id Identifier of parent folder id (required)
   * @param reportFolderCreateVM create VM (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM reportFoldersPostFolder(String id, ReportFolderCreateVM reportFolderCreateVM) throws ApiException {
    ApiResponse<FileVM> localVarResponse = reportFoldersPostFolderWithHttpInfo(id, reportFolderCreateVM);
    return localVarResponse.getData();
  }

  /**
   * Create folder
   * User with a Create Entity permisison can access this method.
   * @param id Identifier of parent folder id (required)
   * @param reportFolderCreateVM create VM (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> reportFoldersPostFolderWithHttpInfo(String id, ReportFolderCreateVM reportFolderCreateVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFoldersPostFolderRequestBuilder(id, reportFolderCreateVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFoldersPostFolder", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFoldersPostFolderRequestBuilder(String id, ReportFolderCreateVM reportFolderCreateVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportFoldersPostFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}/Folder"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reportFolderCreateVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Recover specified folder
   * User with a Delete Entity permission can access this method.
   * @param id folder id (required)
   * @param recoveryPath  (optional)
   * @throws ApiException if fails to make API call
   */
  public void reportFoldersRecoverFolder(String id, String recoveryPath) throws ApiException {
    reportFoldersRecoverFolderWithHttpInfo(id, recoveryPath);
  }

  /**
   * Recover specified folder
   * User with a Delete Entity permission can access this method.
   * @param id folder id (required)
   * @param recoveryPath  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> reportFoldersRecoverFolderWithHttpInfo(String id, String recoveryPath) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFoldersRecoverFolderRequestBuilder(id, recoveryPath);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFoldersRecoverFolder", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFoldersRecoverFolderRequestBuilder(String id, String recoveryPath) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportFoldersRecoverFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}/Recover"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "recoveryPath";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("recoveryPath", recoveryPath));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Rename a folder
   * User with a Update Name permision can access this method.
   * @param id  (required)
   * @param folderRenameVM  (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM reportFoldersRenameFolder(String id, FolderRenameVM folderRenameVM) throws ApiException {
    ApiResponse<FileVM> localVarResponse = reportFoldersRenameFolderWithHttpInfo(id, folderRenameVM);
    return localVarResponse.getData();
  }

  /**
   * Rename a folder
   * User with a Update Name permision can access this method.
   * @param id  (required)
   * @param folderRenameVM  (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> reportFoldersRenameFolderWithHttpInfo(String id, FolderRenameVM folderRenameVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFoldersRenameFolderRequestBuilder(id, folderRenameVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFoldersRenameFolder", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFoldersRenameFolderRequestBuilder(String id, FolderRenameVM folderRenameVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportFoldersRenameFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}/Rename"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(folderRenameVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a folder&#39;s icon
   * User with a Update Icon permission can access this method.
   * @param id Identifier of folder (required)
   * @param folderIconVM Update icon model (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM reportFoldersUpdateIcon(String id, FolderIconVM folderIconVM) throws ApiException {
    ApiResponse<FileVM> localVarResponse = reportFoldersUpdateIconWithHttpInfo(id, folderIconVM);
    return localVarResponse.getData();
  }

  /**
   * Update a folder&#39;s icon
   * User with a Update Icon permission can access this method.
   * @param id Identifier of folder (required)
   * @param folderIconVM Update icon model (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> reportFoldersUpdateIconWithHttpInfo(String id, FolderIconVM folderIconVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFoldersUpdateIconRequestBuilder(id, folderIconVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFoldersUpdateIcon", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFoldersUpdateIconRequestBuilder(String id, FolderIconVM folderIconVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportFoldersUpdateIcon");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}/Icon"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(folderIconVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update permissions
   * 
   * @param id  (required)
   * @param updateFilePermissionsVM  (optional)
   * @throws ApiException if fails to make API call
   */
  public void reportFoldersUpdatePermissions(String id, UpdateFilePermissionsVM updateFilePermissionsVM) throws ApiException {
    reportFoldersUpdatePermissionsWithHttpInfo(id, updateFilePermissionsVM);
  }

  /**
   * Update permissions
   * 
   * @param id  (required)
   * @param updateFilePermissionsVM  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> reportFoldersUpdatePermissionsWithHttpInfo(String id, UpdateFilePermissionsVM updateFilePermissionsVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFoldersUpdatePermissionsRequestBuilder(id, updateFilePermissionsVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFoldersUpdatePermissions", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFoldersUpdatePermissionsRequestBuilder(String id, UpdateFilePermissionsVM updateFilePermissionsVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportFoldersUpdatePermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/{id}/permissions"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateFilePermissionsVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update tags
   * User with a Update Tags permission can access this method.
   * @param id  (required)
   * @param folderTagsUpdateVM  (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM reportFoldersUpdateTags(String id, FolderTagsUpdateVM folderTagsUpdateVM) throws ApiException {
    ApiResponse<FileVM> localVarResponse = reportFoldersUpdateTagsWithHttpInfo(id, folderTagsUpdateVM);
    return localVarResponse.getData();
  }

  /**
   * Update tags
   * User with a Update Tags permission can access this method.
   * @param id  (required)
   * @param folderTagsUpdateVM  (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> reportFoldersUpdateTagsWithHttpInfo(String id, FolderTagsUpdateVM folderTagsUpdateVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportFoldersUpdateTagsRequestBuilder(id, folderTagsUpdateVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportFoldersUpdateTags", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportFoldersUpdateTagsRequestBuilder(String id, FolderTagsUpdateVM folderTagsUpdateVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportFoldersUpdateTags");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}/UpdateTags"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(folderTagsUpdateVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Copy file to a specified folder
   * 
   * @param id file id (required)
   * @param folderId folder id (required)
   * @return ReportVM
   * @throws ApiException if fails to make API call
   */
  public ReportVM reportsCopyFile(String id, String folderId) throws ApiException {
    ApiResponse<ReportVM> localVarResponse = reportsCopyFileWithHttpInfo(id, folderId);
    return localVarResponse.getData();
  }

  /**
   * Copy file to a specified folder
   * 
   * @param id file id (required)
   * @param folderId folder id (required)
   * @return ApiResponse&lt;ReportVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ReportVM> reportsCopyFileWithHttpInfo(String id, String folderId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportsCopyFileRequestBuilder(id, folderId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportsCopyFile", localVarResponse);
        }
        return new ApiResponse<ReportVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReportVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportsCopyFileRequestBuilder(String id, String folderId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportsCopyFile");
    }
    // verify the required parameter 'folderId' is set
    if (folderId == null) {
      throw new ApiException(400, "Missing the required parameter 'folderId' when calling reportsCopyFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/File/{id}/Copy/{folderId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{folderId}", ApiClient.urlEncode(folderId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete specified file
   * User with Delete permission can access the method.
   * @param id file id (required)
   * @throws ApiException if fails to make API call
   */
  public void reportsDeleteFile(String id) throws ApiException {
    reportsDeleteFileWithHttpInfo(id);
  }

  /**
   * Delete specified file
   * User with Delete permission can access the method.
   * @param id file id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> reportsDeleteFileWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportsDeleteFileRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportsDeleteFile", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportsDeleteFileRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportsDeleteFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/File/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Export specified report to a specified format
   * User with Execute Export permission on prepared report and  Create Entity on an export folder can access this method.
   * @param id report id (required)
   * @param exportReportVM export parameters (optional)
   * @return ExportVM
   * @throws ApiException if fails to make API call
   */
  public ExportVM reportsExport(String id, ExportReportVM exportReportVM) throws ApiException {
    ApiResponse<ExportVM> localVarResponse = reportsExportWithHttpInfo(id, exportReportVM);
    return localVarResponse.getData();
  }

  /**
   * Export specified report to a specified format
   * User with Execute Export permission on prepared report and  Create Entity on an export folder can access this method.
   * @param id report id (required)
   * @param exportReportVM export parameters (optional)
   * @return ApiResponse&lt;ExportVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExportVM> reportsExportWithHttpInfo(String id, ExportReportVM exportReportVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportsExportRequestBuilder(id, exportReportVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportsExport", localVarResponse);
        }
        return new ApiResponse<ExportVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExportVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportsExportRequestBuilder(String id, ExportReportVM exportReportVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportsExport");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/File/{id}/Export"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(exportReportVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get specified file
   * User with Get Entity permission can access this method.
   * @param id file id (required)
   * @return ReportVM
   * @throws ApiException if fails to make API call
   */
  public ReportVM reportsGetFile(String id) throws ApiException {
    ApiResponse<ReportVM> localVarResponse = reportsGetFileWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get specified file
   * User with Get Entity permission can access this method.
   * @param id file id (required)
   * @return ApiResponse&lt;ReportVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ReportVM> reportsGetFileWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportsGetFileRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportsGetFile", localVarResponse);
        }
        return new ApiResponse<ReportVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReportVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportsGetFileRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportsGetFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/File/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns list of actions, performed on this file
   * 
   * @param id  (required)
   * @param skip  (optional, default to 0)
   * @param take  (optional, default to 10)
   * @return AuditActionsVM
   * @throws ApiException if fails to make API call
   */
  public AuditActionsVM reportsGetFileHistory(String id, Integer skip, Integer take) throws ApiException {
    ApiResponse<AuditActionsVM> localVarResponse = reportsGetFileHistoryWithHttpInfo(id, skip, take);
    return localVarResponse.getData();
  }

  /**
   * Returns list of actions, performed on this file
   * 
   * @param id  (required)
   * @param skip  (optional, default to 0)
   * @param take  (optional, default to 10)
   * @return ApiResponse&lt;AuditActionsVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AuditActionsVM> reportsGetFileHistoryWithHttpInfo(String id, Integer skip, Integer take) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportsGetFileHistoryRequestBuilder(id, skip, take);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportsGetFileHistory", localVarResponse);
        }
        return new ApiResponse<AuditActionsVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AuditActionsVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportsGetFileHistoryRequestBuilder(String id, Integer skip, Integer take) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportsGetFileHistory");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/File/{id}/History"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get count of files what contains in a specified folder
   * User with Get Count permission can access this method.
   * @param id folder id (required)
   * @return CountVM
   * @throws ApiException if fails to make API call
   */
  public CountVM reportsGetFilesCount(String id) throws ApiException {
    ApiResponse<CountVM> localVarResponse = reportsGetFilesCountWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get count of files what contains in a specified folder
   * User with Get Count permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;CountVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CountVM> reportsGetFilesCountWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportsGetFilesCountRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportsGetFilesCount", localVarResponse);
        }
        return new ApiResponse<CountVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CountVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportsGetFilesCountRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportsGetFilesCount");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}/CountFiles"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all files from specified folder. &lt;br /&gt;  User with Get Entity permission can access this method. &lt;br /&gt;  The method will returns minimal infomration about the file: &lt;br /&gt;  id, name, size, editedTime, createdTime, tags, status, statusReason.
   * 
   * @param id folder id (required)
   * @param skip number of files, that have to be skipped (optional, default to 0)
   * @param take number of files, that have to be returned (optional, default to 10)
   * @param searchPattern  (optional)
   * @param orderBy  (optional)
   * @param desc  (optional, default to false)
   * @param useRegex  (optional, default to false)
   * @return ReportsVM
   * @throws ApiException if fails to make API call
   */
  public ReportsVM reportsGetFilesList(String id, Integer skip, Integer take, String searchPattern, FileSorting orderBy, Boolean desc, Boolean useRegex) throws ApiException {
    ApiResponse<ReportsVM> localVarResponse = reportsGetFilesListWithHttpInfo(id, skip, take, searchPattern, orderBy, desc, useRegex);
    return localVarResponse.getData();
  }

  /**
   * Get all files from specified folder. &lt;br /&gt;  User with Get Entity permission can access this method. &lt;br /&gt;  The method will returns minimal infomration about the file: &lt;br /&gt;  id, name, size, editedTime, createdTime, tags, status, statusReason.
   * 
   * @param id folder id (required)
   * @param skip number of files, that have to be skipped (optional, default to 0)
   * @param take number of files, that have to be returned (optional, default to 10)
   * @param searchPattern  (optional)
   * @param orderBy  (optional)
   * @param desc  (optional, default to false)
   * @param useRegex  (optional, default to false)
   * @return ApiResponse&lt;ReportsVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ReportsVM> reportsGetFilesListWithHttpInfo(String id, Integer skip, Integer take, String searchPattern, FileSorting orderBy, Boolean desc, Boolean useRegex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportsGetFilesListRequestBuilder(id, skip, take, searchPattern, orderBy, desc, useRegex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportsGetFilesList", localVarResponse);
        }
        return new ApiResponse<ReportsVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReportsVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportsGetFilesListRequestBuilder(String id, Integer skip, Integer take, String searchPattern, FileSorting orderBy, Boolean desc, Boolean useRegex) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportsGetFilesList");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}/ListFiles"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));
    localVarQueryParameterBaseName = "searchPattern";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchPattern", searchPattern));
    localVarQueryParameterBaseName = "orderBy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));
    localVarQueryParameterBaseName = "desc";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("desc", desc));
    localVarQueryParameterBaseName = "useRegex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("useRegex", useRegex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all file permissions
   * 
   * @param id  (required)
   * @return FilePermissionsVM
   * @throws ApiException if fails to make API call
   */
  public FilePermissionsVM reportsGetPermissions(String id) throws ApiException {
    ApiResponse<FilePermissionsVM> localVarResponse = reportsGetPermissionsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get all file permissions
   * 
   * @param id  (required)
   * @return ApiResponse&lt;FilePermissionsVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FilePermissionsVM> reportsGetPermissionsWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportsGetPermissionsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportsGetPermissions", localVarResponse);
        }
        return new ApiResponse<FilePermissionsVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FilePermissionsVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportsGetPermissionsRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportsGetPermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/File/{id}/permissions"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move file to a specified folder
   * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
   * @param id file id (required)
   * @param folderId folder id (required)
   * @return ReportVM
   * @throws ApiException if fails to make API call
   */
  public ReportVM reportsMoveFile(String id, String folderId) throws ApiException {
    ApiResponse<ReportVM> localVarResponse = reportsMoveFileWithHttpInfo(id, folderId);
    return localVarResponse.getData();
  }

  /**
   * Move file to a specified folder
   * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
   * @param id file id (required)
   * @param folderId folder id (required)
   * @return ApiResponse&lt;ReportVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ReportVM> reportsMoveFileWithHttpInfo(String id, String folderId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportsMoveFileRequestBuilder(id, folderId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportsMoveFile", localVarResponse);
        }
        return new ApiResponse<ReportVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReportVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportsMoveFileRequestBuilder(String id, String folderId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportsMoveFile");
    }
    // verify the required parameter 'folderId' is set
    if (folderId == null) {
      throw new ApiException(400, "Missing the required parameter 'folderId' when calling reportsMoveFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/File/{id}/Move/{folderId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{folderId}", ApiClient.urlEncode(folderId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move specified file to recycle bin
   * User with Delete permission can access the method.
   * @param id file id (required)
   * @throws ApiException if fails to make API call
   */
  public void reportsMoveFileToBin(String id) throws ApiException {
    reportsMoveFileToBinWithHttpInfo(id);
  }

  /**
   * Move specified file to recycle bin
   * User with Delete permission can access the method.
   * @param id file id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> reportsMoveFileToBinWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportsMoveFileToBinRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportsMoveFileToBin", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportsMoveFileToBinRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportsMoveFileToBin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/File/{id}/ToBin"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Recover specified file from bin
   * User with Delete permission can access the method.
   * @param id file id (required)
   * @param recoveryPath  (optional)
   * @throws ApiException if fails to make API call
   */
  public void reportsRecoverFile(String id, String recoveryPath) throws ApiException {
    reportsRecoverFileWithHttpInfo(id, recoveryPath);
  }

  /**
   * Recover specified file from bin
   * User with Delete permission can access the method.
   * @param id file id (required)
   * @param recoveryPath  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> reportsRecoverFileWithHttpInfo(String id, String recoveryPath) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportsRecoverFileRequestBuilder(id, recoveryPath);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportsRecoverFile", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportsRecoverFileRequestBuilder(String id, String recoveryPath) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportsRecoverFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/File/{id}/Recover"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "recoveryPath";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("recoveryPath", recoveryPath));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Rename a file
   * User with Update Name permission can access this method.
   * @param id  (required)
   * @param fileRenameVM  (optional)
   * @return ReportVM
   * @throws ApiException if fails to make API call
   */
  public ReportVM reportsRenameFile(String id, FileRenameVM fileRenameVM) throws ApiException {
    ApiResponse<ReportVM> localVarResponse = reportsRenameFileWithHttpInfo(id, fileRenameVM);
    return localVarResponse.getData();
  }

  /**
   * Rename a file
   * User with Update Name permission can access this method.
   * @param id  (required)
   * @param fileRenameVM  (optional)
   * @return ApiResponse&lt;ReportVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ReportVM> reportsRenameFileWithHttpInfo(String id, FileRenameVM fileRenameVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportsRenameFileRequestBuilder(id, fileRenameVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportsRenameFile", localVarResponse);
        }
        return new ApiResponse<ReportVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReportVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportsRenameFileRequestBuilder(String id, FileRenameVM fileRenameVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportsRenameFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/File/{id}/Rename"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(fileRenameVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Make preview for the report.  Generate a new or return exist prepared svg files.  If template was changed will be returned a new.  Pass the &#x60;&#x60; parameter to check prepared timestamp
   * 
   * @param id template id (required)
   * @param previewReportVM Model with parameters (optional)
   * @return ExportVM
   * @throws ApiException if fails to make API call
   */
  public ExportVM reportsStaticPreview(String id, PreviewReportVM previewReportVM) throws ApiException {
    ApiResponse<ExportVM> localVarResponse = reportsStaticPreviewWithHttpInfo(id, previewReportVM);
    return localVarResponse.getData();
  }

  /**
   * Make preview for the report.  Generate a new or return exist prepared svg files.  If template was changed will be returned a new.  Pass the &#x60;&#x60; parameter to check prepared timestamp
   * 
   * @param id template id (required)
   * @param previewReportVM Model with parameters (optional)
   * @return ApiResponse&lt;ExportVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExportVM> reportsStaticPreviewWithHttpInfo(String id, PreviewReportVM previewReportVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportsStaticPreviewRequestBuilder(id, previewReportVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportsStaticPreview", localVarResponse);
        }
        return new ApiResponse<ExportVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExportVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportsStaticPreviewRequestBuilder(String id, PreviewReportVM previewReportVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportsStaticPreview");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/File/{id}/StaticPreview"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(previewReportVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a files&#39;s icon
   * User with Update Icon permission can access this method.
   * @param id  (required)
   * @param fileIconVM  (optional)
   * @return ReportVM
   * @throws ApiException if fails to make API call
   */
  public ReportVM reportsUpdateIcon(String id, FileIconVM fileIconVM) throws ApiException {
    ApiResponse<ReportVM> localVarResponse = reportsUpdateIconWithHttpInfo(id, fileIconVM);
    return localVarResponse.getData();
  }

  /**
   * Update a files&#39;s icon
   * User with Update Icon permission can access this method.
   * @param id  (required)
   * @param fileIconVM  (optional)
   * @return ApiResponse&lt;ReportVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ReportVM> reportsUpdateIconWithHttpInfo(String id, FileIconVM fileIconVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportsUpdateIconRequestBuilder(id, fileIconVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportsUpdateIcon", localVarResponse);
        }
        return new ApiResponse<ReportVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReportVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportsUpdateIconRequestBuilder(String id, FileIconVM fileIconVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportsUpdateIcon");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/File/{id}/Icon"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(fileIconVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update permissions
   * 
   * @param id  (required)
   * @param updateFilePermissionsVM  (optional)
   * @throws ApiException if fails to make API call
   */
  public void reportsUpdatePermissions(String id, UpdateFilePermissionsVM updateFilePermissionsVM) throws ApiException {
    reportsUpdatePermissionsWithHttpInfo(id, updateFilePermissionsVM);
  }

  /**
   * Update permissions
   * 
   * @param id  (required)
   * @param updateFilePermissionsVM  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> reportsUpdatePermissionsWithHttpInfo(String id, UpdateFilePermissionsVM updateFilePermissionsVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportsUpdatePermissionsRequestBuilder(id, updateFilePermissionsVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportsUpdatePermissions", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportsUpdatePermissionsRequestBuilder(String id, UpdateFilePermissionsVM updateFilePermissionsVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportsUpdatePermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/File/{id}/permissions"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateFilePermissionsVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update tags
   * User with Update Tags permission can access this method.
   * @param id  (required)
   * @param fileTagsUpdateVM  (optional)
   * @return ReportVM
   * @throws ApiException if fails to make API call
   */
  public ReportVM reportsUpdateTags(String id, FileTagsUpdateVM fileTagsUpdateVM) throws ApiException {
    ApiResponse<ReportVM> localVarResponse = reportsUpdateTagsWithHttpInfo(id, fileTagsUpdateVM);
    return localVarResponse.getData();
  }

  /**
   * Update tags
   * User with Update Tags permission can access this method.
   * @param id  (required)
   * @param fileTagsUpdateVM  (optional)
   * @return ApiResponse&lt;ReportVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ReportVM> reportsUpdateTagsWithHttpInfo(String id, FileTagsUpdateVM fileTagsUpdateVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportsUpdateTagsRequestBuilder(id, fileTagsUpdateVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportsUpdateTags", localVarResponse);
        }
        return new ApiResponse<ReportVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReportVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportsUpdateTagsRequestBuilder(String id, FileTagsUpdateVM fileTagsUpdateVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportsUpdateTags");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/File/{id}/UpdateTags"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(fileTagsUpdateVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Upload a file to the specified folder. The method is deprecated, use the UploadFileV2 method instead!
   * User with Create Entity permission can access this method.
   * @param id Identifier of folder (required)
   * @param reportCreateVM file&#39;s view model (optional)
   * @return ReportVM
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ReportVM reportsUploadFile(String id, ReportCreateVM reportCreateVM) throws ApiException {
    ApiResponse<ReportVM> localVarResponse = reportsUploadFileWithHttpInfo(id, reportCreateVM);
    return localVarResponse.getData();
  }

  /**
   * Upload a file to the specified folder. The method is deprecated, use the UploadFileV2 method instead!
   * User with Create Entity permission can access this method.
   * @param id Identifier of folder (required)
   * @param reportCreateVM file&#39;s view model (optional)
   * @return ApiResponse&lt;ReportVM&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<ReportVM> reportsUploadFileWithHttpInfo(String id, ReportCreateVM reportCreateVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportsUploadFileRequestBuilder(id, reportCreateVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportsUploadFile", localVarResponse);
        }
        return new ApiResponse<ReportVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReportVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportsUploadFileRequestBuilder(String id, ReportCreateVM reportCreateVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportsUploadFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Reports/Folder/{id}/File"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(reportCreateVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Alternative api for upload a file to the specified folder!
   * User with Create Entity permission can access this method.
   * @param id Identifier of folder (required)
   * @param fileContent  (required)
   * @param templateId  (optional)
   * @param tags  (optional
   * @param icon  (optional)
   * @return ReportVM
   * @throws ApiException if fails to make API call
   */
  public ReportVM reportsUploadFileV2(String id, File fileContent, String templateId, List<String> tags, File icon) throws ApiException {
    ApiResponse<ReportVM> localVarResponse = reportsUploadFileV2WithHttpInfo(id, fileContent, templateId, tags, icon);
    return localVarResponse.getData();
  }

  /**
   * Alternative api for upload a file to the specified folder!
   * User with Create Entity permission can access this method.
   * @param id Identifier of folder (required)
   * @param fileContent  (required)
   * @param templateId  (optional)
   * @param tags  (optional
   * @param icon  (optional)
   * @return ApiResponse&lt;ReportVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ReportVM> reportsUploadFileV2WithHttpInfo(String id, File fileContent, String templateId, List<String> tags, File icon) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = reportsUploadFileV2RequestBuilder(id, fileContent, templateId, tags, icon);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("reportsUploadFileV2", localVarResponse);
        }
        return new ApiResponse<ReportVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReportVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder reportsUploadFileV2RequestBuilder(String id, File fileContent, String templateId, List<String> tags, File icon) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling reportsUploadFileV2");
    }
    // verify the required parameter 'fileContent' is set
    if (fileContent == null) {
      throw new ApiException(400, "Missing the required parameter 'fileContent' when calling reportsUploadFileV2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v2/Reports/Folder/{id}/File"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    MultipartEntityBuilder multiPartBuilder = MultipartEntityBuilder.create();
    boolean hasFiles = false;
    multiPartBuilder.addTextBody("TemplateId", templateId.toString());
    for (int i=0; i < tags.size(); i++) {
        multiPartBuilder.addTextBody("Tags", tags.get(i).toString());
    }
    multiPartBuilder.addBinaryBody("Icon", icon);
    hasFiles = true;
    multiPartBuilder.addBinaryBody("FileContent", fileContent);
    hasFiles = true;
    HttpEntity entity = multiPartBuilder.build();
    HttpRequest.BodyPublisher formDataPublisher;
    if (hasFiles) {
        Pipe pipe;
        try {
            pipe = Pipe.open();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        new Thread(() -> {
            try (OutputStream outputStream = Channels.newOutputStream(pipe.sink())) {
                entity.writeTo(outputStream);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }).start();
        formDataPublisher = HttpRequest.BodyPublishers.ofInputStream(() -> Channels.newInputStream(pipe.source()));
    } else {
        ByteArrayOutputStream formOutputStream = new ByteArrayOutputStream();
        try {
            entity.writeTo(formOutputStream);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        formDataPublisher = HttpRequest.BodyPublishers
            .ofInputStream(() -> new ByteArrayInputStream(formOutputStream.toByteArray()));
    }
    localVarRequestBuilder
        .header("Content-Type", entity.getContentType().getValue())
        .method("POST", formDataPublisher);
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
