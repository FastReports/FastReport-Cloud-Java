/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.client;

import cloud.fastreport.ApiCallback;
import cloud.fastreport.ApiClient;
import cloud.fastreport.ApiException;
import cloud.fastreport.ApiResponse;
import cloud.fastreport.Configuration;
import cloud.fastreport.Pair;
import cloud.fastreport.ProgressRequestBody;
import cloud.fastreport.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloud.fastreport.model.CreateSubscriptionInviteVM;
import cloud.fastreport.model.ProblemDetails;
import cloud.fastreport.model.SubscriptionInviteVM;
import cloud.fastreport.model.SubscriptionInvitesVM;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubscriptionInvitesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SubscriptionInvitesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionInvitesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for subscriptionInvitesAcceptInvite
     * @param subscriptionId Idenitifier of subscription (required)
     * @param accessToken access token of the subscription (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User already in subscription </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Succesfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or user is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionInvitesAcceptInviteCall(String subscriptionId, String accessToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/manage/v1/Subscriptions/{subscriptionId}/invite/{accessToken}/accept"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "accessToken" + "}", localVarApiClient.escapeString(accessToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionInvitesAcceptInviteValidateBeforeCall(String subscriptionId, String accessToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionInvitesAcceptInvite(Async)");
        }

        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling subscriptionInvitesAcceptInvite(Async)");
        }

        return subscriptionInvitesAcceptInviteCall(subscriptionId, accessToken, _callback);

    }

    /**
     * Add a user to the subscription using invite,  the added users will be displayed in the list of users of the subscription,  and these users will also have an active subscription.
     * 
     * @param subscriptionId Idenitifier of subscription (required)
     * @param accessToken access token of the subscription (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User already in subscription </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Succesfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or user is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public void subscriptionInvitesAcceptInvite(String subscriptionId, String accessToken) throws ApiException {
        subscriptionInvitesAcceptInviteWithHttpInfo(subscriptionId, accessToken);
    }

    /**
     * Add a user to the subscription using invite,  the added users will be displayed in the list of users of the subscription,  and these users will also have an active subscription.
     * 
     * @param subscriptionId Idenitifier of subscription (required)
     * @param accessToken access token of the subscription (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User already in subscription </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Succesfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or user is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscriptionInvitesAcceptInviteWithHttpInfo(String subscriptionId, String accessToken) throws ApiException {
        okhttp3.Call localVarCall = subscriptionInvitesAcceptInviteValidateBeforeCall(subscriptionId, accessToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a user to the subscription using invite,  the added users will be displayed in the list of users of the subscription,  and these users will also have an active subscription. (asynchronously)
     * 
     * @param subscriptionId Idenitifier of subscription (required)
     * @param accessToken access token of the subscription (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User already in subscription </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Succesfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or user is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionInvitesAcceptInviteAsync(String subscriptionId, String accessToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionInvitesAcceptInviteValidateBeforeCall(subscriptionId, accessToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionInvitesCreateInvite
     * @param subscriptionId id (required)
     * @param createSubscriptionInviteVM create VM (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is wrong </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> there is no subscription with such id </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> exception caught </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionInvitesCreateInviteCall(String subscriptionId, CreateSubscriptionInviteVM createSubscriptionInviteVM, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSubscriptionInviteVM;

        // create path and map variables
        String localVarPath = "/api/manage/v1/Subscriptions/{subscriptionId}/invite"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionInvitesCreateInviteValidateBeforeCall(String subscriptionId, CreateSubscriptionInviteVM createSubscriptionInviteVM, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionInvitesCreateInvite(Async)");
        }

        return subscriptionInvitesCreateInviteCall(subscriptionId, createSubscriptionInviteVM, _callback);

    }

    /**
     * Create invite to subscription
     * 
     * @param subscriptionId id (required)
     * @param createSubscriptionInviteVM create VM (optional)
     * @return SubscriptionInviteVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is wrong </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> there is no subscription with such id </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> exception caught </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionInviteVM subscriptionInvitesCreateInvite(String subscriptionId, CreateSubscriptionInviteVM createSubscriptionInviteVM) throws ApiException {
        ApiResponse<SubscriptionInviteVM> localVarResp = subscriptionInvitesCreateInviteWithHttpInfo(subscriptionId, createSubscriptionInviteVM);
        return localVarResp.getData();
    }

    /**
     * Create invite to subscription
     * 
     * @param subscriptionId id (required)
     * @param createSubscriptionInviteVM create VM (optional)
     * @return ApiResponse&lt;SubscriptionInviteVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is wrong </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> there is no subscription with such id </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> exception caught </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionInviteVM> subscriptionInvitesCreateInviteWithHttpInfo(String subscriptionId, CreateSubscriptionInviteVM createSubscriptionInviteVM) throws ApiException {
        okhttp3.Call localVarCall = subscriptionInvitesCreateInviteValidateBeforeCall(subscriptionId, createSubscriptionInviteVM, null);
        Type localVarReturnType = new TypeToken<SubscriptionInviteVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create invite to subscription (asynchronously)
     * 
     * @param subscriptionId id (required)
     * @param createSubscriptionInviteVM create VM (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is wrong </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> there is no subscription with such id </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> exception caught </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionInvitesCreateInviteAsync(String subscriptionId, CreateSubscriptionInviteVM createSubscriptionInviteVM, final ApiCallback<SubscriptionInviteVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionInvitesCreateInviteValidateBeforeCall(subscriptionId, createSubscriptionInviteVM, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionInviteVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionInvitesDeleteInvite
     * @param subscriptionId id (required)
     * @param accesstoken invite&#39;s token (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is wrong </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> there is no subscription with such id </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> exception caught </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionInvitesDeleteInviteCall(String subscriptionId, String accesstoken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/manage/v1/Subscriptions/{subscriptionId}/invite/{accesstoken}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "accesstoken" + "}", localVarApiClient.escapeString(accesstoken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionInvitesDeleteInviteValidateBeforeCall(String subscriptionId, String accesstoken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionInvitesDeleteInvite(Async)");
        }

        // verify the required parameter 'accesstoken' is set
        if (accesstoken == null) {
            throw new ApiException("Missing the required parameter 'accesstoken' when calling subscriptionInvitesDeleteInvite(Async)");
        }

        return subscriptionInvitesDeleteInviteCall(subscriptionId, accesstoken, _callback);

    }

    /**
     * Delete invite with specified token
     * 
     * @param subscriptionId id (required)
     * @param accesstoken invite&#39;s token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is wrong </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> there is no subscription with such id </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> exception caught </td><td>  -  </td></tr>
     </table>
     */
    public void subscriptionInvitesDeleteInvite(String subscriptionId, String accesstoken) throws ApiException {
        subscriptionInvitesDeleteInviteWithHttpInfo(subscriptionId, accesstoken);
    }

    /**
     * Delete invite with specified token
     * 
     * @param subscriptionId id (required)
     * @param accesstoken invite&#39;s token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is wrong </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> there is no subscription with such id </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> exception caught </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscriptionInvitesDeleteInviteWithHttpInfo(String subscriptionId, String accesstoken) throws ApiException {
        okhttp3.Call localVarCall = subscriptionInvitesDeleteInviteValidateBeforeCall(subscriptionId, accesstoken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete invite with specified token (asynchronously)
     * 
     * @param subscriptionId id (required)
     * @param accesstoken invite&#39;s token (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is wrong </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> there is no subscription with such id </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> exception caught </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionInvitesDeleteInviteAsync(String subscriptionId, String accesstoken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionInvitesDeleteInviteValidateBeforeCall(subscriptionId, accesstoken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionInvitesGetInvites
     * @param subscriptionId Idenitifier of subscription (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or user is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionInvitesGetInvitesCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/manage/v1/Subscriptions/{subscriptionId}/invites"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionInvitesGetInvitesValidateBeforeCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionInvitesGetInvites(Async)");
        }

        return subscriptionInvitesGetInvitesCall(subscriptionId, _callback);

    }

    /**
     * Get list of invites in a subscription,  the added users will be displayed in the list of users of the subscription,  and these users will also have an active subscription.
     * 
     * @param subscriptionId Idenitifier of subscription (required)
     * @return SubscriptionInvitesVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or user is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionInvitesVM subscriptionInvitesGetInvites(String subscriptionId) throws ApiException {
        ApiResponse<SubscriptionInvitesVM> localVarResp = subscriptionInvitesGetInvitesWithHttpInfo(subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Get list of invites in a subscription,  the added users will be displayed in the list of users of the subscription,  and these users will also have an active subscription.
     * 
     * @param subscriptionId Idenitifier of subscription (required)
     * @return ApiResponse&lt;SubscriptionInvitesVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or user is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionInvitesVM> subscriptionInvitesGetInvitesWithHttpInfo(String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = subscriptionInvitesGetInvitesValidateBeforeCall(subscriptionId, null);
        Type localVarReturnType = new TypeToken<SubscriptionInvitesVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of invites in a subscription,  the added users will be displayed in the list of users of the subscription,  and these users will also have an active subscription. (asynchronously)
     * 
     * @param subscriptionId Idenitifier of subscription (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succesfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The reqeust is wrong </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You don&#39;t have rights for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or user is not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Exception thrown </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionInvitesGetInvitesAsync(String subscriptionId, final ApiCallback<SubscriptionInvitesVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionInvitesGetInvitesValidateBeforeCall(subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionInvitesVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
