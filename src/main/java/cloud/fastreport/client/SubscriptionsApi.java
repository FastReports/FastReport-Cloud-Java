/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.fastreport.client;

import cloud.fastreport.ApiClient;
import cloud.fastreport.ApiException;
import cloud.fastreport.ApiResponse;
import cloud.fastreport.Pair;

import cloud.fastreport.model.DefaultPermissionsVM;
import cloud.fastreport.model.MyPermissionsVM;
import cloud.fastreport.model.ProblemDetails;
import cloud.fastreport.model.RenameSubscriptionVM;
import cloud.fastreport.model.SubscriptionPermissionsVM;
import cloud.fastreport.model.SubscriptionVM;
import cloud.fastreport.model.SubscriptionsVM;
import cloud.fastreport.model.UpdateDefaultPermissionsVM;
import cloud.fastreport.model.UpdateSubscriptionLocaleVM;
import cloud.fastreport.model.UpdateSubscriptionPermissionsVM;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SubscriptionsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public SubscriptionsApi() {
    this(new ApiClient());
  }

  public SubscriptionsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Get subscription&#39;s default permissions for new entities
   * 
   * @param subscriptionId id (required)
   * @return DefaultPermissionsVM
   * @throws ApiException if fails to make API call
   */
  public DefaultPermissionsVM subscriptionsGetDefaultPermissions(String subscriptionId) throws ApiException {
    ApiResponse<DefaultPermissionsVM> localVarResponse = subscriptionsGetDefaultPermissionsWithHttpInfo(subscriptionId);
    return localVarResponse.getData();
  }

  /**
   * Get subscription&#39;s default permissions for new entities
   * 
   * @param subscriptionId id (required)
   * @return ApiResponse&lt;DefaultPermissionsVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DefaultPermissionsVM> subscriptionsGetDefaultPermissionsWithHttpInfo(String subscriptionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = subscriptionsGetDefaultPermissionsRequestBuilder(subscriptionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("subscriptionsGetDefaultPermissions", localVarResponse);
        }
        return new ApiResponse<DefaultPermissionsVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DefaultPermissionsVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder subscriptionsGetDefaultPermissionsRequestBuilder(String subscriptionId) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling subscriptionsGetDefaultPermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/manage/v1/Subscriptions/{subscriptionId}/defaultPermissions"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get user&#39;s permissions for a subscription by id
   * 
   * @param subId subscription id (required)
   * @return MyPermissionsVM
   * @throws ApiException if fails to make API call
   */
  public MyPermissionsVM subscriptionsGetMyPermissions(String subId) throws ApiException {
    ApiResponse<MyPermissionsVM> localVarResponse = subscriptionsGetMyPermissionsWithHttpInfo(subId);
    return localVarResponse.getData();
  }

  /**
   * Get user&#39;s permissions for a subscription by id
   * 
   * @param subId subscription id (required)
   * @return ApiResponse&lt;MyPermissionsVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MyPermissionsVM> subscriptionsGetMyPermissionsWithHttpInfo(String subId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = subscriptionsGetMyPermissionsRequestBuilder(subId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("subscriptionsGetMyPermissions", localVarResponse);
        }
        return new ApiResponse<MyPermissionsVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MyPermissionsVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder subscriptionsGetMyPermissionsRequestBuilder(String subId) throws ApiException {
    // verify the required parameter 'subId' is set
    if (subId == null) {
      throw new ApiException(400, "Missing the required parameter 'subId' when calling subscriptionsGetMyPermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/manage/v1/Subscriptions/{subId}/mypermissions"
        .replace("{subId}", ApiClient.urlEncode(subId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get permissions for a subscription by id
   * 
   * @param id  (required)
   * @return SubscriptionPermissionsVM
   * @throws ApiException if fails to make API call
   */
  public SubscriptionPermissionsVM subscriptionsGetPermissions(String id) throws ApiException {
    ApiResponse<SubscriptionPermissionsVM> localVarResponse = subscriptionsGetPermissionsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get permissions for a subscription by id
   * 
   * @param id  (required)
   * @return ApiResponse&lt;SubscriptionPermissionsVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SubscriptionPermissionsVM> subscriptionsGetPermissionsWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = subscriptionsGetPermissionsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("subscriptionsGetPermissions", localVarResponse);
        }
        return new ApiResponse<SubscriptionPermissionsVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionPermissionsVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder subscriptionsGetPermissionsRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling subscriptionsGetPermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/manage/v1/Subscriptions/{id}/permissions"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns the subscription by id
   * 
   * @param id Identifier of subscription (required)
   * @return SubscriptionVM
   * @throws ApiException if fails to make API call
   */
  public SubscriptionVM subscriptionsGetSubscription(String id) throws ApiException {
    ApiResponse<SubscriptionVM> localVarResponse = subscriptionsGetSubscriptionWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Returns the subscription by id
   * 
   * @param id Identifier of subscription (required)
   * @return ApiResponse&lt;SubscriptionVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SubscriptionVM> subscriptionsGetSubscriptionWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = subscriptionsGetSubscriptionRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("subscriptionsGetSubscription", localVarResponse);
        }
        return new ApiResponse<SubscriptionVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder subscriptionsGetSubscriptionRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling subscriptionsGetSubscription");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/manage/v1/Subscriptions/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns a list of all subscriptions of current user
   * 
   * @param skip Variable for pagination, defautl value is 0 (optional, default to 0)
   * @param take Variable for pagination, default value is 10 (optional, default to 10)
   * @return SubscriptionsVM
   * @throws ApiException if fails to make API call
   */
  public SubscriptionsVM subscriptionsGetSubscriptions(Integer skip, Integer take) throws ApiException {
    ApiResponse<SubscriptionsVM> localVarResponse = subscriptionsGetSubscriptionsWithHttpInfo(skip, take);
    return localVarResponse.getData();
  }

  /**
   * Returns a list of all subscriptions of current user
   * 
   * @param skip Variable for pagination, defautl value is 0 (optional, default to 0)
   * @param take Variable for pagination, default value is 10 (optional, default to 10)
   * @return ApiResponse&lt;SubscriptionsVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SubscriptionsVM> subscriptionsGetSubscriptionsWithHttpInfo(Integer skip, Integer take) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = subscriptionsGetSubscriptionsRequestBuilder(skip, take);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("subscriptionsGetSubscriptions", localVarResponse);
        }
        return new ApiResponse<SubscriptionsVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionsVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder subscriptionsGetSubscriptionsRequestBuilder(Integer skip, Integer take) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/manage/v1/Subscriptions";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Rename subscription
   * 
   * @param subscriptionId id (required)
   * @param renameSubscriptionVM rename VM (required)
   * @return SubscriptionVM
   * @throws ApiException if fails to make API call
   */
  public SubscriptionVM subscriptionsRenameSubscription(String subscriptionId, RenameSubscriptionVM renameSubscriptionVM) throws ApiException {
    ApiResponse<SubscriptionVM> localVarResponse = subscriptionsRenameSubscriptionWithHttpInfo(subscriptionId, renameSubscriptionVM);
    return localVarResponse.getData();
  }

  /**
   * Rename subscription
   * 
   * @param subscriptionId id (required)
   * @param renameSubscriptionVM rename VM (required)
   * @return ApiResponse&lt;SubscriptionVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SubscriptionVM> subscriptionsRenameSubscriptionWithHttpInfo(String subscriptionId, RenameSubscriptionVM renameSubscriptionVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = subscriptionsRenameSubscriptionRequestBuilder(subscriptionId, renameSubscriptionVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("subscriptionsRenameSubscription", localVarResponse);
        }
        return new ApiResponse<SubscriptionVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder subscriptionsRenameSubscriptionRequestBuilder(String subscriptionId, RenameSubscriptionVM renameSubscriptionVM) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling subscriptionsRenameSubscription");
    }
    // verify the required parameter 'renameSubscriptionVM' is set
    if (renameSubscriptionVM == null) {
      throw new ApiException(400, "Missing the required parameter 'renameSubscriptionVM' when calling subscriptionsRenameSubscription");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/manage/v1/Subscriptions/{subscriptionId}/rename"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(renameSubscriptionVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Change subscription&#39;s default permissions for new entities
   * 
   * @param subscriptionId id (required)
   * @param updateDefaultPermissionsVM update default permissions VM (required)
   * @return DefaultPermissionsVM
   * @throws ApiException if fails to make API call
   */
  public DefaultPermissionsVM subscriptionsUpdateDefaultPermissions(String subscriptionId, UpdateDefaultPermissionsVM updateDefaultPermissionsVM) throws ApiException {
    ApiResponse<DefaultPermissionsVM> localVarResponse = subscriptionsUpdateDefaultPermissionsWithHttpInfo(subscriptionId, updateDefaultPermissionsVM);
    return localVarResponse.getData();
  }

  /**
   * Change subscription&#39;s default permissions for new entities
   * 
   * @param subscriptionId id (required)
   * @param updateDefaultPermissionsVM update default permissions VM (required)
   * @return ApiResponse&lt;DefaultPermissionsVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DefaultPermissionsVM> subscriptionsUpdateDefaultPermissionsWithHttpInfo(String subscriptionId, UpdateDefaultPermissionsVM updateDefaultPermissionsVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = subscriptionsUpdateDefaultPermissionsRequestBuilder(subscriptionId, updateDefaultPermissionsVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("subscriptionsUpdateDefaultPermissions", localVarResponse);
        }
        return new ApiResponse<DefaultPermissionsVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DefaultPermissionsVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder subscriptionsUpdateDefaultPermissionsRequestBuilder(String subscriptionId, UpdateDefaultPermissionsVM updateDefaultPermissionsVM) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling subscriptionsUpdateDefaultPermissions");
    }
    // verify the required parameter 'updateDefaultPermissionsVM' is set
    if (updateDefaultPermissionsVM == null) {
      throw new ApiException(400, "Missing the required parameter 'updateDefaultPermissionsVM' when calling subscriptionsUpdateDefaultPermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/manage/v1/Subscriptions/{subscriptionId}/defaultPermissions"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateDefaultPermissionsVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update subscription&#39;s default locale
   * 
   * @param subscriptionId id (required)
   * @param updateSubscriptionLocaleVM update VM (required)
   * @return SubscriptionVM
   * @throws ApiException if fails to make API call
   */
  public SubscriptionVM subscriptionsUpdateLocale(String subscriptionId, UpdateSubscriptionLocaleVM updateSubscriptionLocaleVM) throws ApiException {
    ApiResponse<SubscriptionVM> localVarResponse = subscriptionsUpdateLocaleWithHttpInfo(subscriptionId, updateSubscriptionLocaleVM);
    return localVarResponse.getData();
  }

  /**
   * Update subscription&#39;s default locale
   * 
   * @param subscriptionId id (required)
   * @param updateSubscriptionLocaleVM update VM (required)
   * @return ApiResponse&lt;SubscriptionVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SubscriptionVM> subscriptionsUpdateLocaleWithHttpInfo(String subscriptionId, UpdateSubscriptionLocaleVM updateSubscriptionLocaleVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = subscriptionsUpdateLocaleRequestBuilder(subscriptionId, updateSubscriptionLocaleVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("subscriptionsUpdateLocale", localVarResponse);
        }
        return new ApiResponse<SubscriptionVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder subscriptionsUpdateLocaleRequestBuilder(String subscriptionId, UpdateSubscriptionLocaleVM updateSubscriptionLocaleVM) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling subscriptionsUpdateLocale");
    }
    // verify the required parameter 'updateSubscriptionLocaleVM' is set
    if (updateSubscriptionLocaleVM == null) {
      throw new ApiException(400, "Missing the required parameter 'updateSubscriptionLocaleVM' when calling subscriptionsUpdateLocale");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/manage/v1/Subscriptions/{subscriptionId}/Locale"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateSubscriptionLocaleVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update permissions
   * 
   * @param id  (required)
   * @param updateSubscriptionPermissionsVM  (optional)
   * @throws ApiException if fails to make API call
   */
  public void subscriptionsUpdatePermissions(String id, UpdateSubscriptionPermissionsVM updateSubscriptionPermissionsVM) throws ApiException {
    subscriptionsUpdatePermissionsWithHttpInfo(id, updateSubscriptionPermissionsVM);
  }

  /**
   * Update permissions
   * 
   * @param id  (required)
   * @param updateSubscriptionPermissionsVM  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> subscriptionsUpdatePermissionsWithHttpInfo(String id, UpdateSubscriptionPermissionsVM updateSubscriptionPermissionsVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = subscriptionsUpdatePermissionsRequestBuilder(id, updateSubscriptionPermissionsVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("subscriptionsUpdatePermissions", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder subscriptionsUpdatePermissionsRequestBuilder(String id, UpdateSubscriptionPermissionsVM updateSubscriptionPermissionsVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling subscriptionsUpdatePermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/manage/v1/Subscriptions/{id}/permissions"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateSubscriptionPermissionsVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
