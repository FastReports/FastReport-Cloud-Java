/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.client;

import cloud.fastreport.ApiCallback;
import cloud.fastreport.ApiClient;
import cloud.fastreport.ApiException;
import cloud.fastreport.ApiResponse;
import cloud.fastreport.Configuration;
import cloud.fastreport.Pair;
import cloud.fastreport.ProgressRequestBody;
import cloud.fastreport.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloud.fastreport.model.CreateTaskBaseVM;
import cloud.fastreport.model.ProblemDetails;
import cloud.fastreport.model.RunTaskBaseVM;
import cloud.fastreport.model.TaskBaseVM;
import cloud.fastreport.model.TaskPermissionsVM;
import cloud.fastreport.model.TasksVM;
import cloud.fastreport.model.UpdateTaskBaseVM;
import cloud.fastreport.model.UpdateTaskPermissionsVM;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TasksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TasksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tasksCreateTask
     * @param createTaskBaseVM task&#39;s view model. You have to specify task type (type: \&quot;ExportTemplate\&quot;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad VM provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksCreateTaskCall(CreateTaskBaseVM createTaskBaseVM, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTaskBaseVM;

        // create path and map variables
        String localVarPath = "/api/tasks/v1/Tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksCreateTaskValidateBeforeCall(CreateTaskBaseVM createTaskBaseVM, final ApiCallback _callback) throws ApiException {
        return tasksCreateTaskCall(createTaskBaseVM, _callback);

    }

    /**
     * Create a new task
     * 
     * @param createTaskBaseVM task&#39;s view model. You have to specify task type (type: \&quot;ExportTemplate\&quot;) (optional)
     * @return TaskBaseVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad VM provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public TaskBaseVM tasksCreateTask(CreateTaskBaseVM createTaskBaseVM) throws ApiException {
        ApiResponse<TaskBaseVM> localVarResp = tasksCreateTaskWithHttpInfo(createTaskBaseVM);
        return localVarResp.getData();
    }

    /**
     * Create a new task
     * 
     * @param createTaskBaseVM task&#39;s view model. You have to specify task type (type: \&quot;ExportTemplate\&quot;) (optional)
     * @return ApiResponse&lt;TaskBaseVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad VM provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskBaseVM> tasksCreateTaskWithHttpInfo(CreateTaskBaseVM createTaskBaseVM) throws ApiException {
        okhttp3.Call localVarCall = tasksCreateTaskValidateBeforeCall(createTaskBaseVM, null);
        Type localVarReturnType = new TypeToken<TaskBaseVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new task (asynchronously)
     * 
     * @param createTaskBaseVM task&#39;s view model. You have to specify task type (type: \&quot;ExportTemplate\&quot;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad VM provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksCreateTaskAsync(CreateTaskBaseVM createTaskBaseVM, final ApiCallback<TaskBaseVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksCreateTaskValidateBeforeCall(createTaskBaseVM, _callback);
        Type localVarReturnType = new TypeToken<TaskBaseVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksDeleteTask
     * @param taskId deleting task id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksDeleteTaskCall(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tasks/v1/Tasks/{taskId}"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksDeleteTaskValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling tasksDeleteTask(Async)");
        }

        return tasksDeleteTaskCall(taskId, _callback);

    }

    /**
     * Delete a task from a storage
     * 
     * @param taskId deleting task id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public void tasksDeleteTask(String taskId) throws ApiException {
        tasksDeleteTaskWithHttpInfo(taskId);
    }

    /**
     * Delete a task from a storage
     * 
     * @param taskId deleting task id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tasksDeleteTaskWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = tasksDeleteTaskValidateBeforeCall(taskId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a task from a storage (asynchronously)
     * 
     * @param taskId deleting task id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksDeleteTaskAsync(String taskId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksDeleteTaskValidateBeforeCall(taskId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksGet
     * @param taskId a task id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGetCall(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tasks/v1/Tasks/{taskId}"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksGetValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling tasksGet(Async)");
        }

        return tasksGetCall(taskId, _callback);

    }

    /**
     * Get a task by a specified id
     * 
     * @param taskId a task id (required)
     * @return TaskBaseVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public TaskBaseVM tasksGet(String taskId) throws ApiException {
        ApiResponse<TaskBaseVM> localVarResp = tasksGetWithHttpInfo(taskId);
        return localVarResp.getData();
    }

    /**
     * Get a task by a specified id
     * 
     * @param taskId a task id (required)
     * @return ApiResponse&lt;TaskBaseVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskBaseVM> tasksGetWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = tasksGetValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<TaskBaseVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a task by a specified id (asynchronously)
     * 
     * @param taskId a task id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGetAsync(String taskId, final ApiCallback<TaskBaseVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksGetValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<TaskBaseVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksGetList
     * @param skip number of tasks, that have to be skipped (optional, default to 0)
     * @param take number of tasks, that have to be returned (optional, default to 10)
     * @param subscriptionId subscription id (optional)
     * @param searchPattern  (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tasks were found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or tasks were not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGetListCall(Integer skip, Integer take, String subscriptionId, String searchPattern, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tasks/v1/Tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        if (subscriptionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscriptionId", subscriptionId));
        }

        if (searchPattern != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchPattern", searchPattern));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksGetListValidateBeforeCall(Integer skip, Integer take, String subscriptionId, String searchPattern, final ApiCallback _callback) throws ApiException {
        return tasksGetListCall(skip, take, subscriptionId, searchPattern, _callback);

    }

    /**
     * Get tasks list
     * 
     * @param skip number of tasks, that have to be skipped (optional, default to 0)
     * @param take number of tasks, that have to be returned (optional, default to 10)
     * @param subscriptionId subscription id (optional)
     * @param searchPattern  (optional, default to )
     * @return TasksVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tasks were found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or tasks were not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public TasksVM tasksGetList(Integer skip, Integer take, String subscriptionId, String searchPattern) throws ApiException {
        ApiResponse<TasksVM> localVarResp = tasksGetListWithHttpInfo(skip, take, subscriptionId, searchPattern);
        return localVarResp.getData();
    }

    /**
     * Get tasks list
     * 
     * @param skip number of tasks, that have to be skipped (optional, default to 0)
     * @param take number of tasks, that have to be returned (optional, default to 10)
     * @param subscriptionId subscription id (optional)
     * @param searchPattern  (optional, default to )
     * @return ApiResponse&lt;TasksVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tasks were found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or tasks were not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TasksVM> tasksGetListWithHttpInfo(Integer skip, Integer take, String subscriptionId, String searchPattern) throws ApiException {
        okhttp3.Call localVarCall = tasksGetListValidateBeforeCall(skip, take, subscriptionId, searchPattern, null);
        Type localVarReturnType = new TypeToken<TasksVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tasks list (asynchronously)
     * 
     * @param skip number of tasks, that have to be skipped (optional, default to 0)
     * @param take number of tasks, that have to be returned (optional, default to 10)
     * @param subscriptionId subscription id (optional)
     * @param searchPattern  (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tasks were found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or tasks were not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGetListAsync(Integer skip, Integer take, String subscriptionId, String searchPattern, final ApiCallback<TasksVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksGetListValidateBeforeCall(skip, take, subscriptionId, searchPattern, _callback);
        Type localVarReturnType = new TypeToken<TasksVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksGetPermissions
     * @param id task id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGetPermissionsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tasks/v1/Tasks/{id}/permissions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksGetPermissionsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tasksGetPermissions(Async)");
        }

        return tasksGetPermissionsCall(id, _callback);

    }

    /**
     * Get all Task permissions
     * 
     * @param id task id (required)
     * @return TaskPermissionsVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public TaskPermissionsVM tasksGetPermissions(String id) throws ApiException {
        ApiResponse<TaskPermissionsVM> localVarResp = tasksGetPermissionsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get all Task permissions
     * 
     * @param id task id (required)
     * @return ApiResponse&lt;TaskPermissionsVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskPermissionsVM> tasksGetPermissionsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = tasksGetPermissionsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TaskPermissionsVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Task permissions (asynchronously)
     * 
     * @param id task id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGetPermissionsAsync(String id, final ApiCallback<TaskPermissionsVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksGetPermissionsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TaskPermissionsVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksRenameTask
     * @param taskId renaming task id (required)
     * @param newName task&#39;s new Name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id or name provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksRenameTaskCall(String taskId, String newName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tasks/v1/Tasks/{taskId}/rename"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (newName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newName", newName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksRenameTaskValidateBeforeCall(String taskId, String newName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling tasksRenameTask(Async)");
        }

        return tasksRenameTaskCall(taskId, newName, _callback);

    }

    /**
     * Rename a task
     * 
     * @param taskId renaming task id (required)
     * @param newName task&#39;s new Name (optional)
     * @return TaskBaseVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id or name provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public TaskBaseVM tasksRenameTask(String taskId, String newName) throws ApiException {
        ApiResponse<TaskBaseVM> localVarResp = tasksRenameTaskWithHttpInfo(taskId, newName);
        return localVarResp.getData();
    }

    /**
     * Rename a task
     * 
     * @param taskId renaming task id (required)
     * @param newName task&#39;s new Name (optional)
     * @return ApiResponse&lt;TaskBaseVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id or name provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskBaseVM> tasksRenameTaskWithHttpInfo(String taskId, String newName) throws ApiException {
        okhttp3.Call localVarCall = tasksRenameTaskValidateBeforeCall(taskId, newName, null);
        Type localVarReturnType = new TypeToken<TaskBaseVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rename a task (asynchronously)
     * 
     * @param taskId renaming task id (required)
     * @param newName task&#39;s new Name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id or name provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksRenameTaskAsync(String taskId, String newName, final ApiCallback<TaskBaseVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksRenameTaskValidateBeforeCall(taskId, newName, _callback);
        Type localVarReturnType = new TypeToken<TaskBaseVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksRunTask
     * @param runTaskBaseVM task&#39;s view model (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was executed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription was not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad VM provided </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksRunTaskCall(RunTaskBaseVM runTaskBaseVM, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = runTaskBaseVM;

        // create path and map variables
        String localVarPath = "/api/tasks/v1/Tasks/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksRunTaskValidateBeforeCall(RunTaskBaseVM runTaskBaseVM, final ApiCallback _callback) throws ApiException {
        return tasksRunTaskCall(runTaskBaseVM, _callback);

    }

    /**
     * Run a task from request body
     * 
     * @param runTaskBaseVM task&#39;s view model (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was executed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription was not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad VM provided </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public void tasksRunTask(RunTaskBaseVM runTaskBaseVM) throws ApiException {
        tasksRunTaskWithHttpInfo(runTaskBaseVM);
    }

    /**
     * Run a task from request body
     * 
     * @param runTaskBaseVM task&#39;s view model (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was executed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription was not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad VM provided </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tasksRunTaskWithHttpInfo(RunTaskBaseVM runTaskBaseVM) throws ApiException {
        okhttp3.Call localVarCall = tasksRunTaskValidateBeforeCall(runTaskBaseVM, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Run a task from request body (asynchronously)
     * 
     * @param runTaskBaseVM task&#39;s view model (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was executed </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription was not found </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad VM provided </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksRunTaskAsync(RunTaskBaseVM runTaskBaseVM, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksRunTaskValidateBeforeCall(runTaskBaseVM, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksRunTaskById
     * @param taskId task id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was executed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksRunTaskByIdCall(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/tasks/v1/Tasks/{taskId}/run"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksRunTaskByIdValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling tasksRunTaskById(Async)");
        }

        return tasksRunTaskByIdCall(taskId, _callback);

    }

    /**
     * Run a task by id
     * 
     * @param taskId task id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was executed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public void tasksRunTaskById(String taskId) throws ApiException {
        tasksRunTaskByIdWithHttpInfo(taskId);
    }

    /**
     * Run a task by id
     * 
     * @param taskId task id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was executed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tasksRunTaskByIdWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = tasksRunTaskByIdValidateBeforeCall(taskId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Run a task by id (asynchronously)
     * 
     * @param taskId task id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task was executed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksRunTaskByIdAsync(String taskId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksRunTaskByIdValidateBeforeCall(taskId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksUpdatePermissions
     * @param id task id (required)
     * @param updateTaskPermissionsVM new permissions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id or VM provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksUpdatePermissionsCall(String id, UpdateTaskPermissionsVM updateTaskPermissionsVM, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTaskPermissionsVM;

        // create path and map variables
        String localVarPath = "/api/tasks/v1/Tasks/{id}/permissions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksUpdatePermissionsValidateBeforeCall(String id, UpdateTaskPermissionsVM updateTaskPermissionsVM, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tasksUpdatePermissions(Async)");
        }

        return tasksUpdatePermissionsCall(id, updateTaskPermissionsVM, _callback);

    }

    /**
     * Update permissions
     * 
     * @param id task id (required)
     * @param updateTaskPermissionsVM new permissions (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id or VM provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public void tasksUpdatePermissions(String id, UpdateTaskPermissionsVM updateTaskPermissionsVM) throws ApiException {
        tasksUpdatePermissionsWithHttpInfo(id, updateTaskPermissionsVM);
    }

    /**
     * Update permissions
     * 
     * @param id task id (required)
     * @param updateTaskPermissionsVM new permissions (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id or VM provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tasksUpdatePermissionsWithHttpInfo(String id, UpdateTaskPermissionsVM updateTaskPermissionsVM) throws ApiException {
        okhttp3.Call localVarCall = tasksUpdatePermissionsValidateBeforeCall(id, updateTaskPermissionsVM, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update permissions (asynchronously)
     * 
     * @param id task id (required)
     * @param updateTaskPermissionsVM new permissions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Task was updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id or VM provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksUpdatePermissionsAsync(String id, UpdateTaskPermissionsVM updateTaskPermissionsVM, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksUpdatePermissionsValidateBeforeCall(id, updateTaskPermissionsVM, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksUpdateTask
     * @param taskId updating task id (required)
     * @param updateTaskBaseVM task&#39;s view model. You have to specify task type (type: \&quot;ExportTemplate\&quot;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id or VM provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Task was updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksUpdateTaskCall(String taskId, UpdateTaskBaseVM updateTaskBaseVM, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTaskBaseVM;

        // create path and map variables
        String localVarPath = "/api/tasks/v1/Tasks/{taskId}"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksUpdateTaskValidateBeforeCall(String taskId, UpdateTaskBaseVM updateTaskBaseVM, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling tasksUpdateTask(Async)");
        }

        return tasksUpdateTaskCall(taskId, updateTaskBaseVM, _callback);

    }

    /**
     * Update a task
     * 
     * @param taskId updating task id (required)
     * @param updateTaskBaseVM task&#39;s view model. You have to specify task type (type: \&quot;ExportTemplate\&quot;) (optional)
     * @return TaskBaseVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id or VM provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Task was updated </td><td>  -  </td></tr>
     </table>
     */
    public TaskBaseVM tasksUpdateTask(String taskId, UpdateTaskBaseVM updateTaskBaseVM) throws ApiException {
        ApiResponse<TaskBaseVM> localVarResp = tasksUpdateTaskWithHttpInfo(taskId, updateTaskBaseVM);
        return localVarResp.getData();
    }

    /**
     * Update a task
     * 
     * @param taskId updating task id (required)
     * @param updateTaskBaseVM task&#39;s view model. You have to specify task type (type: \&quot;ExportTemplate\&quot;) (optional)
     * @return ApiResponse&lt;TaskBaseVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id or VM provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Task was updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskBaseVM> tasksUpdateTaskWithHttpInfo(String taskId, UpdateTaskBaseVM updateTaskBaseVM) throws ApiException {
        okhttp3.Call localVarCall = tasksUpdateTaskValidateBeforeCall(taskId, updateTaskBaseVM, null);
        Type localVarReturnType = new TypeToken<TaskBaseVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a task (asynchronously)
     * 
     * @param taskId updating task id (required)
     * @param updateTaskBaseVM task&#39;s view model. You have to specify task type (type: \&quot;ExportTemplate\&quot;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad id or VM provided </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Subscription is outdated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough permissions for the operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription or task was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Try again, if error still here - text our support </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Task was updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksUpdateTaskAsync(String taskId, UpdateTaskBaseVM updateTaskBaseVM, final ApiCallback<TaskBaseVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksUpdateTaskValidateBeforeCall(taskId, updateTaskBaseVM, _callback);
        Type localVarReturnType = new TypeToken<TaskBaseVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
