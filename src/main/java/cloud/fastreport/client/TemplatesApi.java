/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cloud.fastreport.client;

import cloud.fastreport.ApiClient;
import cloud.fastreport.ApiException;
import cloud.fastreport.ApiResponse;
import cloud.fastreport.Pair;

import cloud.fastreport.model.AuditActionsVM;
import cloud.fastreport.model.BreadcrumbsVM;
import cloud.fastreport.model.CountVM;
import cloud.fastreport.model.ExportTemplateVM;
import cloud.fastreport.model.ExportVM;
import java.io.File;
import cloud.fastreport.model.FileIconVM;
import cloud.fastreport.model.FilePermissionsVM;
import cloud.fastreport.model.FileRenameVM;
import cloud.fastreport.model.FileSorting;
import cloud.fastreport.model.FileTagsUpdateVM;
import cloud.fastreport.model.FileVM;
import cloud.fastreport.model.FilesVM;
import cloud.fastreport.model.FolderCreateVM;
import cloud.fastreport.model.FolderIconVM;
import cloud.fastreport.model.FolderRenameVM;
import cloud.fastreport.model.FolderSizeVM;
import cloud.fastreport.model.FolderTagsUpdateVM;
import cloud.fastreport.model.PrepareTemplateVM;
import cloud.fastreport.model.PreviewTemplateVM;
import cloud.fastreport.model.ProblemDetails;
import cloud.fastreport.model.ReportVM;
import cloud.fastreport.model.SelectedFilesVM;
import cloud.fastreport.model.TemplateCreateVM;
import cloud.fastreport.model.TemplateFolderCreateVM;
import cloud.fastreport.model.TemplateVM;
import cloud.fastreport.model.TemplatesVM;
import cloud.fastreport.model.UpdateFileContentVM;
import cloud.fastreport.model.UpdateFilePermissionsVM;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TemplatesApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public TemplatesApi() {
    this(new ApiClient());
  }

  public TemplatesApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Delete all folders and files from recycle bin
   * User with a Delete RecycleBin permission can access this method.
   * @param subscriptionId subscription id (required)
   * @throws ApiException if fails to make API call
   */
  public void templateFolderAndFileClearRecycleBin(String subscriptionId) throws ApiException {
    templateFolderAndFileClearRecycleBinWithHttpInfo(subscriptionId);
  }

  /**
   * Delete all folders and files from recycle bin
   * User with a Delete RecycleBin permission can access this method.
   * @param subscriptionId subscription id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> templateFolderAndFileClearRecycleBinWithHttpInfo(String subscriptionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFolderAndFileClearRecycleBinRequestBuilder(subscriptionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFolderAndFileClearRecycleBin", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFolderAndFileClearRecycleBinRequestBuilder(String subscriptionId) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling templateFolderAndFileClearRecycleBin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/{subscriptionId}/ClearRecycleBin"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Copy folders and files to a specified folder
   * User with a Get permission for a files and Create permission for a destination folder can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @throws ApiException if fails to make API call
   */
  public void templateFolderAndFileCopyFiles(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    templateFolderAndFileCopyFilesWithHttpInfo(subscriptionId, selectedFilesVM);
  }

  /**
   * Copy folders and files to a specified folder
   * User with a Get permission for a files and Create permission for a destination folder can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> templateFolderAndFileCopyFilesWithHttpInfo(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFolderAndFileCopyFilesRequestBuilder(subscriptionId, selectedFilesVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFolderAndFileCopyFiles", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFolderAndFileCopyFilesRequestBuilder(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling templateFolderAndFileCopyFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/{subscriptionId}/CopyFiles"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(selectedFilesVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete folders and files
   * User with a Delete permission can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @throws ApiException if fails to make API call
   */
  public void templateFolderAndFileDeleteFiles(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    templateFolderAndFileDeleteFilesWithHttpInfo(subscriptionId, selectedFilesVM);
  }

  /**
   * Delete folders and files
   * User with a Delete permission can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> templateFolderAndFileDeleteFilesWithHttpInfo(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFolderAndFileDeleteFilesRequestBuilder(subscriptionId, selectedFilesVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFolderAndFileDeleteFiles", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFolderAndFileDeleteFilesRequestBuilder(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling templateFolderAndFileDeleteFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/{subscriptionId}/DeleteFiles"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(selectedFilesVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get count of files and folders what contains in a specified folder
   * User with a Get Count permission can access this method.
   * @param id folder id (required)
   * @param searchPattern string, that must be incuded in file or folder name to be counted &lt;br /&gt;              (leave undefined to count all files and folders) (optional)
   * @param useRegex set this to true if you want to use regular expression to search (optional, default to false)
   * @return CountVM
   * @throws ApiException if fails to make API call
   */
  public CountVM templateFolderAndFileGetCount(String id, String searchPattern, Boolean useRegex) throws ApiException {
    ApiResponse<CountVM> localVarResponse = templateFolderAndFileGetCountWithHttpInfo(id, searchPattern, useRegex);
    return localVarResponse.getData();
  }

  /**
   * Get count of files and folders what contains in a specified folder
   * User with a Get Count permission can access this method.
   * @param id folder id (required)
   * @param searchPattern string, that must be incuded in file or folder name to be counted &lt;br /&gt;              (leave undefined to count all files and folders) (optional)
   * @param useRegex set this to true if you want to use regular expression to search (optional, default to false)
   * @return ApiResponse&lt;CountVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CountVM> templateFolderAndFileGetCountWithHttpInfo(String id, String searchPattern, Boolean useRegex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFolderAndFileGetCountRequestBuilder(id, searchPattern, useRegex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFolderAndFileGetCount", localVarResponse);
        }
        return new ApiResponse<CountVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CountVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFolderAndFileGetCountRequestBuilder(String id, String searchPattern, Boolean useRegex) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFolderAndFileGetCount");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/CountFolderAndFiles"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "searchPattern";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchPattern", searchPattern));
    localVarQueryParameterBaseName = "useRegex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("useRegex", useRegex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all folders and files from specified folder
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @param skip number of folder and files, that have to be skipped (optional, default to 0)
   * @param take number of folder and files, that have to be returned (optional, default to 10)
   * @param orderBy indicates a field to sort by (optional)
   * @param desc indicates if sorting is descending (optional, default to false)
   * @param searchPattern  (optional, default to )
   * @param useRegex  (optional, default to false)
   * @return FilesVM
   * @throws ApiException if fails to make API call
   */
  public FilesVM templateFolderAndFileGetFoldersAndFiles(String id, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    ApiResponse<FilesVM> localVarResponse = templateFolderAndFileGetFoldersAndFilesWithHttpInfo(id, skip, take, orderBy, desc, searchPattern, useRegex);
    return localVarResponse.getData();
  }

  /**
   * Get all folders and files from specified folder
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @param skip number of folder and files, that have to be skipped (optional, default to 0)
   * @param take number of folder and files, that have to be returned (optional, default to 10)
   * @param orderBy indicates a field to sort by (optional)
   * @param desc indicates if sorting is descending (optional, default to false)
   * @param searchPattern  (optional, default to )
   * @param useRegex  (optional, default to false)
   * @return ApiResponse&lt;FilesVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FilesVM> templateFolderAndFileGetFoldersAndFilesWithHttpInfo(String id, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFolderAndFileGetFoldersAndFilesRequestBuilder(id, skip, take, orderBy, desc, searchPattern, useRegex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFolderAndFileGetFoldersAndFiles", localVarResponse);
        }
        return new ApiResponse<FilesVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FilesVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFolderAndFileGetFoldersAndFilesRequestBuilder(String id, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFolderAndFileGetFoldersAndFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/ListFolderAndFiles"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));
    localVarQueryParameterBaseName = "orderBy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));
    localVarQueryParameterBaseName = "desc";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("desc", desc));
    localVarQueryParameterBaseName = "searchPattern";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchPattern", searchPattern));
    localVarQueryParameterBaseName = "useRegex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("useRegex", useRegex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all folders and files from recycle bin
   * User with a Get DeletedFiles permission can access this method.
   * @param subscriptionId subscription id (required)
   * @param skip number of folder and files, that have to be skipped (optional, default to 0)
   * @param take number of folder and files, that have to be returned (optional, default to 10)
   * @param orderBy indicates a field to sort by (optional)
   * @param desc indicates if sorting is descending (optional, default to false)
   * @param searchPattern  (optional, default to )
   * @param useRegex  (optional, default to false)
   * @return FilesVM
   * @throws ApiException if fails to make API call
   */
  public FilesVM templateFolderAndFileGetRecycleBinFoldersAndFiles(String subscriptionId, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    ApiResponse<FilesVM> localVarResponse = templateFolderAndFileGetRecycleBinFoldersAndFilesWithHttpInfo(subscriptionId, skip, take, orderBy, desc, searchPattern, useRegex);
    return localVarResponse.getData();
  }

  /**
   * Get all folders and files from recycle bin
   * User with a Get DeletedFiles permission can access this method.
   * @param subscriptionId subscription id (required)
   * @param skip number of folder and files, that have to be skipped (optional, default to 0)
   * @param take number of folder and files, that have to be returned (optional, default to 10)
   * @param orderBy indicates a field to sort by (optional)
   * @param desc indicates if sorting is descending (optional, default to false)
   * @param searchPattern  (optional, default to )
   * @param useRegex  (optional, default to false)
   * @return ApiResponse&lt;FilesVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FilesVM> templateFolderAndFileGetRecycleBinFoldersAndFilesWithHttpInfo(String subscriptionId, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFolderAndFileGetRecycleBinFoldersAndFilesRequestBuilder(subscriptionId, skip, take, orderBy, desc, searchPattern, useRegex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFolderAndFileGetRecycleBinFoldersAndFiles", localVarResponse);
        }
        return new ApiResponse<FilesVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FilesVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFolderAndFileGetRecycleBinFoldersAndFilesRequestBuilder(String subscriptionId, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling templateFolderAndFileGetRecycleBinFoldersAndFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/{subscriptionId}/ListRecycleBinFolderAndFiles"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));
    localVarQueryParameterBaseName = "orderBy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));
    localVarQueryParameterBaseName = "desc";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("desc", desc));
    localVarQueryParameterBaseName = "searchPattern";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchPattern", searchPattern));
    localVarQueryParameterBaseName = "useRegex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("useRegex", useRegex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move folders and files to a specified folder
   * User with a Update Place permission for a files and Create permission for a destination folder can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @throws ApiException if fails to make API call
   */
  public void templateFolderAndFileMoveFiles(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    templateFolderAndFileMoveFilesWithHttpInfo(subscriptionId, selectedFilesVM);
  }

  /**
   * Move folders and files to a specified folder
   * User with a Update Place permission for a files and Create permission for a destination folder can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> templateFolderAndFileMoveFilesWithHttpInfo(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFolderAndFileMoveFilesRequestBuilder(subscriptionId, selectedFilesVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFolderAndFileMoveFiles", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFolderAndFileMoveFilesRequestBuilder(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling templateFolderAndFileMoveFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/{subscriptionId}/MoveFiles"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(selectedFilesVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move folders and files to bin
   * User with a Delete permission can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @throws ApiException if fails to make API call
   */
  public void templateFolderAndFileMoveFilesToBin(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    templateFolderAndFileMoveFilesToBinWithHttpInfo(subscriptionId, selectedFilesVM);
  }

  /**
   * Move folders and files to bin
   * User with a Delete permission can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> templateFolderAndFileMoveFilesToBinWithHttpInfo(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFolderAndFileMoveFilesToBinRequestBuilder(subscriptionId, selectedFilesVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFolderAndFileMoveFilesToBin", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFolderAndFileMoveFilesToBinRequestBuilder(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling templateFolderAndFileMoveFilesToBin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/{subscriptionId}/ToBin"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(selectedFilesVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Recover all folders and files from recycle bin
   * User with a Create RecycleBin permission can access this method.
   * @param subscriptionId subscription id (required)
   * @throws ApiException if fails to make API call
   */
  public void templateFolderAndFileRecoverAllFromRecycleBin(String subscriptionId) throws ApiException {
    templateFolderAndFileRecoverAllFromRecycleBinWithHttpInfo(subscriptionId);
  }

  /**
   * Recover all folders and files from recycle bin
   * User with a Create RecycleBin permission can access this method.
   * @param subscriptionId subscription id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> templateFolderAndFileRecoverAllFromRecycleBinWithHttpInfo(String subscriptionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFolderAndFileRecoverAllFromRecycleBinRequestBuilder(subscriptionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFolderAndFileRecoverAllFromRecycleBin", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFolderAndFileRecoverAllFromRecycleBinRequestBuilder(String subscriptionId) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling templateFolderAndFileRecoverAllFromRecycleBin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/{subscriptionId}/RecoverRecycleBin"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Recover folders and files from bin
   * User with a SubscriptionCreate permission can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @throws ApiException if fails to make API call
   */
  public void templateFolderAndFileRecoverFiles(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    templateFolderAndFileRecoverFilesWithHttpInfo(subscriptionId, selectedFilesVM);
  }

  /**
   * Recover folders and files from bin
   * User with a SubscriptionCreate permission can access this method.
   * @param subscriptionId id of current subscription (required)
   * @param selectedFilesVM VM with files&#39; ids and params of their destination (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> templateFolderAndFileRecoverFilesWithHttpInfo(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFolderAndFileRecoverFilesRequestBuilder(subscriptionId, selectedFilesVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFolderAndFileRecoverFiles", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFolderAndFileRecoverFilesRequestBuilder(String subscriptionId, SelectedFilesVM selectedFilesVM) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling templateFolderAndFileRecoverFiles");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/{subscriptionId}/RecoverFiles"
        .replace("{subscriptionId}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(selectedFilesVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get specified folder, calculate it&#39;s size
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @return FolderSizeVM
   * @throws ApiException if fails to make API call
   */
  public FolderSizeVM templateFoldersCalculateFolderSize(String id) throws ApiException {
    ApiResponse<FolderSizeVM> localVarResponse = templateFoldersCalculateFolderSizeWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get specified folder, calculate it&#39;s size
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;FolderSizeVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FolderSizeVM> templateFoldersCalculateFolderSizeWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersCalculateFolderSizeRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersCalculateFolderSize", localVarResponse);
        }
        return new ApiResponse<FolderSizeVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FolderSizeVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersCalculateFolderSizeRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFoldersCalculateFolderSize");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/size"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move folder to a specified folder
   * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
   * @param id moving folder id (required)
   * @param folderId destination folder id (required)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM templateFoldersCopyFolder(String id, String folderId) throws ApiException {
    ApiResponse<FileVM> localVarResponse = templateFoldersCopyFolderWithHttpInfo(id, folderId);
    return localVarResponse.getData();
  }

  /**
   * Move folder to a specified folder
   * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
   * @param id moving folder id (required)
   * @param folderId destination folder id (required)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> templateFoldersCopyFolderWithHttpInfo(String id, String folderId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersCopyFolderRequestBuilder(id, folderId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersCopyFolder", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersCopyFolderRequestBuilder(String id, String folderId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFoldersCopyFolder");
    }
    // verify the required parameter 'folderId' is set
    if (folderId == null) {
      throw new ApiException(400, "Missing the required parameter 'folderId' when calling templateFoldersCopyFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/Copy/{folderId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{folderId}", ApiClient.urlEncode(folderId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete specified folder
   * User with a Delete Entity permission can access this method.
   * @param id folder id (required)
   * @throws ApiException if fails to make API call
   */
  public void templateFoldersDeleteFolder(String id) throws ApiException {
    templateFoldersDeleteFolderWithHttpInfo(id);
  }

  /**
   * Delete specified folder
   * User with a Delete Entity permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> templateFoldersDeleteFolderWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersDeleteFolderRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersDeleteFolder", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersDeleteFolderRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFoldersDeleteFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Export specified template folder to a specified format
   * User with Execute Export permission on template folder and  Create Entity on an export folder can access this method.
   * @param id template folder id (required)
   * @param exportTemplateVM export parameters (string only) (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM templateFoldersExport(String id, ExportTemplateVM exportTemplateVM) throws ApiException {
    ApiResponse<FileVM> localVarResponse = templateFoldersExportWithHttpInfo(id, exportTemplateVM);
    return localVarResponse.getData();
  }

  /**
   * Export specified template folder to a specified format
   * User with Execute Export permission on template folder and  Create Entity on an export folder can access this method.
   * @param id template folder id (required)
   * @param exportTemplateVM export parameters (string only) (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> templateFoldersExportWithHttpInfo(String id, ExportTemplateVM exportTemplateVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersExportRequestBuilder(id, exportTemplateVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersExport", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersExportRequestBuilder(String id, ExportTemplateVM exportTemplateVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFoldersExport");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/Export"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(exportTemplateVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get specified folder breadcrumbs
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @return BreadcrumbsVM
   * @throws ApiException if fails to make API call
   */
  public BreadcrumbsVM templateFoldersGetBreadcrumbs(String id) throws ApiException {
    ApiResponse<BreadcrumbsVM> localVarResponse = templateFoldersGetBreadcrumbsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get specified folder breadcrumbs
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;BreadcrumbsVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BreadcrumbsVM> templateFoldersGetBreadcrumbsWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersGetBreadcrumbsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersGetBreadcrumbs", localVarResponse);
        }
        return new ApiResponse<BreadcrumbsVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BreadcrumbsVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersGetBreadcrumbsRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFoldersGetBreadcrumbs");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/Breadcrumbs"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get specified folder
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM templateFoldersGetFolder(String id) throws ApiException {
    ApiResponse<FileVM> localVarResponse = templateFoldersGetFolderWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get specified folder
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> templateFoldersGetFolderWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersGetFolderRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersGetFolder", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersGetFolderRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFoldersGetFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all folders from specified folder
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @param skip number of files, that have to be skipped (optional, default to 0)
   * @param take number of files, that have to be returned (optional, default to 10)
   * @param orderBy  (optional)
   * @param desc  (optional, default to false)
   * @param searchPattern  (optional, default to )
   * @param useRegex  (optional, default to false)
   * @return FilesVM
   * @throws ApiException if fails to make API call
   */
  public FilesVM templateFoldersGetFolders(String id, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    ApiResponse<FilesVM> localVarResponse = templateFoldersGetFoldersWithHttpInfo(id, skip, take, orderBy, desc, searchPattern, useRegex);
    return localVarResponse.getData();
  }

  /**
   * Get all folders from specified folder
   * User with a Get Entity permission can access this method.
   * @param id folder id (required)
   * @param skip number of files, that have to be skipped (optional, default to 0)
   * @param take number of files, that have to be returned (optional, default to 10)
   * @param orderBy  (optional)
   * @param desc  (optional, default to false)
   * @param searchPattern  (optional, default to )
   * @param useRegex  (optional, default to false)
   * @return ApiResponse&lt;FilesVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FilesVM> templateFoldersGetFoldersWithHttpInfo(String id, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersGetFoldersRequestBuilder(id, skip, take, orderBy, desc, searchPattern, useRegex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersGetFolders", localVarResponse);
        }
        return new ApiResponse<FilesVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FilesVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersGetFoldersRequestBuilder(String id, Integer skip, Integer take, FileSorting orderBy, Boolean desc, String searchPattern, Boolean useRegex) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFoldersGetFolders");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/ListFolders"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));
    localVarQueryParameterBaseName = "orderBy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));
    localVarQueryParameterBaseName = "desc";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("desc", desc));
    localVarQueryParameterBaseName = "searchPattern";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchPattern", searchPattern));
    localVarQueryParameterBaseName = "useRegex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("useRegex", useRegex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get count of folders what contains in a specified folder
   * User with a Get Count permission can access this method.
   * @param id folder id (required)
   * @return CountVM
   * @throws ApiException if fails to make API call
   */
  public CountVM templateFoldersGetFoldersCount(String id) throws ApiException {
    ApiResponse<CountVM> localVarResponse = templateFoldersGetFoldersCountWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get count of folders what contains in a specified folder
   * User with a Get Count permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;CountVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CountVM> templateFoldersGetFoldersCountWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersGetFoldersCountRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersGetFoldersCount", localVarResponse);
        }
        return new ApiResponse<CountVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CountVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersGetFoldersCountRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFoldersGetFoldersCount");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/CountFolders"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get specified folder
   * User with a Get Entity permission can access this method.
   * @param name folder name (optional)
   * @param subscriptionId subscriptionId (optional)
   * @param parentId parent folder id (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM templateFoldersGetOrCreate(String name, String subscriptionId, String parentId) throws ApiException {
    ApiResponse<FileVM> localVarResponse = templateFoldersGetOrCreateWithHttpInfo(name, subscriptionId, parentId);
    return localVarResponse.getData();
  }

  /**
   * Get specified folder
   * User with a Get Entity permission can access this method.
   * @param name folder name (optional)
   * @param subscriptionId subscriptionId (optional)
   * @param parentId parent folder id (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> templateFoldersGetOrCreateWithHttpInfo(String name, String subscriptionId, String parentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersGetOrCreateRequestBuilder(name, subscriptionId, parentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersGetOrCreate", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersGetOrCreateRequestBuilder(String name, String subscriptionId, String parentId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/getOrCreate";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "name";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("name", name));
    localVarQueryParameterBaseName = "subscriptionId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subscriptionId", subscriptionId));
    localVarQueryParameterBaseName = "parentId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("parentId", parentId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all folder permissions
   * 
   * @param id  (required)
   * @return FilePermissionsVM
   * @throws ApiException if fails to make API call
   */
  public FilePermissionsVM templateFoldersGetPermissions(String id) throws ApiException {
    ApiResponse<FilePermissionsVM> localVarResponse = templateFoldersGetPermissionsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get all folder permissions
   * 
   * @param id  (required)
   * @return ApiResponse&lt;FilePermissionsVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FilePermissionsVM> templateFoldersGetPermissionsWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersGetPermissionsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersGetPermissions", localVarResponse);
        }
        return new ApiResponse<FilePermissionsVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FilePermissionsVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersGetPermissionsRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFoldersGetPermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/permissions"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get user&#39;s root folder (without parents)
   * &gt; Breakchange. Now user model doesn&#39;t contain a root folders.  This method can return error 400 and 404 when subscription is not found.
   * @param subscriptionId  (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM templateFoldersGetRootFolder(String subscriptionId) throws ApiException {
    ApiResponse<FileVM> localVarResponse = templateFoldersGetRootFolderWithHttpInfo(subscriptionId);
    return localVarResponse.getData();
  }

  /**
   * Get user&#39;s root folder (without parents)
   * &gt; Breakchange. Now user model doesn&#39;t contain a root folders.  This method can return error 400 and 404 when subscription is not found.
   * @param subscriptionId  (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> templateFoldersGetRootFolderWithHttpInfo(String subscriptionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersGetRootFolderRequestBuilder(subscriptionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersGetRootFolder", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersGetRootFolderRequestBuilder(String subscriptionId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Root";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "subscriptionId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subscriptionId", subscriptionId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move folder to a specified folder
   * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
   * @param id moving folder id (required)
   * @param folderId destination folder id (required)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM templateFoldersMoveFolder(String id, String folderId) throws ApiException {
    ApiResponse<FileVM> localVarResponse = templateFoldersMoveFolderWithHttpInfo(id, folderId);
    return localVarResponse.getData();
  }

  /**
   * Move folder to a specified folder
   * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
   * @param id moving folder id (required)
   * @param folderId destination folder id (required)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> templateFoldersMoveFolderWithHttpInfo(String id, String folderId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersMoveFolderRequestBuilder(id, folderId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersMoveFolder", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersMoveFolderRequestBuilder(String id, String folderId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFoldersMoveFolder");
    }
    // verify the required parameter 'folderId' is set
    if (folderId == null) {
      throw new ApiException(400, "Missing the required parameter 'folderId' when calling templateFoldersMoveFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/Move/{folderId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{folderId}", ApiClient.urlEncode(folderId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move specified folder to recycle bin
   * User with a Delete Entity permission can access this method.
   * @param id folder id (required)
   * @throws ApiException if fails to make API call
   */
  public void templateFoldersMoveFolderToBin(String id) throws ApiException {
    templateFoldersMoveFolderToBinWithHttpInfo(id);
  }

  /**
   * Move specified folder to recycle bin
   * User with a Delete Entity permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> templateFoldersMoveFolderToBinWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersMoveFolderToBinRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersMoveFolderToBin", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersMoveFolderToBinRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFoldersMoveFolderToBin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/ToBin"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create folder
   * User with a Create Entity permisison can access this method.
   * @param id Identifier of parent folder id (required)
   * @param templateFolderCreateVM create VM (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM templateFoldersPostFolder(String id, TemplateFolderCreateVM templateFolderCreateVM) throws ApiException {
    ApiResponse<FileVM> localVarResponse = templateFoldersPostFolderWithHttpInfo(id, templateFolderCreateVM);
    return localVarResponse.getData();
  }

  /**
   * Create folder
   * User with a Create Entity permisison can access this method.
   * @param id Identifier of parent folder id (required)
   * @param templateFolderCreateVM create VM (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> templateFoldersPostFolderWithHttpInfo(String id, TemplateFolderCreateVM templateFolderCreateVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersPostFolderRequestBuilder(id, templateFolderCreateVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersPostFolder", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersPostFolderRequestBuilder(String id, TemplateFolderCreateVM templateFolderCreateVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFoldersPostFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/Folder"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(templateFolderCreateVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Prepare specified template folder to report folder
   * User with Execute Prepare permission on report and  Create Entity on a prepared report folder can access this method.
   * @param id template id (required)
   * @param prepareTemplateVM Template folder prepare view model (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM templateFoldersPrepare(String id, PrepareTemplateVM prepareTemplateVM) throws ApiException {
    ApiResponse<FileVM> localVarResponse = templateFoldersPrepareWithHttpInfo(id, prepareTemplateVM);
    return localVarResponse.getData();
  }

  /**
   * Prepare specified template folder to report folder
   * User with Execute Prepare permission on report and  Create Entity on a prepared report folder can access this method.
   * @param id template id (required)
   * @param prepareTemplateVM Template folder prepare view model (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> templateFoldersPrepareWithHttpInfo(String id, PrepareTemplateVM prepareTemplateVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersPrepareRequestBuilder(id, prepareTemplateVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersPrepare", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersPrepareRequestBuilder(String id, PrepareTemplateVM prepareTemplateVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFoldersPrepare");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/Prepare"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(prepareTemplateVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Recover specified folder
   * User with a Delete Entity permission can access this method.
   * @param id folder id (required)
   * @param recoveryPath  (optional)
   * @throws ApiException if fails to make API call
   */
  public void templateFoldersRecoverFolder(String id, String recoveryPath) throws ApiException {
    templateFoldersRecoverFolderWithHttpInfo(id, recoveryPath);
  }

  /**
   * Recover specified folder
   * User with a Delete Entity permission can access this method.
   * @param id folder id (required)
   * @param recoveryPath  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> templateFoldersRecoverFolderWithHttpInfo(String id, String recoveryPath) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersRecoverFolderRequestBuilder(id, recoveryPath);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersRecoverFolder", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersRecoverFolderRequestBuilder(String id, String recoveryPath) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFoldersRecoverFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/Recover"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "recoveryPath";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("recoveryPath", recoveryPath));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Rename a folder
   * User with a Update Name permision can access this method.
   * @param id  (required)
   * @param folderRenameVM  (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM templateFoldersRenameFolder(String id, FolderRenameVM folderRenameVM) throws ApiException {
    ApiResponse<FileVM> localVarResponse = templateFoldersRenameFolderWithHttpInfo(id, folderRenameVM);
    return localVarResponse.getData();
  }

  /**
   * Rename a folder
   * User with a Update Name permision can access this method.
   * @param id  (required)
   * @param folderRenameVM  (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> templateFoldersRenameFolderWithHttpInfo(String id, FolderRenameVM folderRenameVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersRenameFolderRequestBuilder(id, folderRenameVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersRenameFolder", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersRenameFolderRequestBuilder(String id, FolderRenameVM folderRenameVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFoldersRenameFolder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/Rename"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(folderRenameVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a folder&#39;s icon
   * User with a Update Icon permission can access this method.
   * @param id Identifier of folder (required)
   * @param folderIconVM Update icon model (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM templateFoldersUpdateIcon(String id, FolderIconVM folderIconVM) throws ApiException {
    ApiResponse<FileVM> localVarResponse = templateFoldersUpdateIconWithHttpInfo(id, folderIconVM);
    return localVarResponse.getData();
  }

  /**
   * Update a folder&#39;s icon
   * User with a Update Icon permission can access this method.
   * @param id Identifier of folder (required)
   * @param folderIconVM Update icon model (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> templateFoldersUpdateIconWithHttpInfo(String id, FolderIconVM folderIconVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersUpdateIconRequestBuilder(id, folderIconVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersUpdateIcon", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersUpdateIconRequestBuilder(String id, FolderIconVM folderIconVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFoldersUpdateIcon");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/Icon"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(folderIconVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update permissions
   * 
   * @param id  (required)
   * @param updateFilePermissionsVM  (optional)
   * @throws ApiException if fails to make API call
   */
  public void templateFoldersUpdatePermissions(String id, UpdateFilePermissionsVM updateFilePermissionsVM) throws ApiException {
    templateFoldersUpdatePermissionsWithHttpInfo(id, updateFilePermissionsVM);
  }

  /**
   * Update permissions
   * 
   * @param id  (required)
   * @param updateFilePermissionsVM  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> templateFoldersUpdatePermissionsWithHttpInfo(String id, UpdateFilePermissionsVM updateFilePermissionsVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersUpdatePermissionsRequestBuilder(id, updateFilePermissionsVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersUpdatePermissions", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersUpdatePermissionsRequestBuilder(String id, UpdateFilePermissionsVM updateFilePermissionsVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFoldersUpdatePermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/{id}/permissions"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateFilePermissionsVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update tags
   * User with a Update Tags permission can access this method.
   * @param id  (required)
   * @param folderTagsUpdateVM  (optional)
   * @return FileVM
   * @throws ApiException if fails to make API call
   */
  public FileVM templateFoldersUpdateTags(String id, FolderTagsUpdateVM folderTagsUpdateVM) throws ApiException {
    ApiResponse<FileVM> localVarResponse = templateFoldersUpdateTagsWithHttpInfo(id, folderTagsUpdateVM);
    return localVarResponse.getData();
  }

  /**
   * Update tags
   * User with a Update Tags permission can access this method.
   * @param id  (required)
   * @param folderTagsUpdateVM  (optional)
   * @return ApiResponse&lt;FileVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FileVM> templateFoldersUpdateTagsWithHttpInfo(String id, FolderTagsUpdateVM folderTagsUpdateVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templateFoldersUpdateTagsRequestBuilder(id, folderTagsUpdateVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templateFoldersUpdateTags", localVarResponse);
        }
        return new ApiResponse<FileVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FileVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templateFoldersUpdateTagsRequestBuilder(String id, FolderTagsUpdateVM folderTagsUpdateVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templateFoldersUpdateTags");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/UpdateTags"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(folderTagsUpdateVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Copy file to a specified folder
   * 
   * @param id file id (required)
   * @param folderId folder id (required)
   * @return TemplateVM
   * @throws ApiException if fails to make API call
   */
  public TemplateVM templatesCopyFile(String id, String folderId) throws ApiException {
    ApiResponse<TemplateVM> localVarResponse = templatesCopyFileWithHttpInfo(id, folderId);
    return localVarResponse.getData();
  }

  /**
   * Copy file to a specified folder
   * 
   * @param id file id (required)
   * @param folderId folder id (required)
   * @return ApiResponse&lt;TemplateVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TemplateVM> templatesCopyFileWithHttpInfo(String id, String folderId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesCopyFileRequestBuilder(id, folderId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesCopyFile", localVarResponse);
        }
        return new ApiResponse<TemplateVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TemplateVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesCopyFileRequestBuilder(String id, String folderId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesCopyFile");
    }
    // verify the required parameter 'folderId' is set
    if (folderId == null) {
      throw new ApiException(400, "Missing the required parameter 'folderId' when calling templatesCopyFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/File/{id}/Copy/{folderId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{folderId}", ApiClient.urlEncode(folderId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete specified file
   * User with Delete permission can access the method.
   * @param id file id (required)
   * @throws ApiException if fails to make API call
   */
  public void templatesDeleteFile(String id) throws ApiException {
    templatesDeleteFileWithHttpInfo(id);
  }

  /**
   * Delete specified file
   * User with Delete permission can access the method.
   * @param id file id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> templatesDeleteFileWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesDeleteFileRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesDeleteFile", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesDeleteFileRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesDeleteFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/File/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Export specified report template to a specified format
   * User with Execute Export permission on prepared report and  Create Entity on an export folder can access this method.
   * @param id template id (required)
   * @param exportTemplateVM export parameters (string only) (optional)
   * @return ExportVM
   * @throws ApiException if fails to make API call
   */
  public ExportVM templatesExport(String id, ExportTemplateVM exportTemplateVM) throws ApiException {
    ApiResponse<ExportVM> localVarResponse = templatesExportWithHttpInfo(id, exportTemplateVM);
    return localVarResponse.getData();
  }

  /**
   * Export specified report template to a specified format
   * User with Execute Export permission on prepared report and  Create Entity on an export folder can access this method.
   * @param id template id (required)
   * @param exportTemplateVM export parameters (string only) (optional)
   * @return ApiResponse&lt;ExportVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExportVM> templatesExportWithHttpInfo(String id, ExportTemplateVM exportTemplateVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesExportRequestBuilder(id, exportTemplateVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesExport", localVarResponse);
        }
        return new ApiResponse<ExportVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExportVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesExportRequestBuilder(String id, ExportTemplateVM exportTemplateVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesExport");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/File/{id}/Export"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(exportTemplateVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get specified file
   * User with Get Entity permission can access this method.
   * @param id file id (required)
   * @return TemplateVM
   * @throws ApiException if fails to make API call
   */
  public TemplateVM templatesGetFile(String id) throws ApiException {
    ApiResponse<TemplateVM> localVarResponse = templatesGetFileWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get specified file
   * User with Get Entity permission can access this method.
   * @param id file id (required)
   * @return ApiResponse&lt;TemplateVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TemplateVM> templatesGetFileWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesGetFileRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesGetFile", localVarResponse);
        }
        return new ApiResponse<TemplateVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TemplateVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesGetFileRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesGetFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/File/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Returns list of actions, performed on this file
   * 
   * @param id  (required)
   * @param skip  (optional, default to 0)
   * @param take  (optional, default to 10)
   * @return AuditActionsVM
   * @throws ApiException if fails to make API call
   */
  public AuditActionsVM templatesGetFileHistory(String id, Integer skip, Integer take) throws ApiException {
    ApiResponse<AuditActionsVM> localVarResponse = templatesGetFileHistoryWithHttpInfo(id, skip, take);
    return localVarResponse.getData();
  }

  /**
   * Returns list of actions, performed on this file
   * 
   * @param id  (required)
   * @param skip  (optional, default to 0)
   * @param take  (optional, default to 10)
   * @return ApiResponse&lt;AuditActionsVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AuditActionsVM> templatesGetFileHistoryWithHttpInfo(String id, Integer skip, Integer take) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesGetFileHistoryRequestBuilder(id, skip, take);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesGetFileHistory", localVarResponse);
        }
        return new ApiResponse<AuditActionsVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AuditActionsVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesGetFileHistoryRequestBuilder(String id, Integer skip, Integer take) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesGetFileHistory");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/File/{id}/History"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get count of files what contains in a specified folder
   * User with Get Count permission can access this method.
   * @param id folder id (required)
   * @return CountVM
   * @throws ApiException if fails to make API call
   */
  public CountVM templatesGetFilesCount(String id) throws ApiException {
    ApiResponse<CountVM> localVarResponse = templatesGetFilesCountWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get count of files what contains in a specified folder
   * User with Get Count permission can access this method.
   * @param id folder id (required)
   * @return ApiResponse&lt;CountVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CountVM> templatesGetFilesCountWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesGetFilesCountRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesGetFilesCount", localVarResponse);
        }
        return new ApiResponse<CountVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CountVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesGetFilesCountRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesGetFilesCount");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/CountFiles"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all files from specified folder. &lt;br /&gt;  User with Get Entity permission can access this method. &lt;br /&gt;  The method will returns minimal infomration about the file: &lt;br /&gt;  id, name, size, editedTime, createdTime, tags, status, statusReason.
   * 
   * @param id folder id (required)
   * @param skip number of files, that have to be skipped (optional, default to 0)
   * @param take number of files, that have to be returned (optional, default to 10)
   * @param searchPattern  (optional)
   * @param orderBy  (optional)
   * @param desc  (optional, default to false)
   * @param useRegex  (optional, default to false)
   * @return TemplatesVM
   * @throws ApiException if fails to make API call
   */
  public TemplatesVM templatesGetFilesList(String id, Integer skip, Integer take, String searchPattern, FileSorting orderBy, Boolean desc, Boolean useRegex) throws ApiException {
    ApiResponse<TemplatesVM> localVarResponse = templatesGetFilesListWithHttpInfo(id, skip, take, searchPattern, orderBy, desc, useRegex);
    return localVarResponse.getData();
  }

  /**
   * Get all files from specified folder. &lt;br /&gt;  User with Get Entity permission can access this method. &lt;br /&gt;  The method will returns minimal infomration about the file: &lt;br /&gt;  id, name, size, editedTime, createdTime, tags, status, statusReason.
   * 
   * @param id folder id (required)
   * @param skip number of files, that have to be skipped (optional, default to 0)
   * @param take number of files, that have to be returned (optional, default to 10)
   * @param searchPattern  (optional)
   * @param orderBy  (optional)
   * @param desc  (optional, default to false)
   * @param useRegex  (optional, default to false)
   * @return ApiResponse&lt;TemplatesVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TemplatesVM> templatesGetFilesListWithHttpInfo(String id, Integer skip, Integer take, String searchPattern, FileSorting orderBy, Boolean desc, Boolean useRegex) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesGetFilesListRequestBuilder(id, skip, take, searchPattern, orderBy, desc, useRegex);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesGetFilesList", localVarResponse);
        }
        return new ApiResponse<TemplatesVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TemplatesVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesGetFilesListRequestBuilder(String id, Integer skip, Integer take, String searchPattern, FileSorting orderBy, Boolean desc, Boolean useRegex) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesGetFilesList");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/ListFiles"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));
    localVarQueryParameterBaseName = "searchPattern";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchPattern", searchPattern));
    localVarQueryParameterBaseName = "orderBy";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderBy", orderBy));
    localVarQueryParameterBaseName = "desc";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("desc", desc));
    localVarQueryParameterBaseName = "useRegex";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("useRegex", useRegex));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all file permissions
   * 
   * @param id  (required)
   * @return FilePermissionsVM
   * @throws ApiException if fails to make API call
   */
  public FilePermissionsVM templatesGetPermissions(String id) throws ApiException {
    ApiResponse<FilePermissionsVM> localVarResponse = templatesGetPermissionsWithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Get all file permissions
   * 
   * @param id  (required)
   * @return ApiResponse&lt;FilePermissionsVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<FilePermissionsVM> templatesGetPermissionsWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesGetPermissionsRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesGetPermissions", localVarResponse);
        }
        return new ApiResponse<FilePermissionsVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<FilePermissionsVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesGetPermissionsRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesGetPermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/File/{id}/permissions"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move file to a specified folder
   * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
   * @param id file id (required)
   * @param folderId folder id (required)
   * @return TemplateVM
   * @throws ApiException if fails to make API call
   */
  public TemplateVM templatesMoveFile(String id, String folderId) throws ApiException {
    ApiResponse<TemplateVM> localVarResponse = templatesMoveFileWithHttpInfo(id, folderId);
    return localVarResponse.getData();
  }

  /**
   * Move file to a specified folder
   * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
   * @param id file id (required)
   * @param folderId folder id (required)
   * @return ApiResponse&lt;TemplateVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TemplateVM> templatesMoveFileWithHttpInfo(String id, String folderId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesMoveFileRequestBuilder(id, folderId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesMoveFile", localVarResponse);
        }
        return new ApiResponse<TemplateVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TemplateVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesMoveFileRequestBuilder(String id, String folderId) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesMoveFile");
    }
    // verify the required parameter 'folderId' is set
    if (folderId == null) {
      throw new ApiException(400, "Missing the required parameter 'folderId' when calling templatesMoveFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/File/{id}/Move/{folderId}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{folderId}", ApiClient.urlEncode(folderId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Move specified file to recycle bin
   * User with Delete permission can access the method.
   * @param id file id (required)
   * @throws ApiException if fails to make API call
   */
  public void templatesMoveFileToBin(String id) throws ApiException {
    templatesMoveFileToBinWithHttpInfo(id);
  }

  /**
   * Move specified file to recycle bin
   * User with Delete permission can access the method.
   * @param id file id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> templatesMoveFileToBinWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesMoveFileToBinRequestBuilder(id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesMoveFileToBin", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesMoveFileToBinRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesMoveFileToBin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/File/{id}/ToBin"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Prepare specified template to report
   * User with Execute Prepare permission on report and  Create Entity on a prepared report folder can access this method.
   * @param id template id (required)
   * @param prepareTemplateVM Template prepare view model (optional)
   * @return ReportVM
   * @throws ApiException if fails to make API call
   */
  public ReportVM templatesPrepare(String id, PrepareTemplateVM prepareTemplateVM) throws ApiException {
    ApiResponse<ReportVM> localVarResponse = templatesPrepareWithHttpInfo(id, prepareTemplateVM);
    return localVarResponse.getData();
  }

  /**
   * Prepare specified template to report
   * User with Execute Prepare permission on report and  Create Entity on a prepared report folder can access this method.
   * @param id template id (required)
   * @param prepareTemplateVM Template prepare view model (optional)
   * @return ApiResponse&lt;ReportVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ReportVM> templatesPrepareWithHttpInfo(String id, PrepareTemplateVM prepareTemplateVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesPrepareRequestBuilder(id, prepareTemplateVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesPrepare", localVarResponse);
        }
        return new ApiResponse<ReportVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ReportVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesPrepareRequestBuilder(String id, PrepareTemplateVM prepareTemplateVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesPrepare");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/File/{id}/Prepare"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(prepareTemplateVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Recover specified file from bin
   * User with Delete permission can access the method.
   * @param id file id (required)
   * @param recoveryPath  (optional)
   * @throws ApiException if fails to make API call
   */
  public void templatesRecoverFile(String id, String recoveryPath) throws ApiException {
    templatesRecoverFileWithHttpInfo(id, recoveryPath);
  }

  /**
   * Recover specified file from bin
   * User with Delete permission can access the method.
   * @param id file id (required)
   * @param recoveryPath  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> templatesRecoverFileWithHttpInfo(String id, String recoveryPath) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesRecoverFileRequestBuilder(id, recoveryPath);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesRecoverFile", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesRecoverFileRequestBuilder(String id, String recoveryPath) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesRecoverFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/File/{id}/Recover"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "recoveryPath";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("recoveryPath", recoveryPath));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Rename a file
   * User with Update Name permission can access this method.
   * @param id  (required)
   * @param fileRenameVM  (optional)
   * @return TemplateVM
   * @throws ApiException if fails to make API call
   */
  public TemplateVM templatesRenameFile(String id, FileRenameVM fileRenameVM) throws ApiException {
    ApiResponse<TemplateVM> localVarResponse = templatesRenameFileWithHttpInfo(id, fileRenameVM);
    return localVarResponse.getData();
  }

  /**
   * Rename a file
   * User with Update Name permission can access this method.
   * @param id  (required)
   * @param fileRenameVM  (optional)
   * @return ApiResponse&lt;TemplateVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TemplateVM> templatesRenameFileWithHttpInfo(String id, FileRenameVM fileRenameVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesRenameFileRequestBuilder(id, fileRenameVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesRenameFile", localVarResponse);
        }
        return new ApiResponse<TemplateVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TemplateVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesRenameFileRequestBuilder(String id, FileRenameVM fileRenameVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesRenameFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/File/{id}/Rename"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(fileRenameVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Make preview for the report.  Generate a new or return exist prepared svg files.  If template was changed will be returned a new.  Pass the &#x60;&#x60; parameter to check prepared timestamp
   * 
   * @param id template id (required)
   * @param previewTemplateVM Model with parameters (optional)
   * @return ExportVM
   * @throws ApiException if fails to make API call
   */
  public ExportVM templatesStaticPreview(String id, PreviewTemplateVM previewTemplateVM) throws ApiException {
    ApiResponse<ExportVM> localVarResponse = templatesStaticPreviewWithHttpInfo(id, previewTemplateVM);
    return localVarResponse.getData();
  }

  /**
   * Make preview for the report.  Generate a new or return exist prepared svg files.  If template was changed will be returned a new.  Pass the &#x60;&#x60; parameter to check prepared timestamp
   * 
   * @param id template id (required)
   * @param previewTemplateVM Model with parameters (optional)
   * @return ApiResponse&lt;ExportVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ExportVM> templatesStaticPreviewWithHttpInfo(String id, PreviewTemplateVM previewTemplateVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesStaticPreviewRequestBuilder(id, previewTemplateVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesStaticPreview", localVarResponse);
        }
        return new ApiResponse<ExportVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ExportVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesStaticPreviewRequestBuilder(String id, PreviewTemplateVM previewTemplateVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesStaticPreview");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/File/{id}/StaticPreview"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(previewTemplateVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates contnet of the template. The method is deprecated, use the UpdateContentV2 method instead!
   * 
   * @param id template id (required)
   * @param updateFileContentVM VM with only byte[] with new content (optional)
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public void templatesUpdateContent(String id, UpdateFileContentVM updateFileContentVM) throws ApiException {
    templatesUpdateContentWithHttpInfo(id, updateFileContentVM);
  }

  /**
   * Updates contnet of the template. The method is deprecated, use the UpdateContentV2 method instead!
   * 
   * @param id template id (required)
   * @param updateFileContentVM VM with only byte[] with new content (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<Void> templatesUpdateContentWithHttpInfo(String id, UpdateFileContentVM updateFileContentVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesUpdateContentRequestBuilder(id, updateFileContentVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesUpdateContent", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesUpdateContentRequestBuilder(String id, UpdateFileContentVM updateFileContentVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesUpdateContent");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/File/{id}/Content"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateFileContentVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Updates contnet of the template.
   * 
   * @param id template id (required)
   * @param fileContent  (required)
   * @throws ApiException if fails to make API call
   */
  public void templatesUpdateContentV2(String id, File fileContent) throws ApiException {
    templatesUpdateContentV2WithHttpInfo(id, fileContent);
  }

  /**
   * Updates contnet of the template.
   * 
   * @param id template id (required)
   * @param fileContent  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> templatesUpdateContentV2WithHttpInfo(String id, File fileContent) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesUpdateContentV2RequestBuilder(id, fileContent);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesUpdateContentV2", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesUpdateContentV2RequestBuilder(String id, File fileContent) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesUpdateContentV2");
    }
    // verify the required parameter 'fileContent' is set
    if (fileContent == null) {
      throw new ApiException(400, "Missing the required parameter 'fileContent' when calling templatesUpdateContentV2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v2/Templates/File/{id}/Content"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    MultipartEntityBuilder multiPartBuilder = MultipartEntityBuilder.create();
    boolean hasFiles = false;
    multiPartBuilder.addBinaryBody("FileContent", fileContent);
    hasFiles = true;
    HttpEntity entity = multiPartBuilder.build();
    HttpRequest.BodyPublisher formDataPublisher;
    if (hasFiles) {
        Pipe pipe;
        try {
            pipe = Pipe.open();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        new Thread(() -> {
            try (OutputStream outputStream = Channels.newOutputStream(pipe.sink())) {
                entity.writeTo(outputStream);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }).start();
        formDataPublisher = HttpRequest.BodyPublishers.ofInputStream(() -> Channels.newInputStream(pipe.source()));
    } else {
        ByteArrayOutputStream formOutputStream = new ByteArrayOutputStream();
        try {
            entity.writeTo(formOutputStream);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        formDataPublisher = HttpRequest.BodyPublishers
            .ofInputStream(() -> new ByteArrayInputStream(formOutputStream.toByteArray()));
    }
    localVarRequestBuilder
        .header("Content-Type", entity.getContentType().getValue())
        .method("PUT", formDataPublisher);
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update a files&#39;s icon
   * User with Update Icon permission can access this method.
   * @param id  (required)
   * @param fileIconVM  (optional)
   * @return TemplateVM
   * @throws ApiException if fails to make API call
   */
  public TemplateVM templatesUpdateIcon(String id, FileIconVM fileIconVM) throws ApiException {
    ApiResponse<TemplateVM> localVarResponse = templatesUpdateIconWithHttpInfo(id, fileIconVM);
    return localVarResponse.getData();
  }

  /**
   * Update a files&#39;s icon
   * User with Update Icon permission can access this method.
   * @param id  (required)
   * @param fileIconVM  (optional)
   * @return ApiResponse&lt;TemplateVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TemplateVM> templatesUpdateIconWithHttpInfo(String id, FileIconVM fileIconVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesUpdateIconRequestBuilder(id, fileIconVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesUpdateIcon", localVarResponse);
        }
        return new ApiResponse<TemplateVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TemplateVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesUpdateIconRequestBuilder(String id, FileIconVM fileIconVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesUpdateIcon");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/File/{id}/Icon"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(fileIconVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update permissions
   * 
   * @param id  (required)
   * @param updateFilePermissionsVM  (optional)
   * @throws ApiException if fails to make API call
   */
  public void templatesUpdatePermissions(String id, UpdateFilePermissionsVM updateFilePermissionsVM) throws ApiException {
    templatesUpdatePermissionsWithHttpInfo(id, updateFilePermissionsVM);
  }

  /**
   * Update permissions
   * 
   * @param id  (required)
   * @param updateFilePermissionsVM  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> templatesUpdatePermissionsWithHttpInfo(String id, UpdateFilePermissionsVM updateFilePermissionsVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesUpdatePermissionsRequestBuilder(id, updateFilePermissionsVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesUpdatePermissions", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesUpdatePermissionsRequestBuilder(String id, UpdateFilePermissionsVM updateFilePermissionsVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesUpdatePermissions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/File/{id}/permissions"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateFilePermissionsVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update tags
   * User with Update Tags permission can access this method.
   * @param id  (required)
   * @param fileTagsUpdateVM  (optional)
   * @return TemplateVM
   * @throws ApiException if fails to make API call
   */
  public TemplateVM templatesUpdateTags(String id, FileTagsUpdateVM fileTagsUpdateVM) throws ApiException {
    ApiResponse<TemplateVM> localVarResponse = templatesUpdateTagsWithHttpInfo(id, fileTagsUpdateVM);
    return localVarResponse.getData();
  }

  /**
   * Update tags
   * User with Update Tags permission can access this method.
   * @param id  (required)
   * @param fileTagsUpdateVM  (optional)
   * @return ApiResponse&lt;TemplateVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TemplateVM> templatesUpdateTagsWithHttpInfo(String id, FileTagsUpdateVM fileTagsUpdateVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesUpdateTagsRequestBuilder(id, fileTagsUpdateVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesUpdateTags", localVarResponse);
        }
        return new ApiResponse<TemplateVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TemplateVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesUpdateTagsRequestBuilder(String id, FileTagsUpdateVM fileTagsUpdateVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesUpdateTags");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/File/{id}/UpdateTags"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(fileTagsUpdateVM);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Upload a file to the specified folder. The method is deprecated, use the UploadFileV2 method instead!
   * User with Create Entity permission can access this method.
   * @param id Identifier of folder (required)
   * @param templateCreateVM file&#39;s view model (optional)
   * @return TemplateVM
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public TemplateVM templatesUploadFile(String id, TemplateCreateVM templateCreateVM) throws ApiException {
    ApiResponse<TemplateVM> localVarResponse = templatesUploadFileWithHttpInfo(id, templateCreateVM);
    return localVarResponse.getData();
  }

  /**
   * Upload a file to the specified folder. The method is deprecated, use the UploadFileV2 method instead!
   * User with Create Entity permission can access this method.
   * @param id Identifier of folder (required)
   * @param templateCreateVM file&#39;s view model (optional)
   * @return ApiResponse&lt;TemplateVM&gt;
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public ApiResponse<TemplateVM> templatesUploadFileWithHttpInfo(String id, TemplateCreateVM templateCreateVM) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesUploadFileRequestBuilder(id, templateCreateVM);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesUploadFile", localVarResponse);
        }
        return new ApiResponse<TemplateVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TemplateVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesUploadFileRequestBuilder(String id, TemplateCreateVM templateCreateVM) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesUploadFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v1/Templates/Folder/{id}/File"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(templateCreateVM);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Alternative api for upload a file to the specified folder!
   * User with Create Entity permission can access this method.
   * @param id Identifier of folder (required)
   * @param fileContent  (required)
   * @param tags  (optional
   * @param icon  (optional)
   * @return TemplateVM
   * @throws ApiException if fails to make API call
   */
  public TemplateVM templatesUploadFileV2(String id, File fileContent, List<String> tags, File icon) throws ApiException {
    ApiResponse<TemplateVM> localVarResponse = templatesUploadFileV2WithHttpInfo(id, fileContent, tags, icon);
    return localVarResponse.getData();
  }

  /**
   * Alternative api for upload a file to the specified folder!
   * User with Create Entity permission can access this method.
   * @param id Identifier of folder (required)
   * @param fileContent  (required)
   * @param tags  (optional
   * @param icon  (optional)
   * @return ApiResponse&lt;TemplateVM&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TemplateVM> templatesUploadFileV2WithHttpInfo(String id, File fileContent, List<String> tags, File icon) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = templatesUploadFileV2RequestBuilder(id, fileContent, tags, icon);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("templatesUploadFileV2", localVarResponse);
        }
        return new ApiResponse<TemplateVM>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TemplateVM>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder templatesUploadFileV2RequestBuilder(String id, File fileContent, List<String> tags, File icon) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling templatesUploadFileV2");
    }
    // verify the required parameter 'fileContent' is set
    if (fileContent == null) {
      throw new ApiException(400, "Missing the required parameter 'fileContent' when calling templatesUploadFileV2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/rp/v2/Templates/Folder/{id}/File"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    MultipartEntityBuilder multiPartBuilder = MultipartEntityBuilder.create();
    boolean hasFiles = false;
    for (int i=0; i < tags.size(); i++) {
        multiPartBuilder.addTextBody("Tags", tags.get(i).toString());
    }
    multiPartBuilder.addBinaryBody("Icon", icon);
    hasFiles = true;
    multiPartBuilder.addBinaryBody("FileContent", fileContent);
    hasFiles = true;
    HttpEntity entity = multiPartBuilder.build();
    HttpRequest.BodyPublisher formDataPublisher;
    if (hasFiles) {
        Pipe pipe;
        try {
            pipe = Pipe.open();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        new Thread(() -> {
            try (OutputStream outputStream = Channels.newOutputStream(pipe.sink())) {
                entity.writeTo(outputStream);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }).start();
        formDataPublisher = HttpRequest.BodyPublishers.ofInputStream(() -> Channels.newInputStream(pipe.source()));
    } else {
        ByteArrayOutputStream formOutputStream = new ByteArrayOutputStream();
        try {
            entity.writeTo(formOutputStream);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        formDataPublisher = HttpRequest.BodyPublishers
            .ofInputStream(() -> new ByteArrayInputStream(formOutputStream.toByteArray()));
    }
    localVarRequestBuilder
        .header("Content-Type", entity.getContentType().getValue())
        .method("POST", formDataPublisher);
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
