/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.client;

import cloud.fastreport.ApiCallback;
import cloud.fastreport.ApiClient;
import cloud.fastreport.ApiException;
import cloud.fastreport.ApiResponse;
import cloud.fastreport.Configuration;
import cloud.fastreport.Pair;
import cloud.fastreport.ProgressRequestBody;
import cloud.fastreport.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloud.fastreport.model.AuditActionsVM;
import cloud.fastreport.model.ClearNotificationsVM;
import cloud.fastreport.model.ProblemDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserNotificationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserNotificationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserNotificationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for userNotificationsClearNotifications
     * @param clearNotificationsVM  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Notifications are cleared </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad VM </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userNotificationsClearNotificationsCall(ClearNotificationsVM clearNotificationsVM, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clearNotificationsVM;

        // create path and map variables
        String localVarPath = "/api/manage/v1/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userNotificationsClearNotificationsValidateBeforeCall(ClearNotificationsVM clearNotificationsVM, final ApiCallback _callback) throws ApiException {
        return userNotificationsClearNotificationsCall(clearNotificationsVM, _callback);

    }

    /**
     * Use this endpoint to \&quot;clear\&quot; your notifications
     * 
     * @param clearNotificationsVM  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Notifications are cleared </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad VM </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User is not found </td><td>  -  </td></tr>
     </table>
     */
    public void userNotificationsClearNotifications(ClearNotificationsVM clearNotificationsVM) throws ApiException {
        userNotificationsClearNotificationsWithHttpInfo(clearNotificationsVM);
    }

    /**
     * Use this endpoint to \&quot;clear\&quot; your notifications
     * 
     * @param clearNotificationsVM  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Notifications are cleared </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad VM </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User is not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userNotificationsClearNotificationsWithHttpInfo(ClearNotificationsVM clearNotificationsVM) throws ApiException {
        okhttp3.Call localVarCall = userNotificationsClearNotificationsValidateBeforeCall(clearNotificationsVM, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Use this endpoint to \&quot;clear\&quot; your notifications (asynchronously)
     * 
     * @param clearNotificationsVM  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Notifications are cleared </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad VM </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User is not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userNotificationsClearNotificationsAsync(ClearNotificationsVM clearNotificationsVM, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userNotificationsClearNotificationsValidateBeforeCall(clearNotificationsVM, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userNotificationsGetNotifications
     * @param skip  (optional, default to 0)
     * @param take  (optional, default to 5)
     * @param subscriptionId  (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notifications are getted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userNotificationsGetNotificationsCall(Integer skip, Integer take, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/manage/v1/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        if (subscriptionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscriptionId", subscriptionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userNotificationsGetNotificationsValidateBeforeCall(Integer skip, Integer take, String subscriptionId, final ApiCallback _callback) throws ApiException {
        return userNotificationsGetNotificationsCall(skip, take, subscriptionId, _callback);

    }

    /**
     * Use this endpoint to recieve notifications
     * 
     * @param skip  (optional, default to 0)
     * @param take  (optional, default to 5)
     * @param subscriptionId  (optional, default to )
     * @return AuditActionsVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notifications are getted </td><td>  -  </td></tr>
     </table>
     */
    public AuditActionsVM userNotificationsGetNotifications(Integer skip, Integer take, String subscriptionId) throws ApiException {
        ApiResponse<AuditActionsVM> localVarResp = userNotificationsGetNotificationsWithHttpInfo(skip, take, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Use this endpoint to recieve notifications
     * 
     * @param skip  (optional, default to 0)
     * @param take  (optional, default to 5)
     * @param subscriptionId  (optional, default to )
     * @return ApiResponse&lt;AuditActionsVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notifications are getted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuditActionsVM> userNotificationsGetNotificationsWithHttpInfo(Integer skip, Integer take, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = userNotificationsGetNotificationsValidateBeforeCall(skip, take, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AuditActionsVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Use this endpoint to recieve notifications (asynchronously)
     * 
     * @param skip  (optional, default to 0)
     * @param take  (optional, default to 5)
     * @param subscriptionId  (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notifications are getted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userNotificationsGetNotificationsAsync(Integer skip, Integer take, String subscriptionId, final ApiCallback<AuditActionsVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = userNotificationsGetNotificationsValidateBeforeCall(skip, take, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AuditActionsVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
