/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.model;

import java.util.Objects;
import java.util.Arrays;
import cloud.fastreport.model.BreadcrumbsModel;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * BreadcrumbsVM
 */
@JsonPropertyOrder({
  BreadcrumbsVM.JSON_PROPERTY_BREADCRUMBS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BreadcrumbsVM {
  public static final String JSON_PROPERTY_BREADCRUMBS = "breadcrumbs";
  private JsonNullable<List<BreadcrumbsModel>> breadcrumbs = JsonNullable.<List<BreadcrumbsModel>>undefined();

  public BreadcrumbsVM() {
  }

  public BreadcrumbsVM breadcrumbs(List<BreadcrumbsModel> breadcrumbs) {
    this.breadcrumbs = JsonNullable.<List<BreadcrumbsModel>>of(breadcrumbs);
    
    return this;
  }

  public BreadcrumbsVM addBreadcrumbsItem(BreadcrumbsModel breadcrumbsItem) {
    if (this.breadcrumbs == null || !this.breadcrumbs.isPresent()) {
      this.breadcrumbs = JsonNullable.<List<BreadcrumbsModel>>of(new ArrayList<>());
    }
    try {
      this.breadcrumbs.get().add(breadcrumbsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Get breadcrumbs
   * @return breadcrumbs
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public List<BreadcrumbsModel> getBreadcrumbs() {
        return breadcrumbs.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BREADCRUMBS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<BreadcrumbsModel>> getBreadcrumbs_JsonNullable() {
    return breadcrumbs;
  }
  
  @JsonProperty(JSON_PROPERTY_BREADCRUMBS)
  public void setBreadcrumbs_JsonNullable(JsonNullable<List<BreadcrumbsModel>> breadcrumbs) {
    this.breadcrumbs = breadcrumbs;
  }

  public void setBreadcrumbs(List<BreadcrumbsModel> breadcrumbs) {
    this.breadcrumbs = JsonNullable.<List<BreadcrumbsModel>>of(breadcrumbs);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BreadcrumbsVM breadcrumbsVM = (BreadcrumbsVM) o;
    return equalsNullable(this.breadcrumbs, breadcrumbsVM.breadcrumbs);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(breadcrumbs));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BreadcrumbsVM {\n");
    sb.append("    breadcrumbs: ").append(toIndentedString(breadcrumbs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

