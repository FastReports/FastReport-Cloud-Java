/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * CreateSubscriptionInviteVM
 */
@JsonPropertyOrder({
  CreateSubscriptionInviteVM.JSON_PROPERTY_USAGES,
  CreateSubscriptionInviteVM.JSON_PROPERTY_DURABLE,
  CreateSubscriptionInviteVM.JSON_PROPERTY_EXPIRED_DATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateSubscriptionInviteVM {
  public static final String JSON_PROPERTY_USAGES = "usages";
  private Long usages;

  public static final String JSON_PROPERTY_DURABLE = "durable";
  private Boolean durable;

  public static final String JSON_PROPERTY_EXPIRED_DATE = "expiredDate";
  private OffsetDateTime expiredDate;

  public CreateSubscriptionInviteVM() { 
  }

  public CreateSubscriptionInviteVM usages(Long usages) {
    this.usages = usages;
    return this;
  }

   /**
   * Get usages
   * minimum: 0
   * maximum: 2147483647
   * @return usages
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getUsages() {
    return usages;
  }


  @JsonProperty(JSON_PROPERTY_USAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsages(Long usages) {
    this.usages = usages;
  }


  public CreateSubscriptionInviteVM durable(Boolean durable) {
    this.durable = durable;
    return this;
  }

   /**
   * Get durable
   * @return durable
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DURABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDurable() {
    return durable;
  }


  @JsonProperty(JSON_PROPERTY_DURABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDurable(Boolean durable) {
    this.durable = durable;
  }


  public CreateSubscriptionInviteVM expiredDate(OffsetDateTime expiredDate) {
    this.expiredDate = expiredDate;
    return this;
  }

   /**
   * Get expiredDate
   * @return expiredDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getExpiredDate() {
    return expiredDate;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpiredDate(OffsetDateTime expiredDate) {
    this.expiredDate = expiredDate;
  }


  /**
   * Return true if this CreateSubscriptionInviteVM object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSubscriptionInviteVM createSubscriptionInviteVM = (CreateSubscriptionInviteVM) o;
    return Objects.equals(this.usages, createSubscriptionInviteVM.usages) &&
        Objects.equals(this.durable, createSubscriptionInviteVM.durable) &&
        Objects.equals(this.expiredDate, createSubscriptionInviteVM.expiredDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(usages, durable, expiredDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSubscriptionInviteVM {\n");
    sb.append("    usages: ").append(toIndentedString(usages)).append("\n");
    sb.append("    durable: ").append(toIndentedString(durable)).append("\n");
    sb.append("    expiredDate: ").append(toIndentedString(expiredDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `usages` to the URL query string
    if (getUsages() != null) {
      joiner.add(String.format("%susages%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUsages()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `durable` to the URL query string
    if (getDurable() != null) {
      joiner.add(String.format("%sdurable%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDurable()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `expiredDate` to the URL query string
    if (getExpiredDate() != null) {
      joiner.add(String.format("%sexpiredDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpiredDate()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

