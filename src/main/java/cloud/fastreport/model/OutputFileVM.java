/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import cloud.fastreport.model.FileKind;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * OutputFileVM
 */
@JsonPropertyOrder({
  OutputFileVM.JSON_PROPERTY_FILE_NAME,
  OutputFileVM.JSON_PROPERTY_FOLDER_ID,
  OutputFileVM.JSON_PROPERTY_TYPE,
  OutputFileVM.JSON_PROPERTY_IS_TEMPORARY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OutputFileVM {
  public static final String JSON_PROPERTY_FILE_NAME = "fileName";
  private JsonNullable<String> fileName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_FOLDER_ID = "folderId";
  private JsonNullable<String> folderId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TYPE = "type";
  private FileKind type;

  public static final String JSON_PROPERTY_IS_TEMPORARY = "isTemporary";
  private Boolean isTemporary;

  public OutputFileVM() { 
  }

  public OutputFileVM fileName(String fileName) {
    this.fileName = JsonNullable.<String>of(fileName);
    return this;
  }

   /**
   * Get fileName
   * @return fileName
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getFileName() {
        return fileName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFileName_JsonNullable() {
    return fileName;
  }
  
  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  public void setFileName_JsonNullable(JsonNullable<String> fileName) {
    this.fileName = fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = JsonNullable.<String>of(fileName);
  }


  public OutputFileVM folderId(String folderId) {
    this.folderId = JsonNullable.<String>of(folderId);
    return this;
  }

   /**
   * Get folderId
   * @return folderId
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getFolderId() {
        return folderId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FOLDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFolderId_JsonNullable() {
    return folderId;
  }
  
  @JsonProperty(JSON_PROPERTY_FOLDER_ID)
  public void setFolderId_JsonNullable(JsonNullable<String> folderId) {
    this.folderId = folderId;
  }

  public void setFolderId(String folderId) {
    this.folderId = JsonNullable.<String>of(folderId);
  }


  public OutputFileVM type(FileKind type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FileKind getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(FileKind type) {
    this.type = type;
  }


  public OutputFileVM isTemporary(Boolean isTemporary) {
    this.isTemporary = isTemporary;
    return this;
  }

   /**
   * Get isTemporary
   * @return isTemporary
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_TEMPORARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsTemporary() {
    return isTemporary;
  }


  @JsonProperty(JSON_PROPERTY_IS_TEMPORARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsTemporary(Boolean isTemporary) {
    this.isTemporary = isTemporary;
  }


  /**
   * Return true if this OutputFileVM object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutputFileVM outputFileVM = (OutputFileVM) o;
    return equalsNullable(this.fileName, outputFileVM.fileName) &&
        equalsNullable(this.folderId, outputFileVM.folderId) &&
        Objects.equals(this.type, outputFileVM.type) &&
        Objects.equals(this.isTemporary, outputFileVM.isTemporary);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(fileName), hashCodeNullable(folderId), type, isTemporary);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutputFileVM {\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    isTemporary: ").append(toIndentedString(isTemporary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `fileName` to the URL query string
    if (getFileName() != null) {
      joiner.add(String.format("%sfileName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFileName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `folderId` to the URL query string
    if (getFolderId() != null) {
      joiner.add(String.format("%sfolderId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFolderId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `isTemporary` to the URL query string
    if (getIsTemporary() != null) {
      joiner.add(String.format("%sisTemporary%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsTemporary()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

