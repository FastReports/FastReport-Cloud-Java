/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.model;

import java.util.Objects;
import cloud.fastreport.model.SaveMode;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloud.fastreport.JSON;

/**
 * ReportInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReportInfo {
  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CREATOR_VERSION = "creatorVersion";
  @SerializedName(SERIALIZED_NAME_CREATOR_VERSION)
  private String creatorVersion;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PICTURE = "picture";
  @SerializedName(SERIALIZED_NAME_PICTURE)
  private byte[] picture;

  public static final String SERIALIZED_NAME_PREVIEW_PICTURE_RATIO = "previewPictureRatio";
  @SerializedName(SERIALIZED_NAME_PREVIEW_PICTURE_RATIO)
  private Float previewPictureRatio;

  public static final String SERIALIZED_NAME_SAVE_MODE = "saveMode";
  @SerializedName(SERIALIZED_NAME_SAVE_MODE)
  private SaveMode saveMode;

  public static final String SERIALIZED_NAME_SAVE_PREVIEW_PICTURE = "savePreviewPicture";
  @SerializedName(SERIALIZED_NAME_SAVE_PREVIEW_PICTURE)
  private Boolean savePreviewPicture;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public ReportInfo() {
  }

  public ReportInfo author(String author) {
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public ReportInfo created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public ReportInfo creatorVersion(String creatorVersion) {
    this.creatorVersion = creatorVersion;
    return this;
  }

   /**
   * Get creatorVersion
   * @return creatorVersion
  **/
  @javax.annotation.Nullable
  public String getCreatorVersion() {
    return creatorVersion;
  }

  public void setCreatorVersion(String creatorVersion) {
    this.creatorVersion = creatorVersion;
  }


  public ReportInfo description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ReportInfo modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

   /**
   * Get modified
   * @return modified
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public ReportInfo name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ReportInfo picture(byte[] picture) {
    this.picture = picture;
    return this;
  }

   /**
   * Get picture
   * @return picture
  **/
  @javax.annotation.Nullable
  public byte[] getPicture() {
    return picture;
  }

  public void setPicture(byte[] picture) {
    this.picture = picture;
  }


  public ReportInfo previewPictureRatio(Float previewPictureRatio) {
    this.previewPictureRatio = previewPictureRatio;
    return this;
  }

   /**
   * Get previewPictureRatio
   * @return previewPictureRatio
  **/
  @javax.annotation.Nullable
  public Float getPreviewPictureRatio() {
    return previewPictureRatio;
  }

  public void setPreviewPictureRatio(Float previewPictureRatio) {
    this.previewPictureRatio = previewPictureRatio;
  }


  public ReportInfo saveMode(SaveMode saveMode) {
    this.saveMode = saveMode;
    return this;
  }

   /**
   * Get saveMode
   * @return saveMode
  **/
  @javax.annotation.Nullable
  public SaveMode getSaveMode() {
    return saveMode;
  }

  public void setSaveMode(SaveMode saveMode) {
    this.saveMode = saveMode;
  }


  public ReportInfo savePreviewPicture(Boolean savePreviewPicture) {
    this.savePreviewPicture = savePreviewPicture;
    return this;
  }

   /**
   * Get savePreviewPicture
   * @return savePreviewPicture
  **/
  @javax.annotation.Nullable
  public Boolean getSavePreviewPicture() {
    return savePreviewPicture;
  }

  public void setSavePreviewPicture(Boolean savePreviewPicture) {
    this.savePreviewPicture = savePreviewPicture;
  }


  public ReportInfo tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * Get tag
   * @return tag
  **/
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  public ReportInfo version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportInfo reportInfo = (ReportInfo) o;
    return Objects.equals(this.author, reportInfo.author) &&
        Objects.equals(this.created, reportInfo.created) &&
        Objects.equals(this.creatorVersion, reportInfo.creatorVersion) &&
        Objects.equals(this.description, reportInfo.description) &&
        Objects.equals(this.modified, reportInfo.modified) &&
        Objects.equals(this.name, reportInfo.name) &&
        Arrays.equals(this.picture, reportInfo.picture) &&
        Objects.equals(this.previewPictureRatio, reportInfo.previewPictureRatio) &&
        Objects.equals(this.saveMode, reportInfo.saveMode) &&
        Objects.equals(this.savePreviewPicture, reportInfo.savePreviewPicture) &&
        Objects.equals(this.tag, reportInfo.tag) &&
        Objects.equals(this.version, reportInfo.version);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, created, creatorVersion, description, modified, name, Arrays.hashCode(picture), previewPictureRatio, saveMode, savePreviewPicture, tag, version);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportInfo {\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    creatorVersion: ").append(toIndentedString(creatorVersion)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    picture: ").append(toIndentedString(picture)).append("\n");
    sb.append("    previewPictureRatio: ").append(toIndentedString(previewPictureRatio)).append("\n");
    sb.append("    saveMode: ").append(toIndentedString(saveMode)).append("\n");
    sb.append("    savePreviewPicture: ").append(toIndentedString(savePreviewPicture)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("author");
    openapiFields.add("created");
    openapiFields.add("creatorVersion");
    openapiFields.add("description");
    openapiFields.add("modified");
    openapiFields.add("name");
    openapiFields.add("picture");
    openapiFields.add("previewPictureRatio");
    openapiFields.add("saveMode");
    openapiFields.add("savePreviewPicture");
    openapiFields.add("tag");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ReportInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportInfo is not found in the empty JSON string", ReportInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      if ((jsonObj.get("creatorVersion") != null && !jsonObj.get("creatorVersion").isJsonNull()) && !jsonObj.get("creatorVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorVersion").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `saveMode`
      if (jsonObj.get("saveMode") != null && !jsonObj.get("saveMode").isJsonNull()) {
        SaveMode.validateJsonElement(jsonObj.get("saveMode"));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportInfo>() {
           @Override
           public void write(JsonWriter out, ReportInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportInfo
  * @throws IOException if the JSON string is invalid with respect to ReportInfo
  */
  public static ReportInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportInfo.class);
  }

 /**
  * Convert an instance of ReportInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

