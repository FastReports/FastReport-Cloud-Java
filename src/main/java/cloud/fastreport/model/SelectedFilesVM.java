/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloud.fastreport.JSON;

/**
 * SelectedFilesVM
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SelectedFilesVM {
  public static final String SERIALIZED_NAME_IS_ALL_SELECTED = "isAllSelected";
  @SerializedName(SERIALIZED_NAME_IS_ALL_SELECTED)
  private Boolean isAllSelected;

  public static final String SERIALIZED_NAME_FOLDER_ID = "folderId";
  @SerializedName(SERIALIZED_NAME_FOLDER_ID)
  private String folderId;

  public static final String SERIALIZED_NAME_SEARCH_PATTERN = "searchPattern";
  @SerializedName(SERIALIZED_NAME_SEARCH_PATTERN)
  private String searchPattern;

  public static final String SERIALIZED_NAME_USE_REGEX = "useRegex";
  @SerializedName(SERIALIZED_NAME_USE_REGEX)
  private Boolean useRegex;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<String> files;

  public static final String SERIALIZED_NAME_FOLDERS = "folders";
  @SerializedName(SERIALIZED_NAME_FOLDERS)
  private List<String> folders;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_IS_BIN = "isBin";
  @SerializedName(SERIALIZED_NAME_IS_BIN)
  private Boolean isBin;

  public SelectedFilesVM() {
  }

  public SelectedFilesVM isAllSelected(Boolean isAllSelected) {
    this.isAllSelected = isAllSelected;
    return this;
  }

   /**
   * Get isAllSelected
   * @return isAllSelected
  **/
  @javax.annotation.Nullable
  public Boolean getIsAllSelected() {
    return isAllSelected;
  }

  public void setIsAllSelected(Boolean isAllSelected) {
    this.isAllSelected = isAllSelected;
  }


  public SelectedFilesVM folderId(String folderId) {
    this.folderId = folderId;
    return this;
  }

   /**
   * Get folderId
   * @return folderId
  **/
  @javax.annotation.Nullable
  public String getFolderId() {
    return folderId;
  }

  public void setFolderId(String folderId) {
    this.folderId = folderId;
  }


  public SelectedFilesVM searchPattern(String searchPattern) {
    this.searchPattern = searchPattern;
    return this;
  }

   /**
   * Get searchPattern
   * @return searchPattern
  **/
  @javax.annotation.Nullable
  public String getSearchPattern() {
    return searchPattern;
  }

  public void setSearchPattern(String searchPattern) {
    this.searchPattern = searchPattern;
  }


  public SelectedFilesVM useRegex(Boolean useRegex) {
    this.useRegex = useRegex;
    return this;
  }

   /**
   * Get useRegex
   * @return useRegex
  **/
  @javax.annotation.Nullable
  public Boolean getUseRegex() {
    return useRegex;
  }

  public void setUseRegex(Boolean useRegex) {
    this.useRegex = useRegex;
  }


  public SelectedFilesVM files(List<String> files) {
    this.files = files;
    return this;
  }

  public SelectedFilesVM addFilesItem(String filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

   /**
   * Get files
   * @return files
  **/
  @javax.annotation.Nullable
  public List<String> getFiles() {
    return files;
  }

  public void setFiles(List<String> files) {
    this.files = files;
  }


  public SelectedFilesVM folders(List<String> folders) {
    this.folders = folders;
    return this;
  }

  public SelectedFilesVM addFoldersItem(String foldersItem) {
    if (this.folders == null) {
      this.folders = new ArrayList<>();
    }
    this.folders.add(foldersItem);
    return this;
  }

   /**
   * Get folders
   * @return folders
  **/
  @javax.annotation.Nullable
  public List<String> getFolders() {
    return folders;
  }

  public void setFolders(List<String> folders) {
    this.folders = folders;
  }


  public SelectedFilesVM path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public SelectedFilesVM isBin(Boolean isBin) {
    this.isBin = isBin;
    return this;
  }

   /**
   * Get isBin
   * @return isBin
  **/
  @javax.annotation.Nullable
  public Boolean getIsBin() {
    return isBin;
  }

  public void setIsBin(Boolean isBin) {
    this.isBin = isBin;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SelectedFilesVM selectedFilesVM = (SelectedFilesVM) o;
    return Objects.equals(this.isAllSelected, selectedFilesVM.isAllSelected) &&
        Objects.equals(this.folderId, selectedFilesVM.folderId) &&
        Objects.equals(this.searchPattern, selectedFilesVM.searchPattern) &&
        Objects.equals(this.useRegex, selectedFilesVM.useRegex) &&
        Objects.equals(this.files, selectedFilesVM.files) &&
        Objects.equals(this.folders, selectedFilesVM.folders) &&
        Objects.equals(this.path, selectedFilesVM.path) &&
        Objects.equals(this.isBin, selectedFilesVM.isBin);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(isAllSelected, folderId, searchPattern, useRegex, files, folders, path, isBin);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SelectedFilesVM {\n");
    sb.append("    isAllSelected: ").append(toIndentedString(isAllSelected)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    searchPattern: ").append(toIndentedString(searchPattern)).append("\n");
    sb.append("    useRegex: ").append(toIndentedString(useRegex)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    folders: ").append(toIndentedString(folders)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    isBin: ").append(toIndentedString(isBin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isAllSelected");
    openapiFields.add("folderId");
    openapiFields.add("searchPattern");
    openapiFields.add("useRegex");
    openapiFields.add("files");
    openapiFields.add("folders");
    openapiFields.add("path");
    openapiFields.add("isBin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SelectedFilesVM
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SelectedFilesVM.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SelectedFilesVM is not found in the empty JSON string", SelectedFilesVM.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SelectedFilesVM.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SelectedFilesVM` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("folderId") != null && !jsonObj.get("folderId").isJsonNull()) && !jsonObj.get("folderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folderId").toString()));
      }
      if ((jsonObj.get("searchPattern") != null && !jsonObj.get("searchPattern").isJsonNull()) && !jsonObj.get("searchPattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchPattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchPattern").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull() && !jsonObj.get("files").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("folders") != null && !jsonObj.get("folders").isJsonNull() && !jsonObj.get("folders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `folders` to be an array in the JSON string but got `%s`", jsonObj.get("folders").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SelectedFilesVM.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SelectedFilesVM' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SelectedFilesVM> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SelectedFilesVM.class));

       return (TypeAdapter<T>) new TypeAdapter<SelectedFilesVM>() {
           @Override
           public void write(JsonWriter out, SelectedFilesVM value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SelectedFilesVM read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             // comment by Detrav, do not need to validate JSON while parse
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SelectedFilesVM given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SelectedFilesVM
  * @throws IOException if the JSON string is invalid with respect to SelectedFilesVM
  */
  public static SelectedFilesVM fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SelectedFilesVM.class);
  }

 /**
  * Convert an instance of SelectedFilesVM to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

