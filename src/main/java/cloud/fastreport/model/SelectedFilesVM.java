/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SelectedFilesVM
 */
@JsonPropertyOrder({
  SelectedFilesVM.JSON_PROPERTY_IS_ALL_SELECTED,
  SelectedFilesVM.JSON_PROPERTY_FOLDER_ID,
  SelectedFilesVM.JSON_PROPERTY_SEARCH_PATTERN,
  SelectedFilesVM.JSON_PROPERTY_USE_REGEX,
  SelectedFilesVM.JSON_PROPERTY_FILES,
  SelectedFilesVM.JSON_PROPERTY_FOLDERS,
  SelectedFilesVM.JSON_PROPERTY_PATH,
  SelectedFilesVM.JSON_PROPERTY_IS_BIN
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SelectedFilesVM {
  public static final String JSON_PROPERTY_IS_ALL_SELECTED = "isAllSelected";
  private Boolean isAllSelected;

  public static final String JSON_PROPERTY_FOLDER_ID = "folderId";
  private JsonNullable<String> folderId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_SEARCH_PATTERN = "searchPattern";
  private JsonNullable<String> searchPattern = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_USE_REGEX = "useRegex";
  private Boolean useRegex;

  public static final String JSON_PROPERTY_FILES = "files";
  private JsonNullable<List<String>> files = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_FOLDERS = "folders";
  private JsonNullable<List<String>> folders = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_PATH = "path";
  private JsonNullable<String> path = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_IS_BIN = "isBin";
  private Boolean isBin;

  public SelectedFilesVM() {
  }

  public SelectedFilesVM isAllSelected(Boolean isAllSelected) {
    
    this.isAllSelected = isAllSelected;
    return this;
  }

   /**
   * Get isAllSelected
   * @return isAllSelected
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_ALL_SELECTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsAllSelected() {
    return isAllSelected;
  }


  @JsonProperty(JSON_PROPERTY_IS_ALL_SELECTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsAllSelected(Boolean isAllSelected) {
    this.isAllSelected = isAllSelected;
  }


  public SelectedFilesVM folderId(String folderId) {
    this.folderId = JsonNullable.<String>of(folderId);
    
    return this;
  }

   /**
   * Get folderId
   * @return folderId
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getFolderId() {
        return folderId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FOLDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFolderId_JsonNullable() {
    return folderId;
  }
  
  @JsonProperty(JSON_PROPERTY_FOLDER_ID)
  public void setFolderId_JsonNullable(JsonNullable<String> folderId) {
    this.folderId = folderId;
  }

  public void setFolderId(String folderId) {
    this.folderId = JsonNullable.<String>of(folderId);
  }


  public SelectedFilesVM searchPattern(String searchPattern) {
    this.searchPattern = JsonNullable.<String>of(searchPattern);
    
    return this;
  }

   /**
   * Get searchPattern
   * @return searchPattern
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getSearchPattern() {
        return searchPattern.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SEARCH_PATTERN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSearchPattern_JsonNullable() {
    return searchPattern;
  }
  
  @JsonProperty(JSON_PROPERTY_SEARCH_PATTERN)
  public void setSearchPattern_JsonNullable(JsonNullable<String> searchPattern) {
    this.searchPattern = searchPattern;
  }

  public void setSearchPattern(String searchPattern) {
    this.searchPattern = JsonNullable.<String>of(searchPattern);
  }


  public SelectedFilesVM useRegex(Boolean useRegex) {
    
    this.useRegex = useRegex;
    return this;
  }

   /**
   * Get useRegex
   * @return useRegex
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USE_REGEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUseRegex() {
    return useRegex;
  }


  @JsonProperty(JSON_PROPERTY_USE_REGEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUseRegex(Boolean useRegex) {
    this.useRegex = useRegex;
  }


  public SelectedFilesVM files(List<String> files) {
    this.files = JsonNullable.<List<String>>of(files);
    
    return this;
  }

  public SelectedFilesVM addFilesItem(String filesItem) {
    if (this.files == null || !this.files.isPresent()) {
      this.files = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.files.get().add(filesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Get files
   * @return files
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public List<String> getFiles() {
        return files.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getFiles_JsonNullable() {
    return files;
  }
  
  @JsonProperty(JSON_PROPERTY_FILES)
  public void setFiles_JsonNullable(JsonNullable<List<String>> files) {
    this.files = files;
  }

  public void setFiles(List<String> files) {
    this.files = JsonNullable.<List<String>>of(files);
  }


  public SelectedFilesVM folders(List<String> folders) {
    this.folders = JsonNullable.<List<String>>of(folders);
    
    return this;
  }

  public SelectedFilesVM addFoldersItem(String foldersItem) {
    if (this.folders == null || !this.folders.isPresent()) {
      this.folders = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.folders.get().add(foldersItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Get folders
   * @return folders
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public List<String> getFolders() {
        return folders.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FOLDERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getFolders_JsonNullable() {
    return folders;
  }
  
  @JsonProperty(JSON_PROPERTY_FOLDERS)
  public void setFolders_JsonNullable(JsonNullable<List<String>> folders) {
    this.folders = folders;
  }

  public void setFolders(List<String> folders) {
    this.folders = JsonNullable.<List<String>>of(folders);
  }


  public SelectedFilesVM path(String path) {
    this.path = JsonNullable.<String>of(path);
    
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getPath() {
        return path.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getPath_JsonNullable() {
    return path;
  }
  
  @JsonProperty(JSON_PROPERTY_PATH)
  public void setPath_JsonNullable(JsonNullable<String> path) {
    this.path = path;
  }

  public void setPath(String path) {
    this.path = JsonNullable.<String>of(path);
  }


  public SelectedFilesVM isBin(Boolean isBin) {
    
    this.isBin = isBin;
    return this;
  }

   /**
   * Get isBin
   * @return isBin
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_BIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsBin() {
    return isBin;
  }


  @JsonProperty(JSON_PROPERTY_IS_BIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsBin(Boolean isBin) {
    this.isBin = isBin;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SelectedFilesVM selectedFilesVM = (SelectedFilesVM) o;
    return Objects.equals(this.isAllSelected, selectedFilesVM.isAllSelected) &&
        equalsNullable(this.folderId, selectedFilesVM.folderId) &&
        equalsNullable(this.searchPattern, selectedFilesVM.searchPattern) &&
        Objects.equals(this.useRegex, selectedFilesVM.useRegex) &&
        equalsNullable(this.files, selectedFilesVM.files) &&
        equalsNullable(this.folders, selectedFilesVM.folders) &&
        equalsNullable(this.path, selectedFilesVM.path) &&
        Objects.equals(this.isBin, selectedFilesVM.isBin);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(isAllSelected, hashCodeNullable(folderId), hashCodeNullable(searchPattern), useRegex, hashCodeNullable(files), hashCodeNullable(folders), hashCodeNullable(path), isBin);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SelectedFilesVM {\n");
    sb.append("    isAllSelected: ").append(toIndentedString(isAllSelected)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    searchPattern: ").append(toIndentedString(searchPattern)).append("\n");
    sb.append("    useRegex: ").append(toIndentedString(useRegex)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    folders: ").append(toIndentedString(folders)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    isBin: ").append(toIndentedString(isBin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

