/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.model;

import java.util.Objects;
import cloud.fastreport.model.InvitedUser;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloud.fastreport.JSON;

/**
 * SubscriptionInviteVM
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SubscriptionInviteVM {
  public static final String SERIALIZED_NAME_USAGES = "usages";
  @SerializedName(SERIALIZED_NAME_USAGES)
  private Long usages;

  public static final String SERIALIZED_NAME_DURABLE = "durable";
  @SerializedName(SERIALIZED_NAME_DURABLE)
  private Boolean durable;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "accessToken";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  private String accessToken;

  public static final String SERIALIZED_NAME_EXPIRED_DATE = "expiredDate";
  @SerializedName(SERIALIZED_NAME_EXPIRED_DATE)
  private OffsetDateTime expiredDate;

  public static final String SERIALIZED_NAME_ADDED_USERS = "addedUsers";
  @SerializedName(SERIALIZED_NAME_ADDED_USERS)
  private List<InvitedUser> addedUsers;

  public static final String SERIALIZED_NAME_CREATOR_USER_ID = "creatorUserId";
  @SerializedName(SERIALIZED_NAME_CREATOR_USER_ID)
  private String creatorUserId;

  public SubscriptionInviteVM() {
  }

  public SubscriptionInviteVM usages(Long usages) {
    this.usages = usages;
    return this;
  }

   /**
   * Get usages
   * @return usages
  **/
  @javax.annotation.Nullable
  public Long getUsages() {
    return usages;
  }

  public void setUsages(Long usages) {
    this.usages = usages;
  }


  public SubscriptionInviteVM durable(Boolean durable) {
    this.durable = durable;
    return this;
  }

   /**
   * Get durable
   * @return durable
  **/
  @javax.annotation.Nullable
  public Boolean getDurable() {
    return durable;
  }

  public void setDurable(Boolean durable) {
    this.durable = durable;
  }


  public SubscriptionInviteVM accessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

   /**
   * Get accessToken
   * @return accessToken
  **/
  @javax.annotation.Nullable
  public String getAccessToken() {
    return accessToken;
  }

  public void setAccessToken(String accessToken) {
    this.accessToken = accessToken;
  }


  public SubscriptionInviteVM expiredDate(OffsetDateTime expiredDate) {
    this.expiredDate = expiredDate;
    return this;
  }

   /**
   * Get expiredDate
   * @return expiredDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExpiredDate() {
    return expiredDate;
  }

  public void setExpiredDate(OffsetDateTime expiredDate) {
    this.expiredDate = expiredDate;
  }


  public SubscriptionInviteVM addedUsers(List<InvitedUser> addedUsers) {
    this.addedUsers = addedUsers;
    return this;
  }

  public SubscriptionInviteVM addAddedUsersItem(InvitedUser addedUsersItem) {
    if (this.addedUsers == null) {
      this.addedUsers = new ArrayList<>();
    }
    this.addedUsers.add(addedUsersItem);
    return this;
  }

   /**
   * Get addedUsers
   * @return addedUsers
  **/
  @javax.annotation.Nullable
  public List<InvitedUser> getAddedUsers() {
    return addedUsers;
  }

  public void setAddedUsers(List<InvitedUser> addedUsers) {
    this.addedUsers = addedUsers;
  }


  public SubscriptionInviteVM creatorUserId(String creatorUserId) {
    this.creatorUserId = creatorUserId;
    return this;
  }

   /**
   * Get creatorUserId
   * @return creatorUserId
  **/
  @javax.annotation.Nullable
  public String getCreatorUserId() {
    return creatorUserId;
  }

  public void setCreatorUserId(String creatorUserId) {
    this.creatorUserId = creatorUserId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionInviteVM subscriptionInviteVM = (SubscriptionInviteVM) o;
    return Objects.equals(this.usages, subscriptionInviteVM.usages) &&
        Objects.equals(this.durable, subscriptionInviteVM.durable) &&
        Objects.equals(this.accessToken, subscriptionInviteVM.accessToken) &&
        Objects.equals(this.expiredDate, subscriptionInviteVM.expiredDate) &&
        Objects.equals(this.addedUsers, subscriptionInviteVM.addedUsers) &&
        Objects.equals(this.creatorUserId, subscriptionInviteVM.creatorUserId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(usages, durable, accessToken, expiredDate, addedUsers, creatorUserId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionInviteVM {\n");
    sb.append("    usages: ").append(toIndentedString(usages)).append("\n");
    sb.append("    durable: ").append(toIndentedString(durable)).append("\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    expiredDate: ").append(toIndentedString(expiredDate)).append("\n");
    sb.append("    addedUsers: ").append(toIndentedString(addedUsers)).append("\n");
    sb.append("    creatorUserId: ").append(toIndentedString(creatorUserId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("usages");
    openapiFields.add("durable");
    openapiFields.add("accessToken");
    openapiFields.add("expiredDate");
    openapiFields.add("addedUsers");
    openapiFields.add("creatorUserId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SubscriptionInviteVM
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionInviteVM.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionInviteVM is not found in the empty JSON string", SubscriptionInviteVM.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionInviteVM.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionInviteVM` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessToken") != null && !jsonObj.get("accessToken").isJsonNull()) && !jsonObj.get("accessToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessToken").toString()));
      }
      if (jsonObj.get("addedUsers") != null && !jsonObj.get("addedUsers").isJsonNull()) {
        JsonArray jsonArrayaddedUsers = jsonObj.getAsJsonArray("addedUsers");
        if (jsonArrayaddedUsers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addedUsers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addedUsers` to be an array in the JSON string but got `%s`", jsonObj.get("addedUsers").toString()));
          }

          // validate the optional field `addedUsers` (array)
          for (int i = 0; i < jsonArrayaddedUsers.size(); i++) {
            InvitedUser.validateJsonElement(jsonArrayaddedUsers.get(i));
          };
        }
      }
      if ((jsonObj.get("creatorUserId") != null && !jsonObj.get("creatorUserId").isJsonNull()) && !jsonObj.get("creatorUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorUserId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionInviteVM.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionInviteVM' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionInviteVM> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionInviteVM.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionInviteVM>() {
           @Override
           public void write(JsonWriter out, SubscriptionInviteVM value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionInviteVM read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SubscriptionInviteVM given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SubscriptionInviteVM
  * @throws IOException if the JSON string is invalid with respect to SubscriptionInviteVM
  */
  public static SubscriptionInviteVM fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionInviteVM.class);
  }

 /**
  * Convert an instance of SubscriptionInviteVM to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

