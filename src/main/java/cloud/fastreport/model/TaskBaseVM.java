/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * TaskBaseVM
 */
@JsonPropertyOrder({
  TaskBaseVM.JSON_PROPERTY_CRON_EXPRESSION,
  TaskBaseVM.JSON_PROPERTY_DELAYED_RUN_TIME,
  TaskBaseVM.JSON_PROPERTY_DELAYED_WAS_RUN_TIME,
  TaskBaseVM.JSON_PROPERTY_ID,
  TaskBaseVM.JSON_PROPERTY_NAME,
  TaskBaseVM.JSON_PROPERTY_RECURRENT_RUN_TIME,
  TaskBaseVM.JSON_PROPERTY_RECURRENT_WAS_RUN_TIME,
  TaskBaseVM.JSON_PROPERTY_SUBSCRIPTION_ID,
  TaskBaseVM.JSON_PROPERTY_$_T
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonIgnoreProperties(
  value = "$t", // ignore manually set $t, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the $t to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "$t", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = EmailTaskVM.class, name = "EmailTaskVM"),
  @JsonSubTypes.Type(value = ExportReportTaskVM.class, name = "ExportReportTaskVM"),
  @JsonSubTypes.Type(value = ExportTemplateTaskVM.class, name = "ExportTemplateTaskVM"),
  @JsonSubTypes.Type(value = FTPUploadTaskVM.class, name = "FTPUploadTaskVM"),
  @JsonSubTypes.Type(value = FetchTaskVM.class, name = "FetchTaskVM"),
  @JsonSubTypes.Type(value = PrepareTemplateTaskVM.class, name = "PrepareTemplateTaskVM"),
  @JsonSubTypes.Type(value = ThumbnailReportTaskVM.class, name = "ThumbnailReportTaskVM"),
  @JsonSubTypes.Type(value = ThumbnailTemplateTaskVM.class, name = "ThumbnailTemplateTaskVM"),
  @JsonSubTypes.Type(value = WebhookTaskVM.class, name = "WebhookTaskVM"),
  @JsonSubTypes.Type(value = TransformTaskBaseVM.class, name = "TransformTaskBaseVM"),
  @JsonSubTypes.Type(value = TransportTaskBaseVM.class, name = "TransportTaskBaseVM"),
})

public class TaskBaseVM {
  public static final String JSON_PROPERTY_CRON_EXPRESSION = "cronExpression";
  private JsonNullable<String> cronExpression = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DELAYED_RUN_TIME = "delayedRunTime";
  private JsonNullable<OffsetDateTime> delayedRunTime = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_DELAYED_WAS_RUN_TIME = "delayedWasRunTime";
  private JsonNullable<OffsetDateTime> delayedWasRunTime = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_ID = "id";
  private JsonNullable<String> id = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_NAME = "name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_RECURRENT_RUN_TIME = "recurrentRunTime";
  private JsonNullable<OffsetDateTime> recurrentRunTime = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_RECURRENT_WAS_RUN_TIME = "recurrentWasRunTime";
  private JsonNullable<OffsetDateTime> recurrentWasRunTime = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_SUBSCRIPTION_ID = "subscriptionId";
  private JsonNullable<String> subscriptionId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_$_T = "$t";
  protected String $t;

  public TaskBaseVM() {
  }

  @JsonCreator
  public TaskBaseVM(
    @JsonProperty(JSON_PROPERTY_RECURRENT_RUN_TIME) OffsetDateTime recurrentRunTime, 
    @JsonProperty(JSON_PROPERTY_RECURRENT_WAS_RUN_TIME) OffsetDateTime recurrentWasRunTime
  ) {
    this();
    this.recurrentRunTime = recurrentRunTime == null ? JsonNullable.<OffsetDateTime>undefined() : JsonNullable.of(recurrentRunTime);
    this.recurrentWasRunTime = recurrentWasRunTime == null ? JsonNullable.<OffsetDateTime>undefined() : JsonNullable.of(recurrentWasRunTime);
  }

  public TaskBaseVM cronExpression(String cronExpression) {
    this.cronExpression = JsonNullable.<String>of(cronExpression);
    
    return this;
  }

   /**
   * Get cronExpression
   * @return cronExpression
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getCronExpression() {
        return cronExpression.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CRON_EXPRESSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCronExpression_JsonNullable() {
    return cronExpression;
  }
  
  @JsonProperty(JSON_PROPERTY_CRON_EXPRESSION)
  public void setCronExpression_JsonNullable(JsonNullable<String> cronExpression) {
    this.cronExpression = cronExpression;
  }

  public void setCronExpression(String cronExpression) {
    this.cronExpression = JsonNullable.<String>of(cronExpression);
  }


  public TaskBaseVM delayedRunTime(OffsetDateTime delayedRunTime) {
    this.delayedRunTime = JsonNullable.<OffsetDateTime>of(delayedRunTime);
    
    return this;
  }

   /**
   * Get delayedRunTime
   * @return delayedRunTime
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getDelayedRunTime() {
        return delayedRunTime.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DELAYED_RUN_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getDelayedRunTime_JsonNullable() {
    return delayedRunTime;
  }
  
  @JsonProperty(JSON_PROPERTY_DELAYED_RUN_TIME)
  public void setDelayedRunTime_JsonNullable(JsonNullable<OffsetDateTime> delayedRunTime) {
    this.delayedRunTime = delayedRunTime;
  }

  public void setDelayedRunTime(OffsetDateTime delayedRunTime) {
    this.delayedRunTime = JsonNullable.<OffsetDateTime>of(delayedRunTime);
  }


  public TaskBaseVM delayedWasRunTime(OffsetDateTime delayedWasRunTime) {
    this.delayedWasRunTime = JsonNullable.<OffsetDateTime>of(delayedWasRunTime);
    
    return this;
  }

   /**
   * Get delayedWasRunTime
   * @return delayedWasRunTime
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getDelayedWasRunTime() {
        return delayedWasRunTime.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DELAYED_WAS_RUN_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getDelayedWasRunTime_JsonNullable() {
    return delayedWasRunTime;
  }
  
  @JsonProperty(JSON_PROPERTY_DELAYED_WAS_RUN_TIME)
  public void setDelayedWasRunTime_JsonNullable(JsonNullable<OffsetDateTime> delayedWasRunTime) {
    this.delayedWasRunTime = delayedWasRunTime;
  }

  public void setDelayedWasRunTime(OffsetDateTime delayedWasRunTime) {
    this.delayedWasRunTime = JsonNullable.<OffsetDateTime>of(delayedWasRunTime);
  }


  public TaskBaseVM id(String id) {
    this.id = JsonNullable.<String>of(id);
    
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getId() {
        return id.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getId_JsonNullable() {
    return id;
  }
  
  @JsonProperty(JSON_PROPERTY_ID)
  public void setId_JsonNullable(JsonNullable<String> id) {
    this.id = id;
  }

  public void setId(String id) {
    this.id = JsonNullable.<String>of(id);
  }


  public TaskBaseVM name(String name) {
    this.name = JsonNullable.<String>of(name);
    
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(String name) {
    this.name = JsonNullable.<String>of(name);
  }


   /**
   * Get recurrentRunTime
   * @return recurrentRunTime
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getRecurrentRunTime() {
    
    if (recurrentRunTime == null) {
      recurrentRunTime = JsonNullable.<OffsetDateTime>undefined();
    }
    return recurrentRunTime.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RECURRENT_RUN_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getRecurrentRunTime_JsonNullable() {
    return recurrentRunTime;
  }
  
  @JsonProperty(JSON_PROPERTY_RECURRENT_RUN_TIME)
  private void setRecurrentRunTime_JsonNullable(JsonNullable<OffsetDateTime> recurrentRunTime) {
    this.recurrentRunTime = recurrentRunTime;
  }



   /**
   * Get recurrentWasRunTime
   * @return recurrentWasRunTime
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public OffsetDateTime getRecurrentWasRunTime() {
    
    if (recurrentWasRunTime == null) {
      recurrentWasRunTime = JsonNullable.<OffsetDateTime>undefined();
    }
    return recurrentWasRunTime.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RECURRENT_WAS_RUN_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getRecurrentWasRunTime_JsonNullable() {
    return recurrentWasRunTime;
  }
  
  @JsonProperty(JSON_PROPERTY_RECURRENT_WAS_RUN_TIME)
  private void setRecurrentWasRunTime_JsonNullable(JsonNullable<OffsetDateTime> recurrentWasRunTime) {
    this.recurrentWasRunTime = recurrentWasRunTime;
  }



  public TaskBaseVM subscriptionId(String subscriptionId) {
    this.subscriptionId = JsonNullable.<String>of(subscriptionId);
    
    return this;
  }

   /**
   * Get subscriptionId
   * @return subscriptionId
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getSubscriptionId() {
        return subscriptionId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SUBSCRIPTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSubscriptionId_JsonNullable() {
    return subscriptionId;
  }
  
  @JsonProperty(JSON_PROPERTY_SUBSCRIPTION_ID)
  public void setSubscriptionId_JsonNullable(JsonNullable<String> subscriptionId) {
    this.subscriptionId = subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = JsonNullable.<String>of(subscriptionId);
  }


  public TaskBaseVM $t(String $t) {
    
    this.$t = $t;
    return this;
  }

   /**
   * Get $t
   * @return $t
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_$_T)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String get$T() {
    return $t;
  }


  @JsonProperty(JSON_PROPERTY_$_T)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void set$T(String $t) {
    this.$t = $t;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskBaseVM taskBaseVM = (TaskBaseVM) o;
    return equalsNullable(this.cronExpression, taskBaseVM.cronExpression) &&
        equalsNullable(this.delayedRunTime, taskBaseVM.delayedRunTime) &&
        equalsNullable(this.delayedWasRunTime, taskBaseVM.delayedWasRunTime) &&
        equalsNullable(this.id, taskBaseVM.id) &&
        equalsNullable(this.name, taskBaseVM.name) &&
        equalsNullable(this.recurrentRunTime, taskBaseVM.recurrentRunTime) &&
        equalsNullable(this.recurrentWasRunTime, taskBaseVM.recurrentWasRunTime) &&
        equalsNullable(this.subscriptionId, taskBaseVM.subscriptionId) &&
        Objects.equals(this.$t, taskBaseVM.$t);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(cronExpression), hashCodeNullable(delayedRunTime), hashCodeNullable(delayedWasRunTime), hashCodeNullable(id), hashCodeNullable(name), hashCodeNullable(recurrentRunTime), hashCodeNullable(recurrentWasRunTime), hashCodeNullable(subscriptionId), $t);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskBaseVM {\n");
    sb.append("    cronExpression: ").append(toIndentedString(cronExpression)).append("\n");
    sb.append("    delayedRunTime: ").append(toIndentedString(delayedRunTime)).append("\n");
    sb.append("    delayedWasRunTime: ").append(toIndentedString(delayedWasRunTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    recurrentRunTime: ").append(toIndentedString(recurrentRunTime)).append("\n");
    sb.append("    recurrentWasRunTime: ").append(toIndentedString(recurrentWasRunTime)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    $t: ").append(toIndentedString($t)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

