/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.model;

import java.util.Objects;
import cloud.fastreport.model.TaskAdministrate;
import cloud.fastreport.model.TaskCreate;
import cloud.fastreport.model.TaskDelete;
import cloud.fastreport.model.TaskExecute;
import cloud.fastreport.model.TaskGet;
import cloud.fastreport.model.TaskUpdate;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloud.fastreport.JSON;

/**
 * TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission {
  public static final String SERIALIZED_NAME_CREATE = "create";
  @SerializedName(SERIALIZED_NAME_CREATE)
  private TaskCreate create;

  public static final String SERIALIZED_NAME_DELETE = "delete";
  @SerializedName(SERIALIZED_NAME_DELETE)
  private TaskDelete delete;

  public static final String SERIALIZED_NAME_EXECUTE = "execute";
  @SerializedName(SERIALIZED_NAME_EXECUTE)
  private TaskExecute execute;

  public static final String SERIALIZED_NAME_GET = "get";
  @SerializedName(SERIALIZED_NAME_GET)
  private TaskGet get;

  public static final String SERIALIZED_NAME_UPDATE = "update";
  @SerializedName(SERIALIZED_NAME_UPDATE)
  private TaskUpdate update;

  public static final String SERIALIZED_NAME_ADMINISTRATE = "administrate";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATE)
  private TaskAdministrate administrate;

  public TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission() {
  }

  public TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission create(TaskCreate create) {
    this.create = create;
    return this;
  }

   /**
   * Get create
   * @return create
  **/
  @javax.annotation.Nullable
  public TaskCreate getCreate() {
    return create;
  }

  public void setCreate(TaskCreate create) {
    this.create = create;
  }


  public TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission delete(TaskDelete delete) {
    this.delete = delete;
    return this;
  }

   /**
   * Get delete
   * @return delete
  **/
  @javax.annotation.Nullable
  public TaskDelete getDelete() {
    return delete;
  }

  public void setDelete(TaskDelete delete) {
    this.delete = delete;
  }


  public TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission execute(TaskExecute execute) {
    this.execute = execute;
    return this;
  }

   /**
   * Get execute
   * @return execute
  **/
  @javax.annotation.Nullable
  public TaskExecute getExecute() {
    return execute;
  }

  public void setExecute(TaskExecute execute) {
    this.execute = execute;
  }


  public TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission get(TaskGet get) {
    this.get = get;
    return this;
  }

   /**
   * Get get
   * @return get
  **/
  @javax.annotation.Nullable
  public TaskGet getGet() {
    return get;
  }

  public void setGet(TaskGet get) {
    this.get = get;
  }


  public TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission update(TaskUpdate update) {
    this.update = update;
    return this;
  }

   /**
   * Get update
   * @return update
  **/
  @javax.annotation.Nullable
  public TaskUpdate getUpdate() {
    return update;
  }

  public void setUpdate(TaskUpdate update) {
    this.update = update;
  }


  public TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission administrate(TaskAdministrate administrate) {
    this.administrate = administrate;
    return this;
  }

   /**
   * Get administrate
   * @return administrate
  **/
  @javax.annotation.Nullable
  public TaskAdministrate getAdministrate() {
    return administrate;
  }

  public void setAdministrate(TaskAdministrate administrate) {
    this.administrate = administrate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission taskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission = (TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission) o;
    return Objects.equals(this.create, taskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission.create) &&
        Objects.equals(this.delete, taskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission.delete) &&
        Objects.equals(this.execute, taskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission.execute) &&
        Objects.equals(this.get, taskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission.get) &&
        Objects.equals(this.update, taskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission.update) &&
        Objects.equals(this.administrate, taskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission.administrate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(create, delete, execute, get, update, administrate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission {\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
    sb.append("    execute: ").append(toIndentedString(execute)).append("\n");
    sb.append("    get: ").append(toIndentedString(get)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    administrate: ").append(toIndentedString(administrate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("create");
    openapiFields.add("delete");
    openapiFields.add("execute");
    openapiFields.add("get");
    openapiFields.add("update");
    openapiFields.add("administrate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission is not found in the empty JSON string", TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `create`
      if (jsonObj.get("create") != null && !jsonObj.get("create").isJsonNull()) {
        TaskCreate.validateJsonElement(jsonObj.get("create"));
      }
      // validate the optional field `delete`
      if (jsonObj.get("delete") != null && !jsonObj.get("delete").isJsonNull()) {
        TaskDelete.validateJsonElement(jsonObj.get("delete"));
      }
      // validate the optional field `execute`
      if (jsonObj.get("execute") != null && !jsonObj.get("execute").isJsonNull()) {
        TaskExecute.validateJsonElement(jsonObj.get("execute"));
      }
      // validate the optional field `get`
      if (jsonObj.get("get") != null && !jsonObj.get("get").isJsonNull()) {
        TaskGet.validateJsonElement(jsonObj.get("get"));
      }
      // validate the optional field `update`
      if (jsonObj.get("update") != null && !jsonObj.get("update").isJsonNull()) {
        TaskUpdate.validateJsonElement(jsonObj.get("update"));
      }
      // validate the optional field `administrate`
      if (jsonObj.get("administrate") != null && !jsonObj.get("administrate").isJsonNull()) {
        TaskAdministrate.validateJsonElement(jsonObj.get("administrate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission>() {
           @Override
           public void write(JsonWriter out, TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             // comment by Detrav, do not need to validate JSON while parse
             //validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission
  * @throws IOException if the JSON string is invalid with respect to TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission
  */
  public static TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission.class);
  }

 /**
  * Convert an instance of TaskCreateTaskGetTaskUpdateTaskDeleteTaskExecuteTaskAdministratePermission to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

