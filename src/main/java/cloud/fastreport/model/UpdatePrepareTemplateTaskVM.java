/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.model;

import java.util.Objects;
import java.util.Arrays;
import cloud.fastreport.model.UpdateExportReportTaskVM;
import cloud.fastreport.model.UpdateExportTemplateTaskVM;
import cloud.fastreport.model.UpdatePrepareTemplateTaskVM;
import cloud.fastreport.model.UpdateTransformTaskBaseVM;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UpdatePrepareTemplateTaskVM
 */
@JsonPropertyOrder({
  UpdatePrepareTemplateTaskVM.JSON_PROPERTY_EXPORT_IDS,
  UpdatePrepareTemplateTaskVM.JSON_PROPERTY_PAGES_COUNT,
  UpdatePrepareTemplateTaskVM.JSON_PROPERTY_REPORT_PARAMETERS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonIgnoreProperties(
  value = "$t", // ignore manually set $t, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the $t to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "$t", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = UpdateExportReportTaskVM.class, name = "UpdateExportReportTaskVM"),
  @JsonSubTypes.Type(value = UpdateExportTemplateTaskVM.class, name = "UpdateExportTemplateTaskVM"),
  @JsonSubTypes.Type(value = UpdatePrepareTemplateTaskVM.class, name = "UpdatePrepareTemplateTaskVM"),
})

public class UpdatePrepareTemplateTaskVM extends UpdateTransformTaskBaseVM {
  public static final String JSON_PROPERTY_EXPORT_IDS = "exportIds";
  private JsonNullable<List<String>> exportIds = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_PAGES_COUNT = "pagesCount";
  private JsonNullable<Integer> pagesCount = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_REPORT_PARAMETERS = "reportParameters";
  private JsonNullable<Map<String, String>> reportParameters = JsonNullable.<Map<String, String>>undefined();

  public UpdatePrepareTemplateTaskVM() {

  }

  public UpdatePrepareTemplateTaskVM exportIds(List<String> exportIds) {
    this.exportIds = JsonNullable.<List<String>>of(exportIds);
    
    return this;
  }

  public UpdatePrepareTemplateTaskVM addExportIdsItem(String exportIdsItem) {
    if (this.exportIds == null || !this.exportIds.isPresent()) {
      this.exportIds = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.exportIds.get().add(exportIdsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Get exportIds
   * @return exportIds
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public List<String> getExportIds() {
        return exportIds.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXPORT_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getExportIds_JsonNullable() {
    return exportIds;
  }
  
  @JsonProperty(JSON_PROPERTY_EXPORT_IDS)
  public void setExportIds_JsonNullable(JsonNullable<List<String>> exportIds) {
    this.exportIds = exportIds;
  }

  public void setExportIds(List<String> exportIds) {
    this.exportIds = JsonNullable.<List<String>>of(exportIds);
  }


  public UpdatePrepareTemplateTaskVM pagesCount(Integer pagesCount) {
    this.pagesCount = JsonNullable.<Integer>of(pagesCount);
    
    return this;
  }

   /**
   * Get pagesCount
   * minimum: 0
   * maximum: 2147483647
   * @return pagesCount
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getPagesCount() {
        return pagesCount.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PAGES_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getPagesCount_JsonNullable() {
    return pagesCount;
  }
  
  @JsonProperty(JSON_PROPERTY_PAGES_COUNT)
  public void setPagesCount_JsonNullable(JsonNullable<Integer> pagesCount) {
    this.pagesCount = pagesCount;
  }

  public void setPagesCount(Integer pagesCount) {
    this.pagesCount = JsonNullable.<Integer>of(pagesCount);
  }


  public UpdatePrepareTemplateTaskVM reportParameters(Map<String, String> reportParameters) {
    this.reportParameters = JsonNullable.<Map<String, String>>of(reportParameters);
    
    return this;
  }

  public UpdatePrepareTemplateTaskVM putReportParametersItem(String key, String reportParametersItem) {
    if (this.reportParameters == null || !this.reportParameters.isPresent()) {
      this.reportParameters = JsonNullable.<Map<String, String>>of(new HashMap<>());
    }
    try {
      this.reportParameters.get().put(key, reportParametersItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Get reportParameters
   * @return reportParameters
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Map<String, String> getReportParameters() {
        return reportParameters.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REPORT_PARAMETERS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, String>> getReportParameters_JsonNullable() {
    return reportParameters;
  }
  
  @JsonProperty(JSON_PROPERTY_REPORT_PARAMETERS)
  public void setReportParameters_JsonNullable(JsonNullable<Map<String, String>> reportParameters) {
    this.reportParameters = reportParameters;
  }

  public void setReportParameters(Map<String, String> reportParameters) {
    this.reportParameters = JsonNullable.<Map<String, String>>of(reportParameters);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePrepareTemplateTaskVM updatePrepareTemplateTaskVM = (UpdatePrepareTemplateTaskVM) o;
    return equalsNullable(this.exportIds, updatePrepareTemplateTaskVM.exportIds) &&
        equalsNullable(this.pagesCount, updatePrepareTemplateTaskVM.pagesCount) &&
        equalsNullable(this.reportParameters, updatePrepareTemplateTaskVM.reportParameters) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(exportIds), hashCodeNullable(pagesCount), hashCodeNullable(reportParameters), super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePrepareTemplateTaskVM {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    exportIds: ").append(toIndentedString(exportIds)).append("\n");
    sb.append("    pagesCount: ").append(toIndentedString(pagesCount)).append("\n");
    sb.append("    reportParameters: ").append(toIndentedString(reportParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

