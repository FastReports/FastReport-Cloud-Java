/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import cloud.fastreport.JSON;

/**
 * UpdateTaskBaseVM
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UpdateTaskBaseVM {
  public static final String SERIALIZED_NAME_CRON_EXPRESSION = "cronExpression";
  @SerializedName(SERIALIZED_NAME_CRON_EXPRESSION)
  private String cronExpression;

  public static final String SERIALIZED_NAME_DELAYED_RUN_TIME = "delayedRunTime";
  @SerializedName(SERIALIZED_NAME_DELAYED_RUN_TIME)
  private OffsetDateTime delayedRunTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_$_T = "$t";
  @SerializedName(SERIALIZED_NAME_$_T)
  protected String $t;

  public UpdateTaskBaseVM() {
    this.$t = this.getClass().getSimpleName();
  }

  public UpdateTaskBaseVM cronExpression(String cronExpression) {
    this.cronExpression = cronExpression;
    return this;
  }

   /**
   * Get cronExpression
   * @return cronExpression
  **/
  @javax.annotation.Nullable
  public String getCronExpression() {
    return cronExpression;
  }

  public void setCronExpression(String cronExpression) {
    this.cronExpression = cronExpression;
  }


  public UpdateTaskBaseVM delayedRunTime(OffsetDateTime delayedRunTime) {
    this.delayedRunTime = delayedRunTime;
    return this;
  }

   /**
   * Get delayedRunTime
   * @return delayedRunTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDelayedRunTime() {
    return delayedRunTime;
  }

  public void setDelayedRunTime(OffsetDateTime delayedRunTime) {
    this.delayedRunTime = delayedRunTime;
  }


  public UpdateTaskBaseVM name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateTaskBaseVM $t(String $t) {
    this.$t = $t;
    return this;
  }

   /**
   * Get $t
   * @return $t
  **/
  @javax.annotation.Nonnull
  public String get$T() {
    return $t;
  }

  public void set$T(String $t) {
    this.$t = $t;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateTaskBaseVM updateTaskBaseVM = (UpdateTaskBaseVM) o;
    return Objects.equals(this.cronExpression, updateTaskBaseVM.cronExpression) &&
        Objects.equals(this.delayedRunTime, updateTaskBaseVM.delayedRunTime) &&
        Objects.equals(this.name, updateTaskBaseVM.name) &&
        Objects.equals(this.$t, updateTaskBaseVM.$t);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cronExpression, delayedRunTime, name, $t);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateTaskBaseVM {\n");
    sb.append("    cronExpression: ").append(toIndentedString(cronExpression)).append("\n");
    sb.append("    delayedRunTime: ").append(toIndentedString(delayedRunTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    $t: ").append(toIndentedString($t)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cronExpression");
    openapiFields.add("delayedRunTime");
    openapiFields.add("name");
    openapiFields.add("$t");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("$t");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdateTaskBaseVM
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateTaskBaseVM.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateTaskBaseVM is not found in the empty JSON string", UpdateTaskBaseVM.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("$t").getAsString();
      switch (discriminatorValue) {
        case "UpdateEmailTaskVM":
          UpdateEmailTaskVM.validateJsonElement(jsonElement);
          break;
        case "UpdateExportReportTaskVM":
          UpdateExportReportTaskVM.validateJsonElement(jsonElement);
          break;
        case "UpdateExportTemplateTaskVM":
          UpdateExportTemplateTaskVM.validateJsonElement(jsonElement);
          break;
        case "UpdateFTPUploadTaskVM":
          UpdateFTPUploadTaskVM.validateJsonElement(jsonElement);
          break;
        case "UpdateFetchTaskVM":
          UpdateFetchTaskVM.validateJsonElement(jsonElement);
          break;
        case "UpdatePrepareTemplateTaskVM":
          UpdatePrepareTemplateTaskVM.validateJsonElement(jsonElement);
          break;
        case "UpdateTaskBaseVM":
          UpdateTaskBaseVM.validateJsonElement(jsonElement);
          break;
        case "UpdateThumbnailReportTaskVM":
          UpdateThumbnailReportTaskVM.validateJsonElement(jsonElement);
          break;
        case "UpdateThumbnailTemplateTaskVM":
          UpdateThumbnailTemplateTaskVM.validateJsonElement(jsonElement);
          break;
        case "UpdateWebhookTaskVM":
          UpdateWebhookTaskVM.validateJsonElement(jsonElement);
          break;
        case "UpdateTransformTaskBaseVM":
          UpdateTransformTaskBaseVM.validateJsonElement(jsonElement);
          break;
        case "UpdateTransportTaskBaseVM":
          UpdateTransportTaskBaseVM.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `$t` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


 /**
  * Create an instance of UpdateTaskBaseVM given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateTaskBaseVM
  * @throws IOException if the JSON string is invalid with respect to UpdateTaskBaseVM
  */
  public static UpdateTaskBaseVM fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateTaskBaseVM.class);
  }

 /**
  * Convert an instance of UpdateTaskBaseVM to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

