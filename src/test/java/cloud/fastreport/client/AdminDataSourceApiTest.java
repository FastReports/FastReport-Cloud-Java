/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.client;

import cloud.fastreport.model.CreateDataSourceAdminVM;
import cloud.fastreport.model.DataSourcePermissions;
import cloud.fastreport.model.DataSourcePermissionsVM;
import cloud.fastreport.model.DataSourceVM;
import cloud.fastreport.model.DataSourcesVM;
import cloud.fastreport.model.ProblemDetails;
import cloud.fastreport.model.UpdateDataSourceVM;
import org.junit.Test;
import org.junit.Ignore;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminDataSourceApi
 */
@Ignore
public class AdminDataSourceApiTest {

    private final AdminDataSourceApi api = new AdminDataSourceApi();

    
    /**
     * Add Permission to datasource
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminDataSourceAddPermissionTest() throws IOException {
        String id = null;
        DataSourcePermissionsVM permissionsVM = null;
        DataSourcePermissions response = api.adminDataSourceAddPermission(id, permissionsVM);

        // TODO: test validations
    }
    
    /**
     * Create new data source
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminDataSourceCreateDataSourceTest() throws IOException {
        CreateDataSourceAdminVM createVM = null;
        DataSourceVM response = api.adminDataSourceCreateDataSource(createVM);

        // TODO: test validations
    }
    
    /**
     * Delete datasource by id
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminDataSourceDeleteDataSourceTest() throws IOException {
        String id = null;
        api.adminDataSourceDeleteDataSource(id);

        // TODO: test validations
    }
    
    /**
     * This should connect to a database and set data structure
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminDataSourceFetchDataTest() throws IOException {
        String id = null;
        api.adminDataSourceFetchData(id);

        // TODO: test validations
    }
    
    /**
     * Get datasource by id
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminDataSourceGetDataSourceTest() throws IOException {
        String id = null;
        DataSourceVM response = api.adminDataSourceGetDataSource(id);

        // TODO: test validations
    }
    
    /**
     * Get list of datasources from database
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminDataSourceGetDataSourcesTest() throws IOException {
        Integer skip = null;
        Integer take = null;
        String subscriptionId = null;
        DataSourcesVM response = api.adminDataSourceGetDataSources(skip, take, subscriptionId);

        // TODO: test validations
    }
    
    /**
     * Get all Data source permissions
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminDataSourceGetPermissionsTest() throws IOException {
        String id = null;
        DataSourcePermissions response = api.adminDataSourceGetPermissions(id);

        // TODO: test validations
    }
    
    /**
     * Revoke permissions to datasource
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminDataSourceRevokePermissionTest() throws IOException {
        String id = null;
        DataSourcePermissionsVM permissionsVM = null;
        DataSourcePermissions response = api.adminDataSourceRevokePermission(id, permissionsVM);

        // TODO: test validations
    }
    
    /**
     * Update datasource with update VM
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminDataSourceUpdateDataSourceTest() throws IOException {
        String id = null;
        UpdateDataSourceVM updateVM = null;
        DataSourceVM response = api.adminDataSourceUpdateDataSource(id, updateVM);

        // TODO: test validations
    }
    
    /**
     * Update permissions to datasource
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminDataSourceUpdatePermissionsTest() throws IOException {
        String dataSourceId = null;
        DataSourcePermissions newPermissions = null;
        DataSourcePermissions response = api.adminDataSourceUpdatePermissions(dataSourceId, newPermissions);

        // TODO: test validations
    }
    
}
