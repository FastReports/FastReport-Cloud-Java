/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.client;

import cloud.fastreport.model.AdminExportFolderCreateVM;
import cloud.fastreport.model.ExportCreateAdminVM;
import cloud.fastreport.model.ExportVM;
import cloud.fastreport.model.ExportsVM;
import cloud.fastreport.model.FilePermissions;
import cloud.fastreport.model.FilePermissionsVM;
import cloud.fastreport.model.FileUpdateVM;
import cloud.fastreport.model.FileVM;
import cloud.fastreport.model.FilesVM;
import cloud.fastreport.model.ProblemDetails;
import org.junit.Test;
import org.junit.Ignore;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminExportsApi
 */
@Ignore
public class AdminExportsApiTest {

    private final AdminExportsApi api = new AdminExportsApi();

    
    /**
     * Add permission
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminExportFoldersAddPermissionTest() throws IOException {
        String id = null;
        FilePermissionsVM permissionsVM = null;
        FilePermissions response = api.adminExportFoldersAddPermission(id, permissionsVM);

        // TODO: test validations
    }
    
    /**
     * Delete specified folder
     *
     * User with Delete permission can access the method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminExportFoldersDeleteFolderTest() throws IOException {
        String id = null;
        Boolean recursive = null;
        api.adminExportFoldersDeleteFolder(id, recursive);

        // TODO: test validations
    }
    
    /**
     * Returns a folder by id
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminExportFoldersGetFolderTest() throws IOException {
        String id = null;
        FileVM response = api.adminExportFoldersGetFolder(id);

        // TODO: test validations
    }
    
    /**
     * Returns a list of folders
     *
     * If no folders, then the endpoint will return empty list
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminExportFoldersGetFoldersTest() throws IOException {
        Integer skip = null;
        Integer take = null;
        String subscriptionId = null;
        FilesVM response = api.adminExportFoldersGetFolders(skip, take, subscriptionId);

        // TODO: test validations
    }
    
    /**
     * Get all folder permissions
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminExportFoldersGetPermissionsTest() throws IOException {
        String id = null;
        FilePermissions response = api.adminExportFoldersGetPermissions(id);

        // TODO: test validations
    }
    
    /**
     * Create a folder
     *
     * User with a Create File permisison can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminExportFoldersPostFolderTest() throws IOException {
        String subscriptionId = null;
        AdminExportFolderCreateVM folderVm = null;
        FileVM response = api.adminExportFoldersPostFolder(subscriptionId, folderVm);

        // TODO: test validations
    }
    
    /**
     * Revoke permission
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminExportFoldersRevokePermissionTest() throws IOException {
        String id = null;
        FilePermissionsVM permissionsVM = null;
        FilePermissions response = api.adminExportFoldersRevokePermission(id, permissionsVM);

        // TODO: test validations
    }
    
    /**
     * Update a folder
     *
     * User with Create File permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminExportFoldersUpdateFolderTest() throws IOException {
        String id = null;
        FileUpdateVM folderVM = null;
        FileVM response = api.adminExportFoldersUpdateFolder(id, folderVM);

        // TODO: test validations
    }
    
    /**
     * Revoke permission
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminExportFoldersUpdatePermissionsTest() throws IOException {
        String id = null;
        FilePermissions newPermissions = null;
        FilePermissions response = api.adminExportFoldersUpdatePermissions(id, newPermissions);

        // TODO: test validations
    }
    
    /**
     * Add file permissions
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminExportsAddPermissionTest() throws IOException {
        String id = null;
        FilePermissionsVM permissionsVM = null;
        FilePermissions response = api.adminExportsAddPermission(id, permissionsVM);

        // TODO: test validations
    }
    
    /**
     * Delete specified file
     *
     * User with Delete permission can access the method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminExportsDeleteFileTest() throws IOException {
        String id = null;
        api.adminExportsDeleteFile(id);

        // TODO: test validations
    }
    
    /**
     * Returns a file by id
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminExportsGetFileTest() throws IOException {
        String id = null;
        ExportVM response = api.adminExportsGetFile(id);

        // TODO: test validations
    }
    
    /**
     * Returns a list of files
     *
     * If no files, then the endpoint will return empty list
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminExportsGetFilesTest() throws IOException {
        Integer skip = null;
        Integer take = null;
        String subscriptionId = null;
        ExportsVM response = api.adminExportsGetFiles(skip, take, subscriptionId);

        // TODO: test validations
    }
    
    /**
     * Get all file permissions
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminExportsGetPermissionsTest() throws IOException {
        String id = null;
        FilePermissions response = api.adminExportsGetPermissions(id);

        // TODO: test validations
    }
    
    /**
     * Revoke (remove) file permissions
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminExportsRevokePermissionTest() throws IOException {
        String id = null;
        FilePermissionsVM permissionsVM = null;
        FilePermissions response = api.adminExportsRevokePermission(id, permissionsVM);

        // TODO: test validations
    }
    
    /**
     * Update a file
     *
     * User with Create Entity permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminExportsUpdateFileTest() throws IOException {
        String id = null;
        FileUpdateVM fileVM = null;
        ExportVM response = api.adminExportsUpdateFile(id, fileVM);

        // TODO: test validations
    }
    
    /**
     * Update file permissions
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminExportsUpdatePermissionsTest() throws IOException {
        String fileId = null;
        FilePermissions newPermissions = null;
        FilePermissions response = api.adminExportsUpdatePermissions(fileId, newPermissions);

        // TODO: test validations
    }
    
    /**
     * Upload a file to the specified folder
     *
     * User with Create Entity permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminExportsUploadFileTest() throws IOException {
        ExportCreateAdminVM fileVM = null;
        ExportVM response = api.adminExportsUploadFile(fileVM);

        // TODO: test validations
    }
    
}
