/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.client;

import cloud.fastreport.model.AdminReportFolderCreateVM;
import cloud.fastreport.model.FilePermissionsVM;
import cloud.fastreport.model.FileUpdateVM;
import cloud.fastreport.model.FileVM;
import cloud.fastreport.model.FilesVM;
import cloud.fastreport.model.ProblemDetails;
import cloud.fastreport.model.ReportCreateAdminVM;
import cloud.fastreport.model.ReportVM;
import cloud.fastreport.model.ReportsVM;
import cloud.fastreport.model.UpdateFilePermissionsVM;
import org.junit.Test;
import org.junit.Ignore;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminReportsApi
 */
@Ignore
public class AdminReportsApiTest {

    private final AdminReportsApi api = new AdminReportsApi();

    
    /**
     * Delete specified folder
     *
     * User with Delete permission can access the method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminReportFoldersDeleteFolderTest() throws IOException {
        String id = null;
        Boolean recursive = null;
        api.adminReportFoldersDeleteFolder(id, recursive);

        // TODO: test validations
    }
    
    /**
     * Returns a folder by id
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminReportFoldersGetFolderTest() throws IOException {
        String id = null;
        FileVM response = api.adminReportFoldersGetFolder(id);

        // TODO: test validations
    }
    
    /**
     * Returns a list of folders
     *
     * If no folders, then the endpoint will return empty list
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminReportFoldersGetFoldersTest() throws IOException {
        Integer skip = null;
        Integer take = null;
        String subscriptionId = null;
        FilesVM response = api.adminReportFoldersGetFolders(skip, take, subscriptionId);

        // TODO: test validations
    }
    
    /**
     * Get all folder permissions
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminReportFoldersGetPermissionsTest() throws IOException {
        String id = null;
        FilePermissionsVM response = api.adminReportFoldersGetPermissions(id);

        // TODO: test validations
    }
    
    /**
     * Create a folder
     *
     * User with a Create File permisison can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminReportFoldersPostFolderTest() throws IOException {
        AdminReportFolderCreateVM folderVm = null;
        FileVM response = api.adminReportFoldersPostFolder(folderVm);

        // TODO: test validations
    }
    
    /**
     * Update a folder
     *
     * User with Create File permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminReportFoldersUpdateFolderTest() throws IOException {
        String id = null;
        FileUpdateVM folderVM = null;
        FileVM response = api.adminReportFoldersUpdateFolder(id, folderVM);

        // TODO: test validations
    }
    
    /**
     * Revoke permission
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminReportFoldersUpdatePermissionsTest() throws IOException {
        String id = null;
        UpdateFilePermissionsVM newPermissions = null;
        api.adminReportFoldersUpdatePermissions(id, newPermissions);

        // TODO: test validations
    }
    
    /**
     * Delete specified file
     *
     * User with Delete permission can access the method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminReportsDeleteFileTest() throws IOException {
        String id = null;
        api.adminReportsDeleteFile(id);

        // TODO: test validations
    }
    
    /**
     * Returns a file by id
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminReportsGetFileTest() throws IOException {
        String id = null;
        ReportVM response = api.adminReportsGetFile(id);

        // TODO: test validations
    }
    
    /**
     * Returns a list of files
     *
     * If no files, then the endpoint will return empty list
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminReportsGetFilesTest() throws IOException {
        Integer skip = null;
        Integer take = null;
        String subscriptionId = null;
        ReportsVM response = api.adminReportsGetFiles(skip, take, subscriptionId);

        // TODO: test validations
    }
    
    /**
     * Get all file permissions
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminReportsGetPermissionsTest() throws IOException {
        String id = null;
        FilePermissionsVM response = api.adminReportsGetPermissions(id);

        // TODO: test validations
    }
    
    /**
     * Update a file
     *
     * User with Create Entity permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminReportsUpdateFileTest() throws IOException {
        String id = null;
        FileUpdateVM fileVM = null;
        ReportVM response = api.adminReportsUpdateFile(id, fileVM);

        // TODO: test validations
    }
    
    /**
     * Update permissions to file
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminReportsUpdatePermissionsTest() throws IOException {
        String id = null;
        UpdateFilePermissionsVM newPermissions = null;
        api.adminReportsUpdatePermissions(id, newPermissions);

        // TODO: test validations
    }
    
    /**
     * Upload a file to the specified folder
     *
     * User with Create Entity permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminReportsUploadFileTest() throws IOException {
        ReportCreateAdminVM fileVM = null;
        ReportVM response = api.adminReportsUploadFile(fileVM);

        // TODO: test validations
    }
    
}
