/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.client;

import cloud.fastreport.model.AdminSubscriptionVM;
import cloud.fastreport.model.AdminSubscriptionsVM;
import cloud.fastreport.model.CreateSubscriptionVM;
import org.threeten.bp.OffsetDateTime;
import cloud.fastreport.model.ProblemDetails;
import cloud.fastreport.model.SubscriptionPermissionsVM;
import cloud.fastreport.model.UpdateSubscriptionPermissionsVM;
import cloud.fastreport.model.UpdateSubscriptionVM;
import org.junit.Test;
import org.junit.Ignore;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminSubscriptionsApi
 */
@Ignore
public class AdminSubscriptionsApiTest {

    private final AdminSubscriptionsApi api = new AdminSubscriptionsApi();

    
    /**
     * Create a new subscription based on some plan
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminSubscriptionsCreateSubscriptionTest() throws IOException {
        CreateSubscriptionVM viewModel = null;
        AdminSubscriptionVM response = api.adminSubscriptionsCreateSubscription(viewModel);

        // TODO: test validations
    }
    
    /**
     * Delete the subscription by id
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminSubscriptionsDeleteSubscriptionTest() throws IOException {
        String id = null;
        api.adminSubscriptionsDeleteSubscription(id);

        // TODO: test validations
    }
    
    /**
     * Returns a key-value pair of new(renew) subscriptions count per month for a specified time span: (month, number of new subscriptions)
     *
     * If no subscriptions, then the endpoint will return empty dic
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminSubscriptionsGetNewSibscriptionsPerMonthTest() throws IOException {
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        Map<String, Integer> response = api.adminSubscriptionsGetNewSibscriptionsPerMonth(from, to);

        // TODO: test validations
    }
    
    /**
     * Get all subscription permissions
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminSubscriptionsGetPermissionsTest() throws IOException {
        String id = null;
        SubscriptionPermissionsVM response = api.adminSubscriptionsGetPermissions(id);

        // TODO: test validations
    }
    
    /**
     * Returns the subscription by id
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminSubscriptionsGetSubscriptionTest() throws IOException {
        String id = null;
        AdminSubscriptionVM response = api.adminSubscriptionsGetSubscription(id);

        // TODO: test validations
    }
    
    /**
     * Returns a list of all subscriptions
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminSubscriptionsGetSubscriptionsTest() throws IOException {
        Integer skip = null;
        Integer take = null;
        AdminSubscriptionsVM response = api.adminSubscriptionsGetSubscriptions(skip, take);

        // TODO: test validations
    }
    
    /**
     * Recount subscription&#39;s files and folders sizes.
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminSubscriptionsReCountSubscriptionTest() throws IOException {
        String id = null;
        api.adminSubscriptionsReCountSubscription(id);

        // TODO: test validations
    }
    
    /**
     * Update permissions to subscription
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminSubscriptionsUpdatePermissionsTest() throws IOException {
        String id = null;
        UpdateSubscriptionPermissionsVM permissionsVM = null;
        api.adminSubscriptionsUpdatePermissions(id, permissionsVM);

        // TODO: test validations
    }
    
    /**
     * Update the subscription by id
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void adminSubscriptionsUpdateSubscriptionTest() throws IOException {
        String id = null;
        UpdateSubscriptionVM viewModel = null;
        AdminSubscriptionVM response = api.adminSubscriptionsUpdateSubscription(id, viewModel);

        // TODO: test validations
    }
    
}
