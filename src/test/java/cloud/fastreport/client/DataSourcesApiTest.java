/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.client;

import cloud.fastreport.model.CreateDataSourceVM;
import cloud.fastreport.model.DataSourcePermissionsVM;
import cloud.fastreport.model.DataSourceVM;
import cloud.fastreport.model.DataSourcesVM;
import cloud.fastreport.model.ProblemDetails;
import cloud.fastreport.model.RenameDataSourceVM;
import cloud.fastreport.model.UpdateDataSourceConnectionStringVM;
import cloud.fastreport.model.UpdateDataSourcePermissionsVM;
import cloud.fastreport.model.UpdateDataSourceSubscriptionVM;
import org.junit.Test;
import org.junit.Ignore;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataSourcesApi
 */
@Ignore
public class DataSourcesApiTest {

    private final DataSourcesApi api = new DataSourcesApi();

    
    /**
     * Create new data source
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void dataSourcesCreateDataSourceTest() throws IOException {
        CreateDataSourceVM viewModel = null;
        DataSourceVM response = api.dataSourcesCreateDataSource(viewModel);

        // TODO: test validations
    }
    
    /**
     * Delete data source by id
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void dataSourcesDeleteDataSourceTest() throws IOException {
        String id = null;
        api.dataSourcesDeleteDataSource(id);

        // TODO: test validations
    }
    
    /**
     * This should connect to a database and set data structure
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void dataSourcesFetchDataTest() throws IOException {
        String id = null;
        api.dataSourcesFetchData(id);

        // TODO: test validations
    }
    
    /**
     * Returns all of the data sources, that current user have permission for in a subscription  if subscription id is null, returns all data sources, that current user have permission for
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void dataSourcesGetAvailableDataSourcesTest() throws IOException {
        String subscriptionId = null;
        Integer skip = null;
        Integer take = null;
        DataSourcesVM response = api.dataSourcesGetAvailableDataSources(subscriptionId, skip, take);

        // TODO: test validations
    }
    
    /**
     * Get data source by id
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void dataSourcesGetDataSourceTest() throws IOException {
        String id = null;
        DataSourceVM response = api.dataSourcesGetDataSource(id);

        // TODO: test validations
    }
    
    /**
     * Get all Data source permissions
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void dataSourcesGetPermissionsTest() throws IOException {
        String id = null;
        DataSourcePermissionsVM response = api.dataSourcesGetPermissions(id);

        // TODO: test validations
    }
    
    /**
     * Rename data source by id
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void dataSourcesRenameDataSourceTest() throws IOException {
        String id = null;
        RenameDataSourceVM renameModel = null;
        DataSourceVM response = api.dataSourcesRenameDataSource(id, renameModel);

        // TODO: test validations
    }
    
    /**
     * Update data source&#39;s connection string by id
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void dataSourcesUpdateConnectionStringTest() throws IOException {
        String id = null;
        UpdateDataSourceConnectionStringVM updateModel = null;
        DataSourceVM response = api.dataSourcesUpdateConnectionString(id, updateModel);

        // TODO: test validations
    }
    
    /**
     * Update permissions
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void dataSourcesUpdatePermissionsTest() throws IOException {
        String id = null;
        UpdateDataSourcePermissionsVM permissionsVM = null;
        api.dataSourcesUpdatePermissions(id, permissionsVM);

        // TODO: test validations
    }
    
    /**
     * Update data source&#39;s subscription
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void dataSourcesUpdateSubscriptionDataSourceTest() throws IOException {
        String id = null;
        UpdateDataSourceSubscriptionVM updatesubscriptionModel = null;
        api.dataSourcesUpdateSubscriptionDataSource(id, updatesubscriptionModel);

        // TODO: test validations
    }
    
}
