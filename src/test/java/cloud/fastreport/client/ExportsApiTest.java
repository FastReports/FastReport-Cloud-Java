/*
 * FastReport Cloud
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloud.fastreport.client;

import cloud.fastreport.model.BreadcrumbsVM;
import cloud.fastreport.model.CountVM;
import cloud.fastreport.model.ExportFolderCreateVM;
import cloud.fastreport.model.ExportVM;
import cloud.fastreport.model.ExportsVM;
import cloud.fastreport.model.FileIconVM;
import cloud.fastreport.model.FilePermissionsVM;
import cloud.fastreport.model.FileRenameVM;
import cloud.fastreport.model.FileSorting;
import cloud.fastreport.model.FileTagsUpdateVM;
import cloud.fastreport.model.FileVM;
import cloud.fastreport.model.FilesVM;
import cloud.fastreport.model.FolderIconVM;
import cloud.fastreport.model.FolderRenameVM;
import cloud.fastreport.model.FolderTagsUpdateVM;
import cloud.fastreport.model.ProblemDetails;
import cloud.fastreport.model.UpdateFilePermissionsVM;
import org.junit.Test;
import org.junit.Ignore;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExportsApi
 */
@Ignore
public class ExportsApiTest {

    private final ExportsApi api = new ExportsApi();

    
    /**
     * Get count of files and folders what contains in a specified folder
     *
     * User with a Get Count permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportFolderAndFileGetCountTest() throws IOException {
        String id = null;
        String searchPattern = null;
        CountVM response = api.exportFolderAndFileGetCount(id, searchPattern);

        // TODO: test validations
    }
    
    /**
     * Get all folders and files from specified folder
     *
     * User with a Get Entity permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportFolderAndFileGetFoldersAndFilesTest() throws IOException {
        String id = null;
        Integer skip = null;
        Integer take = null;
        FileSorting orderBy = null;
        Boolean desc = null;
        String searchPattern = null;
        FilesVM response = api.exportFolderAndFileGetFoldersAndFiles(id, skip, take, orderBy, desc, searchPattern);

        // TODO: test validations
    }
    
    /**
     * Move folder to a specified folder
     *
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportFoldersCopyFolderTest() throws IOException {
        String id = null;
        String folderId = null;
        FileVM response = api.exportFoldersCopyFolder(id, folderId);

        // TODO: test validations
    }
    
    /**
     * Delete specified folder
     *
     * User with a Delete Entity permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportFoldersDeleteFolderTest() throws IOException {
        String id = null;
        Boolean recursive = null;
        api.exportFoldersDeleteFolder(id, recursive);

        // TODO: test validations
    }
    
    /**
     * Get specified folder breadcrumbs
     *
     * User with a Get Entity permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportFoldersGetBreadcrumbsTest() throws IOException {
        String id = null;
        BreadcrumbsVM response = api.exportFoldersGetBreadcrumbs(id);

        // TODO: test validations
    }
    
    /**
     * Get specified folder
     *
     * User with a Get Entity permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportFoldersGetFolderTest() throws IOException {
        String id = null;
        FileVM response = api.exportFoldersGetFolder(id);

        // TODO: test validations
    }
    
    /**
     * Get all folders from specified folder
     *
     * User with a Get Entity permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportFoldersGetFoldersTest() throws IOException {
        String id = null;
        Integer skip = null;
        Integer take = null;
        FilesVM response = api.exportFoldersGetFolders(id, skip, take);

        // TODO: test validations
    }
    
    /**
     * Get count of folders what contains in a specified folder
     *
     * User with a Get Count permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportFoldersGetFoldersCountTest() throws IOException {
        String id = null;
        CountVM response = api.exportFoldersGetFoldersCount(id);

        // TODO: test validations
    }
    
    /**
     * Get all folder permissions
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportFoldersGetPermissionsTest() throws IOException {
        String id = null;
        FilePermissionsVM response = api.exportFoldersGetPermissions(id);

        // TODO: test validations
    }
    
    /**
     * Get user&#39;s root folder (without parents)
     *
     * &gt; Breakchange. Now user model doesn&#39;t contain a root folders.  This method can return error 400 and 404 when subscription is not found.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportFoldersGetRootFolderTest() throws IOException {
        String subscriptionId = null;
        FileVM response = api.exportFoldersGetRootFolder(subscriptionId);

        // TODO: test validations
    }
    
    /**
     * Move folder to a specified folder
     *
     * User with a Update Place permission for a folder and Create Entity  for a Parent Folder can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportFoldersMoveFolderTest() throws IOException {
        String id = null;
        String folderId = null;
        FileVM response = api.exportFoldersMoveFolder(id, folderId);

        // TODO: test validations
    }
    
    /**
     * Create folder
     *
     * User with a Create Entity permisison can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportFoldersPostFolderTest() throws IOException {
        String id = null;
        ExportFolderCreateVM exportFolderCreateVM = null;
        FileVM response = api.exportFoldersPostFolder(id, exportFolderCreateVM);

        // TODO: test validations
    }
    
    /**
     * Rename a folder
     *
     * User with a Update Name permision can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportFoldersRenameFolderTest() throws IOException {
        String id = null;
        FolderRenameVM folderRenameVM = null;
        FileVM response = api.exportFoldersRenameFolder(id, folderRenameVM);

        // TODO: test validations
    }
    
    /**
     * Update a folder&#39;s icon
     *
     * User with a Update Icon permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportFoldersUpdateIconTest() throws IOException {
        String id = null;
        FolderIconVM folderIconVM = null;
        FileVM response = api.exportFoldersUpdateIcon(id, folderIconVM);

        // TODO: test validations
    }
    
    /**
     * Update permissions
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportFoldersUpdatePermissionsTest() throws IOException {
        String id = null;
        UpdateFilePermissionsVM updateFilePermissionsVM = null;
        api.exportFoldersUpdatePermissions(id, updateFilePermissionsVM);

        // TODO: test validations
    }
    
    /**
     * Update tags
     *
     * User with a Update Tags permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportFoldersUpdateTagsTest() throws IOException {
        String id = null;
        FolderTagsUpdateVM folderTagsUpdateVM = null;
        FileVM response = api.exportFoldersUpdateTags(id, folderTagsUpdateVM);

        // TODO: test validations
    }
    
    /**
     * Copy file to a specified folder
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportsCopyFileTest() throws IOException {
        String id = null;
        String folderId = null;
        ExportVM response = api.exportsCopyFile(id, folderId);

        // TODO: test validations
    }
    
    /**
     * Delete specified file
     *
     * User with Delete permission can access the method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportsDeleteFileTest() throws IOException {
        String id = null;
        api.exportsDeleteFile(id);

        // TODO: test validations
    }
    
    /**
     * Get specified file
     *
     * User with Get Entity permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportsGetFileTest() throws IOException {
        String id = null;
        ExportVM response = api.exportsGetFile(id);

        // TODO: test validations
    }
    
    /**
     * Get count of files what contains in a specified folder
     *
     * User with Get Count permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportsGetFilesCountTest() throws IOException {
        String id = null;
        CountVM response = api.exportsGetFilesCount(id);

        // TODO: test validations
    }
    
    /**
     * Get all files from specified folder. &lt;br /&gt;  User with Get Entity permission can access this method. &lt;br /&gt;  The method will returns minimal infomration about the file: &lt;br /&gt;  id, name, size, editedTime, createdTime, tags, status, statusReason.
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportsGetFilesListTest() throws IOException {
        String id = null;
        Integer skip = null;
        Integer take = null;
        String searchPattern = null;
        ExportsVM response = api.exportsGetFilesList(id, skip, take, searchPattern);

        // TODO: test validations
    }
    
    /**
     * Get all file permissions
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportsGetPermissionsTest() throws IOException {
        String id = null;
        FilePermissionsVM response = api.exportsGetPermissions(id);

        // TODO: test validations
    }
    
    /**
     * Move file to a specified folder
     *
     * User with Update Place permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportsMoveFileTest() throws IOException {
        String id = null;
        String folderId = null;
        ExportVM response = api.exportsMoveFile(id, folderId);

        // TODO: test validations
    }
    
    /**
     * Rename a file
     *
     * User with Update Name permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportsRenameFileTest() throws IOException {
        String id = null;
        FileRenameVM fileRenameVM = null;
        ExportVM response = api.exportsRenameFile(id, fileRenameVM);

        // TODO: test validations
    }
    
    /**
     * Update a files&#39;s icon
     *
     * User with Update Icon permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportsUpdateIconTest() throws IOException {
        String id = null;
        FileIconVM fileIconVM = null;
        ExportVM response = api.exportsUpdateIcon(id, fileIconVM);

        // TODO: test validations
    }
    
    /**
     * Update permissions
     *
     * 
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportsUpdatePermissionsTest() throws IOException {
        String id = null;
        UpdateFilePermissionsVM updateFilePermissionsVM = null;
        api.exportsUpdatePermissions(id, updateFilePermissionsVM);

        // TODO: test validations
    }
    
    /**
     * Update tags
     *
     * User with Update Tags permission can access this method.
     *
     * @throws IOException
     *          if the Api call fails
     */
    @Test
    public void exportsUpdateTagsTest() throws IOException {
        String id = null;
        FileTagsUpdateVM fileTagsUpdateVM = null;
        ExportVM response = api.exportsUpdateTags(id, fileTagsUpdateVM);

        // TODO: test validations
    }
    
}
